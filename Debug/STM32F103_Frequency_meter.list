
STM32F103_Frequency_meter.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000039a0  0800010c  0800010c  0001010c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000ccc  08003aac  08003aac  00013aac  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08004778  08004778  0002007c  2**0
                  CONTENTS
  4 .ARM          00000000  08004778  08004778  0002007c  2**0
                  CONTENTS
  5 .preinit_array 00000000  08004778  08004778  0002007c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08004778  08004778  00014778  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800477c  0800477c  0001477c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000007c  20000000  08004780  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000027c  2000007c  080047fc  0002007c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200002f8  080047fc  000202f8  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  0002007c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000bfc3  00000000  00000000  000200a5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000204e  00000000  00000000  0002c068  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000ce0  00000000  00000000  0002e0b8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_macro  00017850  00000000  00000000  0002ed98  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_line   0000e1fd  00000000  00000000  000465e8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_str    0008a8e3  00000000  00000000  000547e5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .comment      00000050  00000000  00000000  000df0c8  2**0
                  CONTENTS, READONLY
 19 .debug_ranges 00000bc0  00000000  00000000  000df118  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00003894  00000000  00000000  000dfcd8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	; (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	; (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	; (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	2000007c 	.word	0x2000007c
 8000128:	00000000 	.word	0x00000000
 800012c:	08003a94 	.word	0x08003a94

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	; (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	; (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	; (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	20000080 	.word	0x20000080
 8000148:	08003a94 	.word	0x08003a94

0800014c <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 800014c:	b580      	push	{r7, lr}
 800014e:	b088      	sub	sp, #32
 8000150:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000152:	f107 0310 	add.w	r3, r7, #16
 8000156:	2200      	movs	r2, #0
 8000158:	601a      	str	r2, [r3, #0]
 800015a:	605a      	str	r2, [r3, #4]
 800015c:	609a      	str	r2, [r3, #8]
 800015e:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000160:	4b1d      	ldr	r3, [pc, #116]	; (80001d8 <MX_GPIO_Init+0x8c>)
 8000162:	699b      	ldr	r3, [r3, #24]
 8000164:	4a1c      	ldr	r2, [pc, #112]	; (80001d8 <MX_GPIO_Init+0x8c>)
 8000166:	f043 0320 	orr.w	r3, r3, #32
 800016a:	6193      	str	r3, [r2, #24]
 800016c:	4b1a      	ldr	r3, [pc, #104]	; (80001d8 <MX_GPIO_Init+0x8c>)
 800016e:	699b      	ldr	r3, [r3, #24]
 8000170:	f003 0320 	and.w	r3, r3, #32
 8000174:	60fb      	str	r3, [r7, #12]
 8000176:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000178:	4b17      	ldr	r3, [pc, #92]	; (80001d8 <MX_GPIO_Init+0x8c>)
 800017a:	699b      	ldr	r3, [r3, #24]
 800017c:	4a16      	ldr	r2, [pc, #88]	; (80001d8 <MX_GPIO_Init+0x8c>)
 800017e:	f043 0304 	orr.w	r3, r3, #4
 8000182:	6193      	str	r3, [r2, #24]
 8000184:	4b14      	ldr	r3, [pc, #80]	; (80001d8 <MX_GPIO_Init+0x8c>)
 8000186:	699b      	ldr	r3, [r3, #24]
 8000188:	f003 0304 	and.w	r3, r3, #4
 800018c:	60bb      	str	r3, [r7, #8]
 800018e:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000190:	4b11      	ldr	r3, [pc, #68]	; (80001d8 <MX_GPIO_Init+0x8c>)
 8000192:	699b      	ldr	r3, [r3, #24]
 8000194:	4a10      	ldr	r2, [pc, #64]	; (80001d8 <MX_GPIO_Init+0x8c>)
 8000196:	f043 0308 	orr.w	r3, r3, #8
 800019a:	6193      	str	r3, [r2, #24]
 800019c:	4b0e      	ldr	r3, [pc, #56]	; (80001d8 <MX_GPIO_Init+0x8c>)
 800019e:	699b      	ldr	r3, [r3, #24]
 80001a0:	f003 0308 	and.w	r3, r3, #8
 80001a4:	607b      	str	r3, [r7, #4]
 80001a6:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LCD_DC_Pin|LCD_RS_Pin, GPIO_PIN_RESET);
 80001a8:	2200      	movs	r2, #0
 80001aa:	2103      	movs	r1, #3
 80001ac:	480b      	ldr	r0, [pc, #44]	; (80001dc <MX_GPIO_Init+0x90>)
 80001ae:	f001 fbc3 	bl	8001938 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PBPin PBPin */
  GPIO_InitStruct.Pin = LCD_DC_Pin|LCD_RS_Pin;
 80001b2:	2303      	movs	r3, #3
 80001b4:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80001b6:	2301      	movs	r3, #1
 80001b8:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80001ba:	2300      	movs	r3, #0
 80001bc:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80001be:	2303      	movs	r3, #3
 80001c0:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80001c2:	f107 0310 	add.w	r3, r7, #16
 80001c6:	4619      	mov	r1, r3
 80001c8:	4804      	ldr	r0, [pc, #16]	; (80001dc <MX_GPIO_Init+0x90>)
 80001ca:	f001 fa31 	bl	8001630 <HAL_GPIO_Init>

}
 80001ce:	bf00      	nop
 80001d0:	3720      	adds	r7, #32
 80001d2:	46bd      	mov	sp, r7
 80001d4:	bd80      	pop	{r7, pc}
 80001d6:	bf00      	nop
 80001d8:	40021000 	.word	0x40021000
 80001dc:	40010c00 	.word	0x40010c00

080001e0 <LCD_Write>:
 *
 * \param data	8-Bit Data
 *
 * \return void
 */
inline static void LCD_Write(uint8_t data) {
 80001e0:	b580      	push	{r7, lr}
 80001e2:	b082      	sub	sp, #8
 80001e4:	af00      	add	r7, sp, #0
 80001e6:	4603      	mov	r3, r0
 80001e8:	71fb      	strb	r3, [r7, #7]
	/* Check the communication status */
	if(HAL_SPI_Transmit(LCD_hspi, &data, 1, LCD_SPI_TIMEOUT) != HAL_OK) {
 80001ea:	4b08      	ldr	r3, [pc, #32]	; (800020c <LCD_Write+0x2c>)
 80001ec:	6818      	ldr	r0, [r3, #0]
 80001ee:	1df9      	adds	r1, r7, #7
 80001f0:	230a      	movs	r3, #10
 80001f2:	2201      	movs	r2, #1
 80001f4:	f002 f824 	bl	8002240 <HAL_SPI_Transmit>
 80001f8:	4603      	mov	r3, r0
 80001fa:	2b00      	cmp	r3, #0
 80001fc:	d001      	beq.n	8000202 <LCD_Write+0x22>
		/* Execute user timeout callback */
		Error_Handler();
 80001fe:	f000 fdc2 	bl	8000d86 <Error_Handler>
	}
}
 8000202:	bf00      	nop
 8000204:	3708      	adds	r7, #8
 8000206:	46bd      	mov	sp, r7
 8000208:	bd80      	pop	{r7, pc}
 800020a:	bf00      	nop
 800020c:	20000098 	.word	0x20000098

08000210 <LCD_WriteMultiple>:
 * \param size		amount of bytes to transmit
 *
 * \return void
 */

inline static void LCD_WriteMultiple(uint8_t * pData, uint32_t size) {
 8000210:	b580      	push	{r7, lr}
 8000212:	b084      	sub	sp, #16
 8000214:	af00      	add	r7, sp, #0
 8000216:	6078      	str	r0, [r7, #4]
 8000218:	6039      	str	r1, [r7, #0]
	if (size == 1) {
 800021a:	683b      	ldr	r3, [r7, #0]
 800021c:	2b01      	cmp	r3, #1
 800021e:	d105      	bne.n	800022c <LCD_WriteMultiple+0x1c>
		/* Only 1 byte to be sent to LCD - general interface can be used */
		/* Send Data */
		LCD_Write(*pData);
 8000220:	687b      	ldr	r3, [r7, #4]
 8000222:	781b      	ldrb	r3, [r3, #0]
 8000224:	4618      	mov	r0, r3
 8000226:	f7ff ffdb 	bl	80001e0 <LCD_Write>

		/* Wait until the bus is ready before releasing Chip select */
		while (((LCD_hspi->Instance->SR) & SPI_FLAG_BSY) != RESET) {
		}
	}
}
 800022a:	e034      	b.n	8000296 <LCD_WriteMultiple+0x86>
		for (uint32_t counter = size; counter != 0; counter -= 2) {
 800022c:	683b      	ldr	r3, [r7, #0]
 800022e:	60fb      	str	r3, [r7, #12]
 8000230:	e025      	b.n	800027e <LCD_WriteMultiple+0x6e>
			while (((LCD_hspi->Instance->SR) & SPI_FLAG_TXE) != SPI_FLAG_TXE) {
 8000232:	bf00      	nop
 8000234:	4b1a      	ldr	r3, [pc, #104]	; (80002a0 <LCD_WriteMultiple+0x90>)
 8000236:	681b      	ldr	r3, [r3, #0]
 8000238:	681b      	ldr	r3, [r3, #0]
 800023a:	689b      	ldr	r3, [r3, #8]
 800023c:	f003 0302 	and.w	r3, r3, #2
 8000240:	2b02      	cmp	r3, #2
 8000242:	d1f7      	bne.n	8000234 <LCD_WriteMultiple+0x24>
			*((__IO uint8_t*) &(LCD_hspi->Instance->DR)) = *(pData + 1);
 8000244:	4b16      	ldr	r3, [pc, #88]	; (80002a0 <LCD_WriteMultiple+0x90>)
 8000246:	681b      	ldr	r3, [r3, #0]
 8000248:	681b      	ldr	r3, [r3, #0]
 800024a:	330c      	adds	r3, #12
 800024c:	687a      	ldr	r2, [r7, #4]
 800024e:	7852      	ldrb	r2, [r2, #1]
 8000250:	701a      	strb	r2, [r3, #0]
			while (((LCD_hspi->Instance->SR) & SPI_FLAG_TXE) != SPI_FLAG_TXE) {
 8000252:	bf00      	nop
 8000254:	4b12      	ldr	r3, [pc, #72]	; (80002a0 <LCD_WriteMultiple+0x90>)
 8000256:	681b      	ldr	r3, [r3, #0]
 8000258:	681b      	ldr	r3, [r3, #0]
 800025a:	689b      	ldr	r3, [r3, #8]
 800025c:	f003 0302 	and.w	r3, r3, #2
 8000260:	2b02      	cmp	r3, #2
 8000262:	d1f7      	bne.n	8000254 <LCD_WriteMultiple+0x44>
			*((__IO uint8_t*) &(LCD_hspi->Instance->DR)) = *pData;
 8000264:	4b0e      	ldr	r3, [pc, #56]	; (80002a0 <LCD_WriteMultiple+0x90>)
 8000266:	681b      	ldr	r3, [r3, #0]
 8000268:	681b      	ldr	r3, [r3, #0]
 800026a:	330c      	adds	r3, #12
 800026c:	687a      	ldr	r2, [r7, #4]
 800026e:	7812      	ldrb	r2, [r2, #0]
 8000270:	701a      	strb	r2, [r3, #0]
			pData += 2;
 8000272:	687b      	ldr	r3, [r7, #4]
 8000274:	3302      	adds	r3, #2
 8000276:	607b      	str	r3, [r7, #4]
		for (uint32_t counter = size; counter != 0; counter -= 2) {
 8000278:	68fb      	ldr	r3, [r7, #12]
 800027a:	3b02      	subs	r3, #2
 800027c:	60fb      	str	r3, [r7, #12]
 800027e:	68fb      	ldr	r3, [r7, #12]
 8000280:	2b00      	cmp	r3, #0
 8000282:	d1d6      	bne.n	8000232 <LCD_WriteMultiple+0x22>
		while (((LCD_hspi->Instance->SR) & SPI_FLAG_BSY) != RESET) {
 8000284:	bf00      	nop
 8000286:	4b06      	ldr	r3, [pc, #24]	; (80002a0 <LCD_WriteMultiple+0x90>)
 8000288:	681b      	ldr	r3, [r3, #0]
 800028a:	681b      	ldr	r3, [r3, #0]
 800028c:	689b      	ldr	r3, [r3, #8]
 800028e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000292:	2b00      	cmp	r3, #0
 8000294:	d1f7      	bne.n	8000286 <LCD_WriteMultiple+0x76>
}
 8000296:	bf00      	nop
 8000298:	3710      	adds	r7, #16
 800029a:	46bd      	mov	sp, r7
 800029c:	bd80      	pop	{r7, pc}
 800029e:	bf00      	nop
 80002a0:	20000098 	.word	0x20000098

080002a4 <LCD_WriteCmd>:
 *
 * \param addr		Register address (8-bit address)
 *
 * \return void
 */
inline static void LCD_WriteCmd(uint8_t addr) {
 80002a4:	b580      	push	{r7, lr}
 80002a6:	b082      	sub	sp, #8
 80002a8:	af00      	add	r7, sp, #0
 80002aa:	4603      	mov	r3, r0
 80002ac:	71fb      	strb	r3, [r7, #7]
	LCD_CD_COMMAND();
 80002ae:	4b06      	ldr	r3, [pc, #24]	; (80002c8 <LCD_WriteCmd+0x24>)
 80002b0:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 80002b4:	611a      	str	r2, [r3, #16]
	LCD_Write(addr);
 80002b6:	79fb      	ldrb	r3, [r7, #7]
 80002b8:	4618      	mov	r0, r3
 80002ba:	f7ff ff91 	bl	80001e0 <LCD_Write>
}
 80002be:	bf00      	nop
 80002c0:	3708      	adds	r7, #8
 80002c2:	46bd      	mov	sp, r7
 80002c4:	bd80      	pop	{r7, pc}
 80002c6:	bf00      	nop
 80002c8:	40010c00 	.word	0x40010c00

080002cc <LCD_WriteData>:
 * \param size		amount of bytes to trasmit
 *
 * \return void
 */

inline static void LCD_WriteData(uint8_t * pData, uint32_t size) {
 80002cc:	b580      	push	{r7, lr}
 80002ce:	b082      	sub	sp, #8
 80002d0:	af00      	add	r7, sp, #0
 80002d2:	6078      	str	r0, [r7, #4]
 80002d4:	6039      	str	r1, [r7, #0]
	LCD_CD_DATA();
 80002d6:	4b05      	ldr	r3, [pc, #20]	; (80002ec <LCD_WriteData+0x20>)
 80002d8:	2201      	movs	r2, #1
 80002da:	611a      	str	r2, [r3, #16]
	LCD_WriteMultiple(pData, size);
 80002dc:	6839      	ldr	r1, [r7, #0]
 80002de:	6878      	ldr	r0, [r7, #4]
 80002e0:	f7ff ff96 	bl	8000210 <LCD_WriteMultiple>
}
 80002e4:	bf00      	nop
 80002e6:	3708      	adds	r7, #8
 80002e8:	46bd      	mov	sp, r7
 80002ea:	bd80      	pop	{r7, pc}
 80002ec:	40010c00 	.word	0x40010c00

080002f0 <LCD_WriteRegister>:
 * \param size		Size
 *
 * \return void
 */
inline static void LCD_WriteRegister(uint8_t addr, uint8_t * pData,
		uint32_t size) {
 80002f0:	b580      	push	{r7, lr}
 80002f2:	b084      	sub	sp, #16
 80002f4:	af00      	add	r7, sp, #0
 80002f6:	4603      	mov	r3, r0
 80002f8:	60b9      	str	r1, [r7, #8]
 80002fa:	607a      	str	r2, [r7, #4]
 80002fc:	73fb      	strb	r3, [r7, #15]
	LCD_WriteCmd(addr);
 80002fe:	7bfb      	ldrb	r3, [r7, #15]
 8000300:	4618      	mov	r0, r3
 8000302:	f7ff ffcf 	bl	80002a4 <LCD_WriteCmd>
	LCD_WriteData(pData, size);
 8000306:	6879      	ldr	r1, [r7, #4]
 8000308:	68b8      	ldr	r0, [r7, #8]
 800030a:	f7ff ffdf 	bl	80002cc <LCD_WriteData>
}
 800030e:	bf00      	nop
 8000310:	3710      	adds	r7, #16
 8000312:	46bd      	mov	sp, r7
 8000314:	bd80      	pop	{r7, pc}
	...

08000318 <LCD_Init>:
 *
 * \param
 *
 * \return void
 */
void LCD_Init(SPI_HandleTypeDef * hspi) {
 8000318:	b580      	push	{r7, lr}
 800031a:	b084      	sub	sp, #16
 800031c:	af00      	add	r7, sp, #0
 800031e:	6078      	str	r0, [r7, #4]

	LCD_hspi = hspi;
 8000320:	4a45      	ldr	r2, [pc, #276]	; (8000438 <LCD_Init+0x120>)
 8000322:	687b      	ldr	r3, [r7, #4]
 8000324:	6013      	str	r3, [r2, #0]
	LCD_FillScreen(BLACK);
 8000326:	2000      	movs	r0, #0
 8000328:	f000 f902 	bl	8000530 <LCD_FillScreen>
	m_width = TFTWIDTH;
 800032c:	4b43      	ldr	r3, [pc, #268]	; (800043c <LCD_Init+0x124>)
 800032e:	22f0      	movs	r2, #240	; 0xf0
 8000330:	801a      	strh	r2, [r3, #0]
	m_height = TFTHEIGHT;
 8000332:	4b43      	ldr	r3, [pc, #268]	; (8000440 <LCD_Init+0x128>)
 8000334:	22f0      	movs	r2, #240	; 0xf0
 8000336:	801a      	strh	r2, [r3, #0]
	m_rotation = 0;
 8000338:	4b42      	ldr	r3, [pc, #264]	; (8000444 <LCD_Init+0x12c>)
 800033a:	2200      	movs	r2, #0
 800033c:	701a      	strb	r2, [r3, #0]
	m_cursor_y = m_cursor_x = 0;
 800033e:	4b42      	ldr	r3, [pc, #264]	; (8000448 <LCD_Init+0x130>)
 8000340:	2200      	movs	r2, #0
 8000342:	801a      	strh	r2, [r3, #0]
 8000344:	4b40      	ldr	r3, [pc, #256]	; (8000448 <LCD_Init+0x130>)
 8000346:	f9b3 2000 	ldrsh.w	r2, [r3]
 800034a:	4b40      	ldr	r3, [pc, #256]	; (800044c <LCD_Init+0x134>)
 800034c:	801a      	strh	r2, [r3, #0]
	m_font = 0;
 800034e:	4b40      	ldr	r3, [pc, #256]	; (8000450 <LCD_Init+0x138>)
 8000350:	2200      	movs	r2, #0
 8000352:	701a      	strb	r2, [r3, #0]
	m_textcolor = m_textbgcolor = 0xFFFF;
 8000354:	4b3f      	ldr	r3, [pc, #252]	; (8000454 <LCD_Init+0x13c>)
 8000356:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800035a:	801a      	strh	r2, [r3, #0]
 800035c:	4b3d      	ldr	r3, [pc, #244]	; (8000454 <LCD_Init+0x13c>)
 800035e:	881a      	ldrh	r2, [r3, #0]
 8000360:	4b3d      	ldr	r3, [pc, #244]	; (8000458 <LCD_Init+0x140>)
 8000362:	801a      	strh	r2, [r3, #0]
	m_wrap = 1;
 8000364:	4b3d      	ldr	r3, [pc, #244]	; (800045c <LCD_Init+0x144>)
 8000366:	2201      	movs	r2, #1
 8000368:	701a      	strb	r2, [r3, #0]

	LCD_Reset();
 800036a:	f000 f905 	bl	8000578 <LCD_Reset>
	HAL_Delay(50);
 800036e:	2032      	movs	r0, #50	; 0x32
 8000370:	f001 f82c 	bl	80013cc <HAL_Delay>

	LCD_CS_ACTIVE();
 8000374:	4b3a      	ldr	r3, [pc, #232]	; (8000460 <LCD_Init+0x148>)
 8000376:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 800037a:	611a      	str	r2, [r3, #16]

#if	defined(ST7735)
	uint8_t i = 0;
 800037c:	2300      	movs	r3, #0
 800037e:	73fb      	strb	r3, [r7, #15]
	uint16_t r, len;
	while (i < sizeof(ST7735_regValues) / sizeof(ST7735_regValues[0])) {
 8000380:	e035      	b.n	80003ee <LCD_Init+0xd6>
		r = ST7735_regValues[i++];
 8000382:	7bfb      	ldrb	r3, [r7, #15]
 8000384:	1c5a      	adds	r2, r3, #1
 8000386:	73fa      	strb	r2, [r7, #15]
 8000388:	461a      	mov	r2, r3
 800038a:	4b36      	ldr	r3, [pc, #216]	; (8000464 <LCD_Init+0x14c>)
 800038c:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
 8000390:	81bb      	strh	r3, [r7, #12]
		len = ST7735_regValues[i++];
 8000392:	7bfb      	ldrb	r3, [r7, #15]
 8000394:	1c5a      	adds	r2, r3, #1
 8000396:	73fa      	strb	r2, [r7, #15]
 8000398:	461a      	mov	r2, r3
 800039a:	4b32      	ldr	r3, [pc, #200]	; (8000464 <LCD_Init+0x14c>)
 800039c:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
 80003a0:	817b      	strh	r3, [r7, #10]
		if (r == TFTLCD_DELAY) {
 80003a2:	89bb      	ldrh	r3, [r7, #12]
 80003a4:	2b00      	cmp	r3, #0
 80003a6:	d104      	bne.n	80003b2 <LCD_Init+0x9a>
			HAL_Delay(len);
 80003a8:	897b      	ldrh	r3, [r7, #10]
 80003aa:	4618      	mov	r0, r3
 80003ac:	f001 f80e 	bl	80013cc <HAL_Delay>
 80003b0:	e01d      	b.n	80003ee <LCD_Init+0xd6>
		} else {
			LCD_WriteCmd(r);
 80003b2:	89bb      	ldrh	r3, [r7, #12]
 80003b4:	b2db      	uxtb	r3, r3
 80003b6:	4618      	mov	r0, r3
 80003b8:	f7ff ff74 	bl	80002a4 <LCD_WriteCmd>
			LCD_CD_DATA();
 80003bc:	4b28      	ldr	r3, [pc, #160]	; (8000460 <LCD_Init+0x148>)
 80003be:	2201      	movs	r2, #1
 80003c0:	611a      	str	r2, [r3, #16]
			for (uint8_t d = 0; d < len; d++) {
 80003c2:	2300      	movs	r3, #0
 80003c4:	73bb      	strb	r3, [r7, #14]
 80003c6:	e00d      	b.n	80003e4 <LCD_Init+0xcc>
				LCD_Write(ST7735_regValues[i++]);
 80003c8:	7bfb      	ldrb	r3, [r7, #15]
 80003ca:	1c5a      	adds	r2, r3, #1
 80003cc:	73fa      	strb	r2, [r7, #15]
 80003ce:	461a      	mov	r2, r3
 80003d0:	4b24      	ldr	r3, [pc, #144]	; (8000464 <LCD_Init+0x14c>)
 80003d2:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
 80003d6:	b2db      	uxtb	r3, r3
 80003d8:	4618      	mov	r0, r3
 80003da:	f7ff ff01 	bl	80001e0 <LCD_Write>
			for (uint8_t d = 0; d < len; d++) {
 80003de:	7bbb      	ldrb	r3, [r7, #14]
 80003e0:	3301      	adds	r3, #1
 80003e2:	73bb      	strb	r3, [r7, #14]
 80003e4:	7bbb      	ldrb	r3, [r7, #14]
 80003e6:	b29b      	uxth	r3, r3
 80003e8:	897a      	ldrh	r2, [r7, #10]
 80003ea:	429a      	cmp	r2, r3
 80003ec:	d8ec      	bhi.n	80003c8 <LCD_Init+0xb0>
	while (i < sizeof(ST7735_regValues) / sizeof(ST7735_regValues[0])) {
 80003ee:	7bfb      	ldrb	r3, [r7, #15]
 80003f0:	2b43      	cmp	r3, #67	; 0x43
 80003f2:	d9c6      	bls.n	8000382 <LCD_Init+0x6a>
			}
		}
	}

	LCD_SetRotation(0);
 80003f4:	2000      	movs	r0, #0
 80003f6:	f000 f925 	bl	8000644 <LCD_SetRotation>
	LCD_SetAddrWindow(0, 0, m_width - 1, m_height - 1);
 80003fa:	4b10      	ldr	r3, [pc, #64]	; (800043c <LCD_Init+0x124>)
 80003fc:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000400:	b29b      	uxth	r3, r3
 8000402:	3b01      	subs	r3, #1
 8000404:	b29a      	uxth	r2, r3
 8000406:	4b0e      	ldr	r3, [pc, #56]	; (8000440 <LCD_Init+0x128>)
 8000408:	f9b3 3000 	ldrsh.w	r3, [r3]
 800040c:	b29b      	uxth	r3, r3
 800040e:	3b01      	subs	r3, #1
 8000410:	b29b      	uxth	r3, r3
 8000412:	2100      	movs	r1, #0
 8000414:	2000      	movs	r0, #0
 8000416:	f000 f8d7 	bl	80005c8 <LCD_SetAddrWindow>
#elif
#endif

	LCD_FillScreen(BLACK);
 800041a:	2000      	movs	r0, #0
 800041c:	f000 f888 	bl	8000530 <LCD_FillScreen>
	LCD_SetTextSize(0);
 8000420:	2000      	movs	r0, #0
 8000422:	f000 fb69 	bl	8000af8 <LCD_SetTextSize>
	LCD_SetTextColor(WHITE, BLACK);
 8000426:	2100      	movs	r1, #0
 8000428:	f64f 70ff 	movw	r0, #65535	; 0xffff
 800042c:	f000 fb7e 	bl	8000b2c <LCD_SetTextColor>
}
 8000430:	bf00      	nop
 8000432:	3710      	adds	r7, #16
 8000434:	46bd      	mov	sp, r7
 8000436:	bd80      	pop	{r7, pc}
 8000438:	20000098 	.word	0x20000098
 800043c:	2000009c 	.word	0x2000009c
 8000440:	2000009e 	.word	0x2000009e
 8000444:	200000a9 	.word	0x200000a9
 8000448:	200000a0 	.word	0x200000a0
 800044c:	200000a2 	.word	0x200000a2
 8000450:	200000a8 	.word	0x200000a8
 8000454:	200000a6 	.word	0x200000a6
 8000458:	200000a4 	.word	0x200000a4
 800045c:	200000aa 	.word	0x200000aa
 8000460:	40010c00 	.word	0x40010c00
 8000464:	080046ac 	.word	0x080046ac

08000468 <LCD_DrawPixel>:
 * \param y		y-Coordinate
 * \param color	Color
 *
 * \return void
 */
void LCD_DrawPixel(uint16_t x, uint16_t y, uint16_t color) {
 8000468:	b580      	push	{r7, lr}
 800046a:	b082      	sub	sp, #8
 800046c:	af00      	add	r7, sp, #0
 800046e:	4603      	mov	r3, r0
 8000470:	80fb      	strh	r3, [r7, #6]
 8000472:	460b      	mov	r3, r1
 8000474:	80bb      	strh	r3, [r7, #4]
 8000476:	4613      	mov	r3, r2
 8000478:	807b      	strh	r3, [r7, #2]
	// Clip
	if ((x < 0) || (y < 0) || (x >= m_width) || (y >= m_height))
 800047a:	88fb      	ldrh	r3, [r7, #6]
 800047c:	461a      	mov	r2, r3
 800047e:	4b15      	ldr	r3, [pc, #84]	; (80004d4 <LCD_DrawPixel+0x6c>)
 8000480:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000484:	429a      	cmp	r2, r3
 8000486:	da21      	bge.n	80004cc <LCD_DrawPixel+0x64>
 8000488:	88bb      	ldrh	r3, [r7, #4]
 800048a:	461a      	mov	r2, r3
 800048c:	4b12      	ldr	r3, [pc, #72]	; (80004d8 <LCD_DrawPixel+0x70>)
 800048e:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000492:	429a      	cmp	r2, r3
 8000494:	da1a      	bge.n	80004cc <LCD_DrawPixel+0x64>
		return;

	LCD_CS_ACTIVE();
 8000496:	4b11      	ldr	r3, [pc, #68]	; (80004dc <LCD_DrawPixel+0x74>)
 8000498:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 800049c:	611a      	str	r2, [r3, #16]

#if	defined(ST7735)
	LCD_WriteRegister(ST7735_CASET, (uint8_t *) &x, 2);
 800049e:	1dbb      	adds	r3, r7, #6
 80004a0:	2202      	movs	r2, #2
 80004a2:	4619      	mov	r1, r3
 80004a4:	202a      	movs	r0, #42	; 0x2a
 80004a6:	f7ff ff23 	bl	80002f0 <LCD_WriteRegister>
	LCD_WriteRegister(ST7735_RASET, (uint8_t *) &y, 2);
 80004aa:	1d3b      	adds	r3, r7, #4
 80004ac:	2202      	movs	r2, #2
 80004ae:	4619      	mov	r1, r3
 80004b0:	202b      	movs	r0, #43	; 0x2b
 80004b2:	f7ff ff1d 	bl	80002f0 <LCD_WriteRegister>
	LCD_WriteRegister(ST7735_RAMWR, (uint8_t *) &color, 2);
 80004b6:	1cbb      	adds	r3, r7, #2
 80004b8:	2202      	movs	r2, #2
 80004ba:	4619      	mov	r1, r3
 80004bc:	202c      	movs	r0, #44	; 0x2c
 80004be:	f7ff ff17 	bl	80002f0 <LCD_WriteRegister>
#elif
#endif

	LCD_CS_IDLE();
 80004c2:	4b06      	ldr	r3, [pc, #24]	; (80004dc <LCD_DrawPixel+0x74>)
 80004c4:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80004c8:	611a      	str	r2, [r3, #16]
 80004ca:	e000      	b.n	80004ce <LCD_DrawPixel+0x66>
		return;
 80004cc:	bf00      	nop
}
 80004ce:	3708      	adds	r7, #8
 80004d0:	46bd      	mov	sp, r7
 80004d2:	bd80      	pop	{r7, pc}
 80004d4:	2000009c 	.word	0x2000009c
 80004d8:	2000009e 	.word	0x2000009e
 80004dc:	40010c00 	.word	0x40010c00

080004e0 <LCD_Flood>:
 * \param color	Color
 * \param len	Length
 *
 * \return void
 */
void LCD_Flood(uint16_t color, uint32_t len) {
 80004e0:	b580      	push	{r7, lr}
 80004e2:	b082      	sub	sp, #8
 80004e4:	af00      	add	r7, sp, #0
 80004e6:	4603      	mov	r3, r0
 80004e8:	6039      	str	r1, [r7, #0]
 80004ea:	80fb      	strh	r3, [r7, #6]
	LCD_CS_ACTIVE();
 80004ec:	4b0f      	ldr	r3, [pc, #60]	; (800052c <LCD_Flood+0x4c>)
 80004ee:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80004f2:	611a      	str	r2, [r3, #16]
#if	defined(ST7735)
	LCD_WriteRegister(ST7735_RAMWR, (uint8_t *) &color, 2);
 80004f4:	1dbb      	adds	r3, r7, #6
 80004f6:	2202      	movs	r2, #2
 80004f8:	4619      	mov	r1, r3
 80004fa:	202c      	movs	r0, #44	; 0x2c
 80004fc:	f7ff fef8 	bl	80002f0 <LCD_WriteRegister>
#elif
#endif
	len--;
 8000500:	683b      	ldr	r3, [r7, #0]
 8000502:	3b01      	subs	r3, #1
 8000504:	603b      	str	r3, [r7, #0]
	while (len--) {
 8000506:	e004      	b.n	8000512 <LCD_Flood+0x32>
		LCD_WriteMultiple((uint8_t *) &color, 2);
 8000508:	1dbb      	adds	r3, r7, #6
 800050a:	2102      	movs	r1, #2
 800050c:	4618      	mov	r0, r3
 800050e:	f7ff fe7f 	bl	8000210 <LCD_WriteMultiple>
	while (len--) {
 8000512:	683b      	ldr	r3, [r7, #0]
 8000514:	1e5a      	subs	r2, r3, #1
 8000516:	603a      	str	r2, [r7, #0]
 8000518:	2b00      	cmp	r3, #0
 800051a:	d1f5      	bne.n	8000508 <LCD_Flood+0x28>
	}
	LCD_CS_IDLE();
 800051c:	4b03      	ldr	r3, [pc, #12]	; (800052c <LCD_Flood+0x4c>)
 800051e:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8000522:	611a      	str	r2, [r3, #16]
}
 8000524:	bf00      	nop
 8000526:	3708      	adds	r7, #8
 8000528:	46bd      	mov	sp, r7
 800052a:	bd80      	pop	{r7, pc}
 800052c:	40010c00 	.word	0x40010c00

08000530 <LCD_FillScreen>:
 *
 * \param color	Color
 *
 * \return void
 */
void LCD_FillScreen(uint16_t color) {
 8000530:	b580      	push	{r7, lr}
 8000532:	b082      	sub	sp, #8
 8000534:	af00      	add	r7, sp, #0
 8000536:	4603      	mov	r3, r0
 8000538:	80fb      	strh	r3, [r7, #6]
#if defined(ST7735)
	LCD_SetAddrWindow(0, 0, m_width - 1, m_height - 1);
 800053a:	4b0d      	ldr	r3, [pc, #52]	; (8000570 <LCD_FillScreen+0x40>)
 800053c:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000540:	b29b      	uxth	r3, r3
 8000542:	3b01      	subs	r3, #1
 8000544:	b29a      	uxth	r2, r3
 8000546:	4b0b      	ldr	r3, [pc, #44]	; (8000574 <LCD_FillScreen+0x44>)
 8000548:	f9b3 3000 	ldrsh.w	r3, [r3]
 800054c:	b29b      	uxth	r3, r3
 800054e:	3b01      	subs	r3, #1
 8000550:	b29b      	uxth	r3, r3
 8000552:	2100      	movs	r1, #0
 8000554:	2000      	movs	r0, #0
 8000556:	f000 f837 	bl	80005c8 <LCD_SetAddrWindow>
#elif
#endif
	LCD_Flood(color, (long) TFTWIDTH * (long) TFTHEIGHT);
 800055a:	88fb      	ldrh	r3, [r7, #6]
 800055c:	f44f 4161 	mov.w	r1, #57600	; 0xe100
 8000560:	4618      	mov	r0, r3
 8000562:	f7ff ffbd 	bl	80004e0 <LCD_Flood>
}
 8000566:	bf00      	nop
 8000568:	3708      	adds	r7, #8
 800056a:	46bd      	mov	sp, r7
 800056c:	bd80      	pop	{r7, pc}
 800056e:	bf00      	nop
 8000570:	2000009c 	.word	0x2000009c
 8000574:	2000009e 	.word	0x2000009e

08000578 <LCD_Reset>:
 *
 * \param
 *
 * \return void
 */
void LCD_Reset(void) {
 8000578:	b580      	push	{r7, lr}
 800057a:	af00      	add	r7, sp, #0
	LCD_CS_IDLE();
 800057c:	4b11      	ldr	r3, [pc, #68]	; (80005c4 <LCD_Reset+0x4c>)
 800057e:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8000582:	611a      	str	r2, [r3, #16]
	LCD_CD_DATA();
 8000584:	4b0f      	ldr	r3, [pc, #60]	; (80005c4 <LCD_Reset+0x4c>)
 8000586:	2201      	movs	r2, #1
 8000588:	611a      	str	r2, [r3, #16]
	LCD_RST_ACTIVE();
 800058a:	4b0e      	ldr	r3, [pc, #56]	; (80005c4 <LCD_Reset+0x4c>)
 800058c:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8000590:	611a      	str	r2, [r3, #16]
	HAL_Delay(10);
 8000592:	200a      	movs	r0, #10
 8000594:	f000 ff1a 	bl	80013cc <HAL_Delay>
	LCD_RST_IDLE();
 8000598:	4b0a      	ldr	r3, [pc, #40]	; (80005c4 <LCD_Reset+0x4c>)
 800059a:	2202      	movs	r2, #2
 800059c:	611a      	str	r2, [r3, #16]
	HAL_Delay(120);
 800059e:	2078      	movs	r0, #120	; 0x78
 80005a0:	f000 ff14 	bl	80013cc <HAL_Delay>
	LCD_CS_ACTIVE();
 80005a4:	4b07      	ldr	r3, [pc, #28]	; (80005c4 <LCD_Reset+0x4c>)
 80005a6:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80005aa:	611a      	str	r2, [r3, #16]
	LCD_WriteCmd(ST7735_SWRESET);
 80005ac:	2001      	movs	r0, #1
 80005ae:	f7ff fe79 	bl	80002a4 <LCD_WriteCmd>
	HAL_Delay(120);
 80005b2:	2078      	movs	r0, #120	; 0x78
 80005b4:	f000 ff0a 	bl	80013cc <HAL_Delay>
	LCD_CS_IDLE();
 80005b8:	4b02      	ldr	r3, [pc, #8]	; (80005c4 <LCD_Reset+0x4c>)
 80005ba:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80005be:	611a      	str	r2, [r3, #16]
}
 80005c0:	bf00      	nop
 80005c2:	bd80      	pop	{r7, pc}
 80005c4:	40010c00 	.word	0x40010c00

080005c8 <LCD_SetAddrWindow>:
 * \param x2
 * \param y2
 *
 * \return void
 */
void LCD_SetAddrWindow(uint16_t x1, uint16_t y1, uint16_t x2, uint16_t y2) {
 80005c8:	b590      	push	{r4, r7, lr}
 80005ca:	b083      	sub	sp, #12
 80005cc:	af00      	add	r7, sp, #0
 80005ce:	4604      	mov	r4, r0
 80005d0:	4608      	mov	r0, r1
 80005d2:	4611      	mov	r1, r2
 80005d4:	461a      	mov	r2, r3
 80005d6:	4623      	mov	r3, r4
 80005d8:	80fb      	strh	r3, [r7, #6]
 80005da:	4603      	mov	r3, r0
 80005dc:	80bb      	strh	r3, [r7, #4]
 80005de:	460b      	mov	r3, r1
 80005e0:	807b      	strh	r3, [r7, #2]
 80005e2:	4613      	mov	r3, r2
 80005e4:	803b      	strh	r3, [r7, #0]
	LCD_CS_ACTIVE();
 80005e6:	4b16      	ldr	r3, [pc, #88]	; (8000640 <LCD_SetAddrWindow+0x78>)
 80005e8:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80005ec:	611a      	str	r2, [r3, #16]
#if	defined(ST7735)
	LCD_WriteCmd(ST7735_CASET);
 80005ee:	202a      	movs	r0, #42	; 0x2a
 80005f0:	f7ff fe58 	bl	80002a4 <LCD_WriteCmd>
	LCD_CD_DATA();
 80005f4:	4b12      	ldr	r3, [pc, #72]	; (8000640 <LCD_SetAddrWindow+0x78>)
 80005f6:	2201      	movs	r2, #1
 80005f8:	611a      	str	r2, [r3, #16]
	LCD_WriteMultiple((uint8_t *) &x1, 2);
 80005fa:	1dbb      	adds	r3, r7, #6
 80005fc:	2102      	movs	r1, #2
 80005fe:	4618      	mov	r0, r3
 8000600:	f7ff fe06 	bl	8000210 <LCD_WriteMultiple>
	LCD_WriteMultiple((uint8_t *) &x2, 2);
 8000604:	1cbb      	adds	r3, r7, #2
 8000606:	2102      	movs	r1, #2
 8000608:	4618      	mov	r0, r3
 800060a:	f7ff fe01 	bl	8000210 <LCD_WriteMultiple>
	LCD_WriteCmd(ST7735_RASET);
 800060e:	202b      	movs	r0, #43	; 0x2b
 8000610:	f7ff fe48 	bl	80002a4 <LCD_WriteCmd>
	LCD_CD_DATA();
 8000614:	4b0a      	ldr	r3, [pc, #40]	; (8000640 <LCD_SetAddrWindow+0x78>)
 8000616:	2201      	movs	r2, #1
 8000618:	611a      	str	r2, [r3, #16]
	LCD_WriteMultiple((uint8_t *) &y1, 2);
 800061a:	1d3b      	adds	r3, r7, #4
 800061c:	2102      	movs	r1, #2
 800061e:	4618      	mov	r0, r3
 8000620:	f7ff fdf6 	bl	8000210 <LCD_WriteMultiple>
	LCD_WriteMultiple((uint8_t *) &y2, 2);
 8000624:	463b      	mov	r3, r7
 8000626:	2102      	movs	r1, #2
 8000628:	4618      	mov	r0, r3
 800062a:	f7ff fdf1 	bl	8000210 <LCD_WriteMultiple>
#elif
#endif
	LCD_CS_IDLE();
 800062e:	4b04      	ldr	r3, [pc, #16]	; (8000640 <LCD_SetAddrWindow+0x78>)
 8000630:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8000634:	611a      	str	r2, [r3, #16]
}
 8000636:	bf00      	nop
 8000638:	370c      	adds	r7, #12
 800063a:	46bd      	mov	sp, r7
 800063c:	bd90      	pop	{r4, r7, pc}
 800063e:	bf00      	nop
 8000640:	40010c00 	.word	0x40010c00

08000644 <LCD_SetRotation>:
 *
 * \param x	rotation
 *
 * \return void
 */
void LCD_SetRotation(uint8_t x) {
 8000644:	b580      	push	{r7, lr}
 8000646:	b084      	sub	sp, #16
 8000648:	af00      	add	r7, sp, #0
 800064a:	4603      	mov	r3, r0
 800064c:	71fb      	strb	r3, [r7, #7]
	m_rotation = (x % 4);
 800064e:	79fb      	ldrb	r3, [r7, #7]
 8000650:	f003 0303 	and.w	r3, r3, #3
 8000654:	b2da      	uxtb	r2, r3
 8000656:	4b2c      	ldr	r3, [pc, #176]	; (8000708 <LCD_SetRotation+0xc4>)
 8000658:	701a      	strb	r2, [r3, #0]
	switch (m_rotation) {
 800065a:	4b2b      	ldr	r3, [pc, #172]	; (8000708 <LCD_SetRotation+0xc4>)
 800065c:	781b      	ldrb	r3, [r3, #0]
 800065e:	2b03      	cmp	r3, #3
 8000660:	d818      	bhi.n	8000694 <LCD_SetRotation+0x50>
 8000662:	a201      	add	r2, pc, #4	; (adr r2, 8000668 <LCD_SetRotation+0x24>)
 8000664:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000668:	08000679 	.word	0x08000679
 800066c:	08000687 	.word	0x08000687
 8000670:	08000679 	.word	0x08000679
 8000674:	08000687 	.word	0x08000687
	case 0:
	case 2:
		m_width = TFTWIDTH;
 8000678:	4b24      	ldr	r3, [pc, #144]	; (800070c <LCD_SetRotation+0xc8>)
 800067a:	22f0      	movs	r2, #240	; 0xf0
 800067c:	801a      	strh	r2, [r3, #0]
		m_height = TFTHEIGHT;
 800067e:	4b24      	ldr	r3, [pc, #144]	; (8000710 <LCD_SetRotation+0xcc>)
 8000680:	22f0      	movs	r2, #240	; 0xf0
 8000682:	801a      	strh	r2, [r3, #0]
		break;
 8000684:	e006      	b.n	8000694 <LCD_SetRotation+0x50>
	case 1:
	case 3:
		m_width = TFTHEIGHT;
 8000686:	4b21      	ldr	r3, [pc, #132]	; (800070c <LCD_SetRotation+0xc8>)
 8000688:	22f0      	movs	r2, #240	; 0xf0
 800068a:	801a      	strh	r2, [r3, #0]
		m_height = TFTWIDTH;
 800068c:	4b20      	ldr	r3, [pc, #128]	; (8000710 <LCD_SetRotation+0xcc>)
 800068e:	22f0      	movs	r2, #240	; 0xf0
 8000690:	801a      	strh	r2, [r3, #0]
		break;
 8000692:	bf00      	nop
	}
	LCD_CS_ACTIVE();
 8000694:	4b1f      	ldr	r3, [pc, #124]	; (8000714 <LCD_SetRotation+0xd0>)
 8000696:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 800069a:	611a      	str	r2, [r3, #16]
#if	defined(ST7735)
	uint8_t t;
	switch (m_rotation) {
 800069c:	4b1a      	ldr	r3, [pc, #104]	; (8000708 <LCD_SetRotation+0xc4>)
 800069e:	781b      	ldrb	r3, [r3, #0]
 80006a0:	2b03      	cmp	r3, #3
 80006a2:	d00e      	beq.n	80006c2 <LCD_SetRotation+0x7e>
 80006a4:	2b03      	cmp	r3, #3
 80006a6:	dc03      	bgt.n	80006b0 <LCD_SetRotation+0x6c>
 80006a8:	2b01      	cmp	r3, #1
 80006aa:	d004      	beq.n	80006b6 <LCD_SetRotation+0x72>
 80006ac:	2b02      	cmp	r3, #2
 80006ae:	d005      	beq.n	80006bc <LCD_SetRotation+0x78>
	default:
		t = ST7735_MADCTL_MX | ST7735_MADCTL_MY;
 80006b0:	23c0      	movs	r3, #192	; 0xc0
 80006b2:	73fb      	strb	r3, [r7, #15]
		break;
 80006b4:	e008      	b.n	80006c8 <LCD_SetRotation+0x84>
	case 1:
		t = ST7735_MADCTL_MY | ST7735_MADCTL_MV;
 80006b6:	23a0      	movs	r3, #160	; 0xa0
 80006b8:	73fb      	strb	r3, [r7, #15]
		break;
 80006ba:	e005      	b.n	80006c8 <LCD_SetRotation+0x84>
	case 2:
		t = 0;
 80006bc:	2300      	movs	r3, #0
 80006be:	73fb      	strb	r3, [r7, #15]
		break;
 80006c0:	e002      	b.n	80006c8 <LCD_SetRotation+0x84>
	case 3:
		t = ST7735_MADCTL_MX | ST7735_MADCTL_MV;
 80006c2:	2360      	movs	r3, #96	; 0x60
 80006c4:	73fb      	strb	r3, [r7, #15]
		break;
 80006c6:	bf00      	nop
	}
	LCD_WriteRegister(ST7735_MADCTL, &t, 1); // MADCTL
 80006c8:	f107 030f 	add.w	r3, r7, #15
 80006cc:	2201      	movs	r2, #1
 80006ce:	4619      	mov	r1, r3
 80006d0:	2036      	movs	r0, #54	; 0x36
 80006d2:	f7ff fe0d 	bl	80002f0 <LCD_WriteRegister>
	LCD_SetAddrWindow(0, 0, m_width - 1, m_height - 1);
 80006d6:	4b0d      	ldr	r3, [pc, #52]	; (800070c <LCD_SetRotation+0xc8>)
 80006d8:	f9b3 3000 	ldrsh.w	r3, [r3]
 80006dc:	b29b      	uxth	r3, r3
 80006de:	3b01      	subs	r3, #1
 80006e0:	b29a      	uxth	r2, r3
 80006e2:	4b0b      	ldr	r3, [pc, #44]	; (8000710 <LCD_SetRotation+0xcc>)
 80006e4:	f9b3 3000 	ldrsh.w	r3, [r3]
 80006e8:	b29b      	uxth	r3, r3
 80006ea:	3b01      	subs	r3, #1
 80006ec:	b29b      	uxth	r3, r3
 80006ee:	2100      	movs	r1, #0
 80006f0:	2000      	movs	r0, #0
 80006f2:	f7ff ff69 	bl	80005c8 <LCD_SetAddrWindow>
#elif
#endif
	LCD_CS_IDLE();
 80006f6:	4b07      	ldr	r3, [pc, #28]	; (8000714 <LCD_SetRotation+0xd0>)
 80006f8:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80006fc:	611a      	str	r2, [r3, #16]
}
 80006fe:	bf00      	nop
 8000700:	3710      	adds	r7, #16
 8000702:	46bd      	mov	sp, r7
 8000704:	bd80      	pop	{r7, pc}
 8000706:	bf00      	nop
 8000708:	200000a9 	.word	0x200000a9
 800070c:	2000009c 	.word	0x2000009c
 8000710:	2000009e 	.word	0x2000009e
 8000714:	40010c00 	.word	0x40010c00

08000718 <LCD_DrawChar>:
 * \param size		Character Size
 *
 * \return void
 */
void LCD_DrawChar(uint16_t x, uint16_t y, unsigned char c, uint16_t color,
		uint16_t bg, uint8_t fontindex) {
 8000718:	b590      	push	{r4, r7, lr}
 800071a:	b08b      	sub	sp, #44	; 0x2c
 800071c:	af00      	add	r7, sp, #0
 800071e:	4604      	mov	r4, r0
 8000720:	4608      	mov	r0, r1
 8000722:	4611      	mov	r1, r2
 8000724:	461a      	mov	r2, r3
 8000726:	4623      	mov	r3, r4
 8000728:	80fb      	strh	r3, [r7, #6]
 800072a:	4603      	mov	r3, r0
 800072c:	80bb      	strh	r3, [r7, #4]
 800072e:	460b      	mov	r3, r1
 8000730:	70fb      	strb	r3, [r7, #3]
 8000732:	4613      	mov	r3, r2
 8000734:	803b      	strh	r3, [r7, #0]
	uint16_t height, width, bytes;
	uint8_t offset;
	uint32_t charindex = 0;
 8000736:	2300      	movs	r3, #0
 8000738:	61bb      	str	r3, [r7, #24]
	uint8_t *pchar;
	uint32_t line = 0;
 800073a:	2300      	movs	r3, #0
 800073c:	627b      	str	r3, [r7, #36]	; 0x24

	height = fonts[fontindex]->Height;
 800073e:	f897 303c 	ldrb.w	r3, [r7, #60]	; 0x3c
 8000742:	4a5e      	ldr	r2, [pc, #376]	; (80008bc <LCD_DrawChar+0x1a4>)
 8000744:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000748:	88db      	ldrh	r3, [r3, #6]
 800074a:	82fb      	strh	r3, [r7, #22]
	width = fonts[fontindex]->Width;
 800074c:	f897 303c 	ldrb.w	r3, [r7, #60]	; 0x3c
 8000750:	4a5a      	ldr	r2, [pc, #360]	; (80008bc <LCD_DrawChar+0x1a4>)
 8000752:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000756:	889b      	ldrh	r3, [r3, #4]
 8000758:	82bb      	strh	r3, [r7, #20]

	if ((x >= m_width) || // Clip right
 800075a:	88fb      	ldrh	r3, [r7, #6]
 800075c:	4a58      	ldr	r2, [pc, #352]	; (80008c0 <LCD_DrawChar+0x1a8>)
 800075e:	f9b2 2000 	ldrsh.w	r2, [r2]
 8000762:	4293      	cmp	r3, r2
 8000764:	f280 80a6 	bge.w	80008b4 <LCD_DrawChar+0x19c>
			(y >= m_height) || // Clip bottom
 8000768:	88bb      	ldrh	r3, [r7, #4]
 800076a:	4a56      	ldr	r2, [pc, #344]	; (80008c4 <LCD_DrawChar+0x1ac>)
 800076c:	f9b2 2000 	ldrsh.w	r2, [r2]
	if ((x >= m_width) || // Clip right
 8000770:	4293      	cmp	r3, r2
 8000772:	f280 809f 	bge.w	80008b4 <LCD_DrawChar+0x19c>
			((x + width - 1) < 0) || // Clip left
 8000776:	88fa      	ldrh	r2, [r7, #6]
 8000778:	8abb      	ldrh	r3, [r7, #20]
 800077a:	4413      	add	r3, r2
			(y >= m_height) || // Clip bottom
 800077c:	2b00      	cmp	r3, #0
 800077e:	f340 8099 	ble.w	80008b4 <LCD_DrawChar+0x19c>
			((y + height - 1) < 0))   // Clip top
 8000782:	88ba      	ldrh	r2, [r7, #4]
 8000784:	8afb      	ldrh	r3, [r7, #22]
 8000786:	4413      	add	r3, r2
			((x + width - 1) < 0) || // Clip left
 8000788:	2b00      	cmp	r3, #0
 800078a:	f340 8093 	ble.w	80008b4 <LCD_DrawChar+0x19c>
		return;

	bytes = (width + 7) / 8;
 800078e:	8abb      	ldrh	r3, [r7, #20]
 8000790:	3307      	adds	r3, #7
 8000792:	2b00      	cmp	r3, #0
 8000794:	da00      	bge.n	8000798 <LCD_DrawChar+0x80>
 8000796:	3307      	adds	r3, #7
 8000798:	10db      	asrs	r3, r3, #3
 800079a:	827b      	strh	r3, [r7, #18]
	if (c < ' ')
 800079c:	78fb      	ldrb	r3, [r7, #3]
 800079e:	2b1f      	cmp	r3, #31
 80007a0:	d802      	bhi.n	80007a8 <LCD_DrawChar+0x90>
		c = ' ';
 80007a2:	2320      	movs	r3, #32
 80007a4:	70fb      	strb	r3, [r7, #3]
 80007a6:	e004      	b.n	80007b2 <LCD_DrawChar+0x9a>
#ifndef USE_CP1251
	else if (c > '~')
 80007a8:	78fb      	ldrb	r3, [r7, #3]
 80007aa:	2b7e      	cmp	r3, #126	; 0x7e
 80007ac:	d901      	bls.n	80007b2 <LCD_DrawChar+0x9a>
		c = ' ';
 80007ae:	2320      	movs	r3, #32
 80007b0:	70fb      	strb	r3, [r7, #3]
#endif
	charindex = (c - ' ') * height * bytes;
 80007b2:	78fb      	ldrb	r3, [r7, #3]
 80007b4:	3b20      	subs	r3, #32
 80007b6:	8afa      	ldrh	r2, [r7, #22]
 80007b8:	fb02 f303 	mul.w	r3, r2, r3
 80007bc:	8a7a      	ldrh	r2, [r7, #18]
 80007be:	fb02 f303 	mul.w	r3, r2, r3
 80007c2:	61bb      	str	r3, [r7, #24]
	offset = 8 * bytes - width;
 80007c4:	8a7b      	ldrh	r3, [r7, #18]
 80007c6:	b2db      	uxtb	r3, r3
 80007c8:	00db      	lsls	r3, r3, #3
 80007ca:	b2da      	uxtb	r2, r3
 80007cc:	8abb      	ldrh	r3, [r7, #20]
 80007ce:	b2db      	uxtb	r3, r3
 80007d0:	1ad3      	subs	r3, r2, r3
 80007d2:	747b      	strb	r3, [r7, #17]

	for (uint32_t i = 0; i < height; i++) {
 80007d4:	2300      	movs	r3, #0
 80007d6:	623b      	str	r3, [r7, #32]
 80007d8:	e067      	b.n	80008aa <LCD_DrawChar+0x192>
		pchar = ((uint8_t *) &fonts[fontindex]->table[charindex]
 80007da:	f897 303c 	ldrb.w	r3, [r7, #60]	; 0x3c
 80007de:	4a37      	ldr	r2, [pc, #220]	; (80008bc <LCD_DrawChar+0x1a4>)
 80007e0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80007e4:	681a      	ldr	r2, [r3, #0]
 80007e6:	69bb      	ldr	r3, [r7, #24]
 80007e8:	441a      	add	r2, r3
				+ (width + 7) / 8 * i);
 80007ea:	8abb      	ldrh	r3, [r7, #20]
 80007ec:	3307      	adds	r3, #7
 80007ee:	2b00      	cmp	r3, #0
 80007f0:	da00      	bge.n	80007f4 <LCD_DrawChar+0xdc>
 80007f2:	3307      	adds	r3, #7
 80007f4:	10db      	asrs	r3, r3, #3
 80007f6:	4619      	mov	r1, r3
 80007f8:	6a3b      	ldr	r3, [r7, #32]
 80007fa:	fb01 f303 	mul.w	r3, r1, r3
		pchar = ((uint8_t *) &fonts[fontindex]->table[charindex]
 80007fe:	4413      	add	r3, r2
 8000800:	60fb      	str	r3, [r7, #12]
		switch (bytes) {
 8000802:	8a7b      	ldrh	r3, [r7, #18]
 8000804:	2b01      	cmp	r3, #1
 8000806:	d002      	beq.n	800080e <LCD_DrawChar+0xf6>
 8000808:	2b02      	cmp	r3, #2
 800080a:	d004      	beq.n	8000816 <LCD_DrawChar+0xfe>
 800080c:	e00c      	b.n	8000828 <LCD_DrawChar+0x110>
		case 1:
			line = pchar[0];
 800080e:	68fb      	ldr	r3, [r7, #12]
 8000810:	781b      	ldrb	r3, [r3, #0]
 8000812:	627b      	str	r3, [r7, #36]	; 0x24
			break;
 8000814:	e016      	b.n	8000844 <LCD_DrawChar+0x12c>
		case 2:
			line = (pchar[0] << 8) | pchar[1];
 8000816:	68fb      	ldr	r3, [r7, #12]
 8000818:	781b      	ldrb	r3, [r3, #0]
 800081a:	021b      	lsls	r3, r3, #8
 800081c:	68fa      	ldr	r2, [r7, #12]
 800081e:	3201      	adds	r2, #1
 8000820:	7812      	ldrb	r2, [r2, #0]
 8000822:	4313      	orrs	r3, r2
 8000824:	627b      	str	r3, [r7, #36]	; 0x24
			break;
 8000826:	e00d      	b.n	8000844 <LCD_DrawChar+0x12c>
		case 3:
		default:
			line = (pchar[0] << 16) | (pchar[1] << 8) | pchar[2];
 8000828:	68fb      	ldr	r3, [r7, #12]
 800082a:	781b      	ldrb	r3, [r3, #0]
 800082c:	041a      	lsls	r2, r3, #16
 800082e:	68fb      	ldr	r3, [r7, #12]
 8000830:	3301      	adds	r3, #1
 8000832:	781b      	ldrb	r3, [r3, #0]
 8000834:	021b      	lsls	r3, r3, #8
 8000836:	4313      	orrs	r3, r2
 8000838:	68fa      	ldr	r2, [r7, #12]
 800083a:	3202      	adds	r2, #2
 800083c:	7812      	ldrb	r2, [r2, #0]
 800083e:	4313      	orrs	r3, r2
 8000840:	627b      	str	r3, [r7, #36]	; 0x24
			break;
 8000842:	bf00      	nop
		}
		for (uint32_t j = 0; j < width; j++) {
 8000844:	2300      	movs	r3, #0
 8000846:	61fb      	str	r3, [r7, #28]
 8000848:	e025      	b.n	8000896 <LCD_DrawChar+0x17e>
			if (line & (1 << (width - j + offset - 1))) {
 800084a:	8aba      	ldrh	r2, [r7, #20]
 800084c:	69fb      	ldr	r3, [r7, #28]
 800084e:	1ad2      	subs	r2, r2, r3
 8000850:	7c7b      	ldrb	r3, [r7, #17]
 8000852:	4413      	add	r3, r2
 8000854:	3b01      	subs	r3, #1
 8000856:	2201      	movs	r2, #1
 8000858:	fa02 f303 	lsl.w	r3, r2, r3
 800085c:	461a      	mov	r2, r3
 800085e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000860:	4013      	ands	r3, r2
 8000862:	2b00      	cmp	r3, #0
 8000864:	d00a      	beq.n	800087c <LCD_DrawChar+0x164>
				LCD_DrawPixel((x + j), y, color);
 8000866:	69fb      	ldr	r3, [r7, #28]
 8000868:	b29a      	uxth	r2, r3
 800086a:	88fb      	ldrh	r3, [r7, #6]
 800086c:	4413      	add	r3, r2
 800086e:	b29b      	uxth	r3, r3
 8000870:	883a      	ldrh	r2, [r7, #0]
 8000872:	88b9      	ldrh	r1, [r7, #4]
 8000874:	4618      	mov	r0, r3
 8000876:	f7ff fdf7 	bl	8000468 <LCD_DrawPixel>
 800087a:	e009      	b.n	8000890 <LCD_DrawChar+0x178>
			} else {
				LCD_DrawPixel((x + j), y, bg);
 800087c:	69fb      	ldr	r3, [r7, #28]
 800087e:	b29a      	uxth	r2, r3
 8000880:	88fb      	ldrh	r3, [r7, #6]
 8000882:	4413      	add	r3, r2
 8000884:	b29b      	uxth	r3, r3
 8000886:	8f3a      	ldrh	r2, [r7, #56]	; 0x38
 8000888:	88b9      	ldrh	r1, [r7, #4]
 800088a:	4618      	mov	r0, r3
 800088c:	f7ff fdec 	bl	8000468 <LCD_DrawPixel>
		for (uint32_t j = 0; j < width; j++) {
 8000890:	69fb      	ldr	r3, [r7, #28]
 8000892:	3301      	adds	r3, #1
 8000894:	61fb      	str	r3, [r7, #28]
 8000896:	8abb      	ldrh	r3, [r7, #20]
 8000898:	69fa      	ldr	r2, [r7, #28]
 800089a:	429a      	cmp	r2, r3
 800089c:	d3d5      	bcc.n	800084a <LCD_DrawChar+0x132>
			}
		}
		y++;
 800089e:	88bb      	ldrh	r3, [r7, #4]
 80008a0:	3301      	adds	r3, #1
 80008a2:	80bb      	strh	r3, [r7, #4]
	for (uint32_t i = 0; i < height; i++) {
 80008a4:	6a3b      	ldr	r3, [r7, #32]
 80008a6:	3301      	adds	r3, #1
 80008a8:	623b      	str	r3, [r7, #32]
 80008aa:	8afb      	ldrh	r3, [r7, #22]
 80008ac:	6a3a      	ldr	r2, [r7, #32]
 80008ae:	429a      	cmp	r2, r3
 80008b0:	d393      	bcc.n	80007da <LCD_DrawChar+0xc2>
 80008b2:	e000      	b.n	80008b6 <LCD_DrawChar+0x19e>
		return;
 80008b4:	bf00      	nop
	}
}
 80008b6:	372c      	adds	r7, #44	; 0x2c
 80008b8:	46bd      	mov	sp, r7
 80008ba:	bd90      	pop	{r4, r7, pc}
 80008bc:	20000008 	.word	0x20000008
 80008c0:	2000009c 	.word	0x2000009c
 80008c4:	2000009e 	.word	0x2000009e

080008c8 <LCD_Printf>:
 * \param fmt	Format text
 * \param
 *
 * \return void
 */
void LCD_Printf(const char *fmt, ...) {
 80008c8:	b40f      	push	{r0, r1, r2, r3}
 80008ca:	b5b0      	push	{r4, r5, r7, lr}
 80008cc:	b086      	sub	sp, #24
 80008ce:	af02      	add	r7, sp, #8
	static char buf[256];
	char *p;
	va_list lst;

	va_start(lst, fmt);
 80008d0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80008d4:	60bb      	str	r3, [r7, #8]
	vsprintf(buf, fmt, lst);
 80008d6:	68ba      	ldr	r2, [r7, #8]
 80008d8:	6a39      	ldr	r1, [r7, #32]
 80008da:	4870      	ldr	r0, [pc, #448]	; (8000a9c <LCD_Printf+0x1d4>)
 80008dc:	f002 fc76 	bl	80031cc <vsiprintf>
	va_end(lst);

	volatile uint16_t height, width;
	height = fonts[m_font]->Height;
 80008e0:	4b6f      	ldr	r3, [pc, #444]	; (8000aa0 <LCD_Printf+0x1d8>)
 80008e2:	781b      	ldrb	r3, [r3, #0]
 80008e4:	461a      	mov	r2, r3
 80008e6:	4b6f      	ldr	r3, [pc, #444]	; (8000aa4 <LCD_Printf+0x1dc>)
 80008e8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80008ec:	88db      	ldrh	r3, [r3, #6]
 80008ee:	80fb      	strh	r3, [r7, #6]
	width = fonts[m_font]->Width;
 80008f0:	4b6b      	ldr	r3, [pc, #428]	; (8000aa0 <LCD_Printf+0x1d8>)
 80008f2:	781b      	ldrb	r3, [r3, #0]
 80008f4:	461a      	mov	r2, r3
 80008f6:	4b6b      	ldr	r3, [pc, #428]	; (8000aa4 <LCD_Printf+0x1dc>)
 80008f8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80008fc:	889b      	ldrh	r3, [r3, #4]
 80008fe:	80bb      	strh	r3, [r7, #4]

	p = buf;
 8000900:	4b66      	ldr	r3, [pc, #408]	; (8000a9c <LCD_Printf+0x1d4>)
 8000902:	60fb      	str	r3, [r7, #12]
	while (*p) {
 8000904:	e0bc      	b.n	8000a80 <LCD_Printf+0x1b8>
		if (*p == '\n') {
 8000906:	68fb      	ldr	r3, [r7, #12]
 8000908:	781b      	ldrb	r3, [r3, #0]
 800090a:	2b0a      	cmp	r3, #10
 800090c:	d10e      	bne.n	800092c <LCD_Printf+0x64>
			m_cursor_y += height;
 800090e:	88fb      	ldrh	r3, [r7, #6]
 8000910:	b29a      	uxth	r2, r3
 8000912:	4b65      	ldr	r3, [pc, #404]	; (8000aa8 <LCD_Printf+0x1e0>)
 8000914:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000918:	b29b      	uxth	r3, r3
 800091a:	4413      	add	r3, r2
 800091c:	b29b      	uxth	r3, r3
 800091e:	b21a      	sxth	r2, r3
 8000920:	4b61      	ldr	r3, [pc, #388]	; (8000aa8 <LCD_Printf+0x1e0>)
 8000922:	801a      	strh	r2, [r3, #0]
			m_cursor_x = 0;
 8000924:	4b61      	ldr	r3, [pc, #388]	; (8000aac <LCD_Printf+0x1e4>)
 8000926:	2200      	movs	r2, #0
 8000928:	801a      	strh	r2, [r3, #0]
 800092a:	e0a6      	b.n	8000a7a <LCD_Printf+0x1b2>
		} else if (*p == '\r') {
 800092c:	68fb      	ldr	r3, [r7, #12]
 800092e:	781b      	ldrb	r3, [r3, #0]
 8000930:	2b0d      	cmp	r3, #13
 8000932:	d103      	bne.n	800093c <LCD_Printf+0x74>
			m_cursor_x = 0;
 8000934:	4b5d      	ldr	r3, [pc, #372]	; (8000aac <LCD_Printf+0x1e4>)
 8000936:	2200      	movs	r2, #0
 8000938:	801a      	strh	r2, [r3, #0]
 800093a:	e09e      	b.n	8000a7a <LCD_Printf+0x1b2>
		} else if (*p == '\t') {
 800093c:	68fb      	ldr	r3, [r7, #12]
 800093e:	781b      	ldrb	r3, [r3, #0]
 8000940:	2b09      	cmp	r3, #9
 8000942:	d10d      	bne.n	8000960 <LCD_Printf+0x98>
			m_cursor_x += width * 4;
 8000944:	88bb      	ldrh	r3, [r7, #4]
 8000946:	b29b      	uxth	r3, r3
 8000948:	009b      	lsls	r3, r3, #2
 800094a:	b29a      	uxth	r2, r3
 800094c:	4b57      	ldr	r3, [pc, #348]	; (8000aac <LCD_Printf+0x1e4>)
 800094e:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000952:	b29b      	uxth	r3, r3
 8000954:	4413      	add	r3, r2
 8000956:	b29b      	uxth	r3, r3
 8000958:	b21a      	sxth	r2, r3
 800095a:	4b54      	ldr	r3, [pc, #336]	; (8000aac <LCD_Printf+0x1e4>)
 800095c:	801a      	strh	r2, [r3, #0]
 800095e:	e08c      	b.n	8000a7a <LCD_Printf+0x1b2>
		} else {
			if (m_cursor_x == 0) {
 8000960:	4b52      	ldr	r3, [pc, #328]	; (8000aac <LCD_Printf+0x1e4>)
 8000962:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000966:	2b00      	cmp	r3, #0
 8000968:	d132      	bne.n	80009d0 <LCD_Printf+0x108>
				LCD_SetAddrWindow(0, m_cursor_y, m_width - 1,
 800096a:	4b4f      	ldr	r3, [pc, #316]	; (8000aa8 <LCD_Printf+0x1e0>)
 800096c:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000970:	b299      	uxth	r1, r3
 8000972:	4b4f      	ldr	r3, [pc, #316]	; (8000ab0 <LCD_Printf+0x1e8>)
 8000974:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000978:	b29b      	uxth	r3, r3
 800097a:	3b01      	subs	r3, #1
 800097c:	b298      	uxth	r0, r3
 800097e:	4b4a      	ldr	r3, [pc, #296]	; (8000aa8 <LCD_Printf+0x1e0>)
 8000980:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000984:	b29a      	uxth	r2, r3
 8000986:	88fb      	ldrh	r3, [r7, #6]
 8000988:	b29b      	uxth	r3, r3
 800098a:	4413      	add	r3, r2
 800098c:	b29b      	uxth	r3, r3
 800098e:	4602      	mov	r2, r0
 8000990:	2000      	movs	r0, #0
 8000992:	f7ff fe19 	bl	80005c8 <LCD_SetAddrWindow>
						m_cursor_y + height);
				LCD_Flood(m_textbgcolor, (long) m_width * height);
 8000996:	4b47      	ldr	r3, [pc, #284]	; (8000ab4 <LCD_Printf+0x1ec>)
 8000998:	881b      	ldrh	r3, [r3, #0]
 800099a:	4a45      	ldr	r2, [pc, #276]	; (8000ab0 <LCD_Printf+0x1e8>)
 800099c:	f9b2 2000 	ldrsh.w	r2, [r2]
 80009a0:	88f9      	ldrh	r1, [r7, #6]
 80009a2:	b289      	uxth	r1, r1
 80009a4:	fb01 f202 	mul.w	r2, r1, r2
 80009a8:	4611      	mov	r1, r2
 80009aa:	4618      	mov	r0, r3
 80009ac:	f7ff fd98 	bl	80004e0 <LCD_Flood>
				LCD_SetAddrWindow(0, 0, m_width - 1, m_height - 1);
 80009b0:	4b3f      	ldr	r3, [pc, #252]	; (8000ab0 <LCD_Printf+0x1e8>)
 80009b2:	f9b3 3000 	ldrsh.w	r3, [r3]
 80009b6:	b29b      	uxth	r3, r3
 80009b8:	3b01      	subs	r3, #1
 80009ba:	b29a      	uxth	r2, r3
 80009bc:	4b3e      	ldr	r3, [pc, #248]	; (8000ab8 <LCD_Printf+0x1f0>)
 80009be:	f9b3 3000 	ldrsh.w	r3, [r3]
 80009c2:	b29b      	uxth	r3, r3
 80009c4:	3b01      	subs	r3, #1
 80009c6:	b29b      	uxth	r3, r3
 80009c8:	2100      	movs	r1, #0
 80009ca:	2000      	movs	r0, #0
 80009cc:	f7ff fdfc 	bl	80005c8 <LCD_SetAddrWindow>
			}
			if (m_cursor_y >= (m_height - height)) {
 80009d0:	4b35      	ldr	r3, [pc, #212]	; (8000aa8 <LCD_Printf+0x1e0>)
 80009d2:	f9b3 3000 	ldrsh.w	r3, [r3]
 80009d6:	461a      	mov	r2, r3
 80009d8:	4b37      	ldr	r3, [pc, #220]	; (8000ab8 <LCD_Printf+0x1f0>)
 80009da:	f9b3 3000 	ldrsh.w	r3, [r3]
 80009de:	4619      	mov	r1, r3
 80009e0:	88fb      	ldrh	r3, [r7, #6]
 80009e2:	b29b      	uxth	r3, r3
 80009e4:	1acb      	subs	r3, r1, r3
 80009e6:	429a      	cmp	r2, r3
 80009e8:	db07      	blt.n	80009fa <LCD_Printf+0x132>
				m_cursor_y = 0;
 80009ea:	4b2f      	ldr	r3, [pc, #188]	; (8000aa8 <LCD_Printf+0x1e0>)
 80009ec:	2200      	movs	r2, #0
 80009ee:	801a      	strh	r2, [r3, #0]
				LCD_FillScreen(m_textbgcolor);
 80009f0:	4b30      	ldr	r3, [pc, #192]	; (8000ab4 <LCD_Printf+0x1ec>)
 80009f2:	881b      	ldrh	r3, [r3, #0]
 80009f4:	4618      	mov	r0, r3
 80009f6:	f7ff fd9b 	bl	8000530 <LCD_FillScreen>
			}
			LCD_DrawChar(m_cursor_x, m_cursor_y, *p, m_textcolor, m_textbgcolor,
 80009fa:	4b2c      	ldr	r3, [pc, #176]	; (8000aac <LCD_Printf+0x1e4>)
 80009fc:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000a00:	b298      	uxth	r0, r3
 8000a02:	4b29      	ldr	r3, [pc, #164]	; (8000aa8 <LCD_Printf+0x1e0>)
 8000a04:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000a08:	b299      	uxth	r1, r3
 8000a0a:	68fb      	ldr	r3, [r7, #12]
 8000a0c:	781c      	ldrb	r4, [r3, #0]
 8000a0e:	4b2b      	ldr	r3, [pc, #172]	; (8000abc <LCD_Printf+0x1f4>)
 8000a10:	881d      	ldrh	r5, [r3, #0]
 8000a12:	4b28      	ldr	r3, [pc, #160]	; (8000ab4 <LCD_Printf+0x1ec>)
 8000a14:	881b      	ldrh	r3, [r3, #0]
 8000a16:	4a22      	ldr	r2, [pc, #136]	; (8000aa0 <LCD_Printf+0x1d8>)
 8000a18:	7812      	ldrb	r2, [r2, #0]
 8000a1a:	9201      	str	r2, [sp, #4]
 8000a1c:	9300      	str	r3, [sp, #0]
 8000a1e:	462b      	mov	r3, r5
 8000a20:	4622      	mov	r2, r4
 8000a22:	f7ff fe79 	bl	8000718 <LCD_DrawChar>
					m_font);
			m_cursor_x += width;
 8000a26:	88bb      	ldrh	r3, [r7, #4]
 8000a28:	b29a      	uxth	r2, r3
 8000a2a:	4b20      	ldr	r3, [pc, #128]	; (8000aac <LCD_Printf+0x1e4>)
 8000a2c:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000a30:	b29b      	uxth	r3, r3
 8000a32:	4413      	add	r3, r2
 8000a34:	b29b      	uxth	r3, r3
 8000a36:	b21a      	sxth	r2, r3
 8000a38:	4b1c      	ldr	r3, [pc, #112]	; (8000aac <LCD_Printf+0x1e4>)
 8000a3a:	801a      	strh	r2, [r3, #0]
			if (m_wrap && (m_cursor_x > (m_width - width))) {
 8000a3c:	4b20      	ldr	r3, [pc, #128]	; (8000ac0 <LCD_Printf+0x1f8>)
 8000a3e:	781b      	ldrb	r3, [r3, #0]
 8000a40:	2b00      	cmp	r3, #0
 8000a42:	d01a      	beq.n	8000a7a <LCD_Printf+0x1b2>
 8000a44:	4b19      	ldr	r3, [pc, #100]	; (8000aac <LCD_Printf+0x1e4>)
 8000a46:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000a4a:	461a      	mov	r2, r3
 8000a4c:	4b18      	ldr	r3, [pc, #96]	; (8000ab0 <LCD_Printf+0x1e8>)
 8000a4e:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000a52:	4619      	mov	r1, r3
 8000a54:	88bb      	ldrh	r3, [r7, #4]
 8000a56:	b29b      	uxth	r3, r3
 8000a58:	1acb      	subs	r3, r1, r3
 8000a5a:	429a      	cmp	r2, r3
 8000a5c:	dd0d      	ble.n	8000a7a <LCD_Printf+0x1b2>
				m_cursor_y += height;
 8000a5e:	88fb      	ldrh	r3, [r7, #6]
 8000a60:	b29a      	uxth	r2, r3
 8000a62:	4b11      	ldr	r3, [pc, #68]	; (8000aa8 <LCD_Printf+0x1e0>)
 8000a64:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000a68:	b29b      	uxth	r3, r3
 8000a6a:	4413      	add	r3, r2
 8000a6c:	b29b      	uxth	r3, r3
 8000a6e:	b21a      	sxth	r2, r3
 8000a70:	4b0d      	ldr	r3, [pc, #52]	; (8000aa8 <LCD_Printf+0x1e0>)
 8000a72:	801a      	strh	r2, [r3, #0]
				m_cursor_x = 0;
 8000a74:	4b0d      	ldr	r3, [pc, #52]	; (8000aac <LCD_Printf+0x1e4>)
 8000a76:	2200      	movs	r2, #0
 8000a78:	801a      	strh	r2, [r3, #0]
			}
		}
		p++;
 8000a7a:	68fb      	ldr	r3, [r7, #12]
 8000a7c:	3301      	adds	r3, #1
 8000a7e:	60fb      	str	r3, [r7, #12]
	while (*p) {
 8000a80:	68fb      	ldr	r3, [r7, #12]
 8000a82:	781b      	ldrb	r3, [r3, #0]
 8000a84:	2b00      	cmp	r3, #0
 8000a86:	f47f af3e 	bne.w	8000906 <LCD_Printf+0x3e>
	}
}
 8000a8a:	bf00      	nop
 8000a8c:	bf00      	nop
 8000a8e:	3710      	adds	r7, #16
 8000a90:	46bd      	mov	sp, r7
 8000a92:	e8bd 40b0 	ldmia.w	sp!, {r4, r5, r7, lr}
 8000a96:	b004      	add	sp, #16
 8000a98:	4770      	bx	lr
 8000a9a:	bf00      	nop
 8000a9c:	200000ac 	.word	0x200000ac
 8000aa0:	200000a8 	.word	0x200000a8
 8000aa4:	20000008 	.word	0x20000008
 8000aa8:	200000a2 	.word	0x200000a2
 8000aac:	200000a0 	.word	0x200000a0
 8000ab0:	2000009c 	.word	0x2000009c
 8000ab4:	200000a6 	.word	0x200000a6
 8000ab8:	2000009e 	.word	0x2000009e
 8000abc:	200000a4 	.word	0x200000a4
 8000ac0:	200000aa 	.word	0x200000aa

08000ac4 <LCD_SetCursor>:
 * \param x		The x-coordinate
 * \param y		The y-coordinate
 *
 * \return void
 */
void LCD_SetCursor(uint16_t x, uint16_t y) {
 8000ac4:	b480      	push	{r7}
 8000ac6:	b083      	sub	sp, #12
 8000ac8:	af00      	add	r7, sp, #0
 8000aca:	4603      	mov	r3, r0
 8000acc:	460a      	mov	r2, r1
 8000ace:	80fb      	strh	r3, [r7, #6]
 8000ad0:	4613      	mov	r3, r2
 8000ad2:	80bb      	strh	r3, [r7, #4]
	m_cursor_x = x;
 8000ad4:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 8000ad8:	4b05      	ldr	r3, [pc, #20]	; (8000af0 <LCD_SetCursor+0x2c>)
 8000ada:	801a      	strh	r2, [r3, #0]
	m_cursor_y = y;
 8000adc:	f9b7 2004 	ldrsh.w	r2, [r7, #4]
 8000ae0:	4b04      	ldr	r3, [pc, #16]	; (8000af4 <LCD_SetCursor+0x30>)
 8000ae2:	801a      	strh	r2, [r3, #0]
}
 8000ae4:	bf00      	nop
 8000ae6:	370c      	adds	r7, #12
 8000ae8:	46bd      	mov	sp, r7
 8000aea:	bc80      	pop	{r7}
 8000aec:	4770      	bx	lr
 8000aee:	bf00      	nop
 8000af0:	200000a0 	.word	0x200000a0
 8000af4:	200000a2 	.word	0x200000a2

08000af8 <LCD_SetTextSize>:
 *
 * \param s	Size
 *
 * \return void
 */
void LCD_SetTextSize(uint8_t s) {
 8000af8:	b480      	push	{r7}
 8000afa:	b083      	sub	sp, #12
 8000afc:	af00      	add	r7, sp, #0
 8000afe:	4603      	mov	r3, r0
 8000b00:	71fb      	strb	r3, [r7, #7]
	if (s < 0) {
		m_font = 0;
	} else if (s >= fontsNum) {
 8000b02:	2201      	movs	r2, #1
 8000b04:	79fb      	ldrb	r3, [r7, #7]
 8000b06:	4293      	cmp	r3, r2
 8000b08:	d305      	bcc.n	8000b16 <LCD_SetTextSize+0x1e>
		m_font = fontsNum - 1;
 8000b0a:	2301      	movs	r3, #1
 8000b0c:	3b01      	subs	r3, #1
 8000b0e:	b2da      	uxtb	r2, r3
 8000b10:	4b05      	ldr	r3, [pc, #20]	; (8000b28 <LCD_SetTextSize+0x30>)
 8000b12:	701a      	strb	r2, [r3, #0]
	} else {
		m_font = s;
	}
}
 8000b14:	e002      	b.n	8000b1c <LCD_SetTextSize+0x24>
		m_font = s;
 8000b16:	4a04      	ldr	r2, [pc, #16]	; (8000b28 <LCD_SetTextSize+0x30>)
 8000b18:	79fb      	ldrb	r3, [r7, #7]
 8000b1a:	7013      	strb	r3, [r2, #0]
}
 8000b1c:	bf00      	nop
 8000b1e:	370c      	adds	r7, #12
 8000b20:	46bd      	mov	sp, r7
 8000b22:	bc80      	pop	{r7}
 8000b24:	4770      	bx	lr
 8000b26:	bf00      	nop
 8000b28:	200000a8 	.word	0x200000a8

08000b2c <LCD_SetTextColor>:
 * \param c		Text color
 * \param b		Background color
 *
 * \return void
 */
void LCD_SetTextColor(uint16_t c, uint16_t b) {
 8000b2c:	b480      	push	{r7}
 8000b2e:	b083      	sub	sp, #12
 8000b30:	af00      	add	r7, sp, #0
 8000b32:	4603      	mov	r3, r0
 8000b34:	460a      	mov	r2, r1
 8000b36:	80fb      	strh	r3, [r7, #6]
 8000b38:	4613      	mov	r3, r2
 8000b3a:	80bb      	strh	r3, [r7, #4]
	m_textcolor = c;
 8000b3c:	4a05      	ldr	r2, [pc, #20]	; (8000b54 <LCD_SetTextColor+0x28>)
 8000b3e:	88fb      	ldrh	r3, [r7, #6]
 8000b40:	8013      	strh	r3, [r2, #0]
	m_textbgcolor = b;
 8000b42:	4a05      	ldr	r2, [pc, #20]	; (8000b58 <LCD_SetTextColor+0x2c>)
 8000b44:	88bb      	ldrh	r3, [r7, #4]
 8000b46:	8013      	strh	r3, [r2, #0]
}
 8000b48:	bf00      	nop
 8000b4a:	370c      	adds	r7, #12
 8000b4c:	46bd      	mov	sp, r7
 8000b4e:	bc80      	pop	{r7}
 8000b50:	4770      	bx	lr
 8000b52:	bf00      	nop
 8000b54:	200000a4 	.word	0x200000a4
 8000b58:	200000a6 	.word	0x200000a6

08000b5c <HAL_TIM_PeriodElapsedCallback>:
/* USER CODE END PV */

/* Private function prototypes -----------------------------------------------*/
void SystemClock_Config(void);
/* USER CODE BEGIN PFP */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim) {
 8000b5c:	b580      	push	{r7, lr}
 8000b5e:	b084      	sub	sp, #16
 8000b60:	af00      	add	r7, sp, #0
 8000b62:	6078      	str	r0, [r7, #4]
	if (htim == &htim1) {
 8000b64:	687b      	ldr	r3, [r7, #4]
 8000b66:	4a15      	ldr	r2, [pc, #84]	; (8000bbc <HAL_TIM_PeriodElapsedCallback+0x60>)
 8000b68:	4293      	cmp	r3, r2
 8000b6a:	d123      	bne.n	8000bb4 <HAL_TIM_PeriodElapsedCallback+0x58>
		uint16_t count_main = __HAL_TIM_GET_COUNTER(&htim2); // значение в счётчике таймера №2
 8000b6c:	4b14      	ldr	r3, [pc, #80]	; (8000bc0 <HAL_TIM_PeriodElapsedCallback+0x64>)
 8000b6e:	681b      	ldr	r3, [r3, #0]
 8000b70:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000b72:	81fb      	strh	r3, [r7, #14]
		uint16_t count_secondary = __HAL_TIM_GET_COUNTER(&htim3); // значение в счётчике таймера №3
 8000b74:	4b13      	ldr	r3, [pc, #76]	; (8000bc4 <HAL_TIM_PeriodElapsedCallback+0x68>)
 8000b76:	681b      	ldr	r3, [r3, #0]
 8000b78:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000b7a:	81bb      	strh	r3, [r7, #12]
		uint16_t arr = __HAL_TIM_GET_AUTORELOAD(&htim2); // значение переполнения таймера №2 (65535)
 8000b7c:	4b10      	ldr	r3, [pc, #64]	; (8000bc0 <HAL_TIM_PeriodElapsedCallback+0x64>)
 8000b7e:	681b      	ldr	r3, [r3, #0]
 8000b80:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000b82:	817b      	strh	r3, [r7, #10]
		freq = count_main + (count_secondary * (arr + 1)); // вычисляем
 8000b84:	89fa      	ldrh	r2, [r7, #14]
 8000b86:	89bb      	ldrh	r3, [r7, #12]
 8000b88:	8979      	ldrh	r1, [r7, #10]
 8000b8a:	3101      	adds	r1, #1
 8000b8c:	fb01 f303 	mul.w	r3, r1, r3
 8000b90:	4413      	add	r3, r2
 8000b92:	461a      	mov	r2, r3
 8000b94:	4b0c      	ldr	r3, [pc, #48]	; (8000bc8 <HAL_TIM_PeriodElapsedCallback+0x6c>)
 8000b96:	601a      	str	r2, [r3, #0]

		// uint32_t freq = TIM2->CNT + (TIM3->CNT << 16); // это вариант на регистрах, предыдущие четыре строчки можно закомментить

		HAL_TIM_Base_Stop_IT(&htim1);
 8000b98:	4808      	ldr	r0, [pc, #32]	; (8000bbc <HAL_TIM_PeriodElapsedCallback+0x60>)
 8000b9a:	f001 fe1f 	bl	80027dc <HAL_TIM_Base_Stop_IT>

		//////////////// обнуляем счётчики и рестартуем таймер №1 /////////////////
		__HAL_TIM_SET_COUNTER(&htim2, 0x0000);
 8000b9e:	4b08      	ldr	r3, [pc, #32]	; (8000bc0 <HAL_TIM_PeriodElapsedCallback+0x64>)
 8000ba0:	681b      	ldr	r3, [r3, #0]
 8000ba2:	2200      	movs	r2, #0
 8000ba4:	625a      	str	r2, [r3, #36]	; 0x24
		__HAL_TIM_SET_COUNTER(&htim3, 0x0000);
 8000ba6:	4b07      	ldr	r3, [pc, #28]	; (8000bc4 <HAL_TIM_PeriodElapsedCallback+0x68>)
 8000ba8:	681b      	ldr	r3, [r3, #0]
 8000baa:	2200      	movs	r2, #0
 8000bac:	625a      	str	r2, [r3, #36]	; 0x24
		HAL_TIM_Base_Start_IT(&htim1);
 8000bae:	4803      	ldr	r0, [pc, #12]	; (8000bbc <HAL_TIM_PeriodElapsedCallback+0x60>)
 8000bb0:	f001 fdc2 	bl	8002738 <HAL_TIM_Base_Start_IT>
	}
}
 8000bb4:	bf00      	nop
 8000bb6:	3710      	adds	r7, #16
 8000bb8:	46bd      	mov	sp, r7
 8000bba:	bd80      	pop	{r7, pc}
 8000bbc:	2000020c 	.word	0x2000020c
 8000bc0:	20000254 	.word	0x20000254
 8000bc4:	2000029c 	.word	0x2000029c
 8000bc8:	200001ac 	.word	0x200001ac

08000bcc <main>:

/**
 * @brief  The application entry point.
 * @retval int
 */
int main(void) {
 8000bcc:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000bce:	b083      	sub	sp, #12
 8000bd0:	af02      	add	r7, sp, #8
	/* USER CODE END 1 */

	/* MCU Configuration--------------------------------------------------------*/

	/* Reset of all peripherals, Initializes the Flash interface and the Systick. */
	HAL_Init();
 8000bd2:	f000 fb99 	bl	8001308 <HAL_Init>
	/* USER CODE BEGIN Init */

	/* USER CODE END Init */

	/* Configure the system clock */
	SystemClock_Config();
 8000bd6:	f000 f891 	bl	8000cfc <SystemClock_Config>
	/* USER CODE BEGIN SysInit */

	/* USER CODE END SysInit */

	/* Initialize all configured peripherals */
	MX_GPIO_Init();
 8000bda:	f7ff fab7 	bl	800014c <MX_GPIO_Init>
	MX_TIM1_Init();
 8000bde:	f000 f9ed 	bl	8000fbc <MX_TIM1_Init>
	MX_TIM2_Init();
 8000be2:	f000 fa45 	bl	8001070 <MX_TIM2_Init>
	MX_TIM3_Init();
 8000be6:	f000 faad 	bl	8001144 <MX_TIM3_Init>
	MX_SPI1_Init();
 8000bea:	f000 f8d1 	bl	8000d90 <MX_SPI1_Init>
	/* USER CODE BEGIN 2 */
	HAL_Delay(100);
 8000bee:	2064      	movs	r0, #100	; 0x64
 8000bf0:	f000 fbec 	bl	80013cc <HAL_Delay>
	HAL_TIM_Base_Start_IT(&htim1);
 8000bf4:	4830      	ldr	r0, [pc, #192]	; (8000cb8 <main+0xec>)
 8000bf6:	f001 fd9f 	bl	8002738 <HAL_TIM_Base_Start_IT>
	HAL_TIM_Base_Start(&htim2);
 8000bfa:	4830      	ldr	r0, [pc, #192]	; (8000cbc <main+0xf0>)
 8000bfc:	f001 fd52 	bl	80026a4 <HAL_TIM_Base_Start>
	HAL_TIM_Base_Start(&htim3);
 8000c00:	482f      	ldr	r0, [pc, #188]	; (8000cc0 <main+0xf4>)
 8000c02:	f001 fd4f 	bl	80026a4 <HAL_TIM_Base_Start>
	/* USER CODE END 2 */

	/* Infinite loop */
	/* USER CODE BEGIN WHILE */

	LCD_Init(&hspi1);
 8000c06:	482f      	ldr	r0, [pc, #188]	; (8000cc4 <main+0xf8>)
 8000c08:	f7ff fb86 	bl	8000318 <LCD_Init>

	while (1) {
		/* USER CODE END WHILE */

		LCD_SetCursor(9, 9);
 8000c0c:	2109      	movs	r1, #9
 8000c0e:	2009      	movs	r0, #9
 8000c10:	f7ff ff58 	bl	8000ac4 <LCD_SetCursor>
		LCD_Printf("%i%i.%i%i%i MHz",
				freq % 100000000 / 10000000,
 8000c14:	4b2c      	ldr	r3, [pc, #176]	; (8000cc8 <main+0xfc>)
 8000c16:	681a      	ldr	r2, [r3, #0]
 8000c18:	4b2c      	ldr	r3, [pc, #176]	; (8000ccc <main+0x100>)
 8000c1a:	fba3 1302 	umull	r1, r3, r3, r2
 8000c1e:	0e5b      	lsrs	r3, r3, #25
 8000c20:	492b      	ldr	r1, [pc, #172]	; (8000cd0 <main+0x104>)
 8000c22:	fb01 f303 	mul.w	r3, r1, r3
 8000c26:	1ad3      	subs	r3, r2, r3
		LCD_Printf("%i%i.%i%i%i MHz",
 8000c28:	4a2a      	ldr	r2, [pc, #168]	; (8000cd4 <main+0x108>)
 8000c2a:	fba2 2303 	umull	r2, r3, r2, r3
 8000c2e:	0d98      	lsrs	r0, r3, #22
				freq % 10000000 / 1000000,
 8000c30:	4b25      	ldr	r3, [pc, #148]	; (8000cc8 <main+0xfc>)
 8000c32:	681a      	ldr	r2, [r3, #0]
 8000c34:	4b27      	ldr	r3, [pc, #156]	; (8000cd4 <main+0x108>)
 8000c36:	fba3 1302 	umull	r1, r3, r3, r2
 8000c3a:	0d9b      	lsrs	r3, r3, #22
 8000c3c:	4926      	ldr	r1, [pc, #152]	; (8000cd8 <main+0x10c>)
 8000c3e:	fb01 f303 	mul.w	r3, r1, r3
 8000c42:	1ad3      	subs	r3, r2, r3
		LCD_Printf("%i%i.%i%i%i MHz",
 8000c44:	4a25      	ldr	r2, [pc, #148]	; (8000cdc <main+0x110>)
 8000c46:	fba2 2303 	umull	r2, r3, r2, r3
 8000c4a:	0c9c      	lsrs	r4, r3, #18
				freq % 1000000 / 100000,
 8000c4c:	4b1e      	ldr	r3, [pc, #120]	; (8000cc8 <main+0xfc>)
 8000c4e:	681a      	ldr	r2, [r3, #0]
 8000c50:	4b22      	ldr	r3, [pc, #136]	; (8000cdc <main+0x110>)
 8000c52:	fba3 1302 	umull	r1, r3, r3, r2
 8000c56:	0c9b      	lsrs	r3, r3, #18
 8000c58:	4921      	ldr	r1, [pc, #132]	; (8000ce0 <main+0x114>)
 8000c5a:	fb01 f303 	mul.w	r3, r1, r3
 8000c5e:	1ad3      	subs	r3, r2, r3
		LCD_Printf("%i%i.%i%i%i MHz",
 8000c60:	095b      	lsrs	r3, r3, #5
 8000c62:	4a20      	ldr	r2, [pc, #128]	; (8000ce4 <main+0x118>)
 8000c64:	fba2 2303 	umull	r2, r3, r2, r3
 8000c68:	09dd      	lsrs	r5, r3, #7
				freq % 100000 / 10000,
 8000c6a:	4b17      	ldr	r3, [pc, #92]	; (8000cc8 <main+0xfc>)
 8000c6c:	681a      	ldr	r2, [r3, #0]
 8000c6e:	0953      	lsrs	r3, r2, #5
 8000c70:	491c      	ldr	r1, [pc, #112]	; (8000ce4 <main+0x118>)
 8000c72:	fba1 1303 	umull	r1, r3, r1, r3
 8000c76:	09db      	lsrs	r3, r3, #7
 8000c78:	491b      	ldr	r1, [pc, #108]	; (8000ce8 <main+0x11c>)
 8000c7a:	fb01 f303 	mul.w	r3, r1, r3
 8000c7e:	1ad3      	subs	r3, r2, r3
		LCD_Printf("%i%i.%i%i%i MHz",
 8000c80:	4a1a      	ldr	r2, [pc, #104]	; (8000cec <main+0x120>)
 8000c82:	fba2 2303 	umull	r2, r3, r2, r3
 8000c86:	0b59      	lsrs	r1, r3, #13
				freq % 1000 / 100);
 8000c88:	4b0f      	ldr	r3, [pc, #60]	; (8000cc8 <main+0xfc>)
 8000c8a:	681a      	ldr	r2, [r3, #0]
 8000c8c:	4b18      	ldr	r3, [pc, #96]	; (8000cf0 <main+0x124>)
 8000c8e:	fba3 6302 	umull	r6, r3, r3, r2
 8000c92:	099b      	lsrs	r3, r3, #6
 8000c94:	f44f 767a 	mov.w	r6, #1000	; 0x3e8
 8000c98:	fb06 f303 	mul.w	r3, r6, r3
 8000c9c:	1ad3      	subs	r3, r2, r3
		LCD_Printf("%i%i.%i%i%i MHz",
 8000c9e:	4a15      	ldr	r2, [pc, #84]	; (8000cf4 <main+0x128>)
 8000ca0:	fba2 2303 	umull	r2, r3, r2, r3
 8000ca4:	095b      	lsrs	r3, r3, #5
 8000ca6:	9301      	str	r3, [sp, #4]
 8000ca8:	9100      	str	r1, [sp, #0]
 8000caa:	462b      	mov	r3, r5
 8000cac:	4622      	mov	r2, r4
 8000cae:	4601      	mov	r1, r0
 8000cb0:	4811      	ldr	r0, [pc, #68]	; (8000cf8 <main+0x12c>)
 8000cb2:	f7ff fe09 	bl	80008c8 <LCD_Printf>
		LCD_SetCursor(9, 9);
 8000cb6:	e7a9      	b.n	8000c0c <main+0x40>
 8000cb8:	2000020c 	.word	0x2000020c
 8000cbc:	20000254 	.word	0x20000254
 8000cc0:	2000029c 	.word	0x2000029c
 8000cc4:	200001b0 	.word	0x200001b0
 8000cc8:	200001ac 	.word	0x200001ac
 8000ccc:	55e63b89 	.word	0x55e63b89
 8000cd0:	05f5e100 	.word	0x05f5e100
 8000cd4:	6b5fca6b 	.word	0x6b5fca6b
 8000cd8:	00989680 	.word	0x00989680
 8000cdc:	431bde83 	.word	0x431bde83
 8000ce0:	000f4240 	.word	0x000f4240
 8000ce4:	0a7c5ac5 	.word	0x0a7c5ac5
 8000ce8:	000186a0 	.word	0x000186a0
 8000cec:	d1b71759 	.word	0xd1b71759
 8000cf0:	10624dd3 	.word	0x10624dd3
 8000cf4:	51eb851f 	.word	0x51eb851f
 8000cf8:	08003aac 	.word	0x08003aac

08000cfc <SystemClock_Config>:

/**
 * @brief System Clock Configuration
 * @retval None
 */
void SystemClock_Config(void) {
 8000cfc:	b580      	push	{r7, lr}
 8000cfe:	b090      	sub	sp, #64	; 0x40
 8000d00:	af00      	add	r7, sp, #0
	RCC_OscInitTypeDef RCC_OscInitStruct = { 0 };
 8000d02:	f107 0318 	add.w	r3, r7, #24
 8000d06:	2228      	movs	r2, #40	; 0x28
 8000d08:	2100      	movs	r1, #0
 8000d0a:	4618      	mov	r0, r3
 8000d0c:	f002 fa40 	bl	8003190 <memset>
	RCC_ClkInitTypeDef RCC_ClkInitStruct = { 0 };
 8000d10:	1d3b      	adds	r3, r7, #4
 8000d12:	2200      	movs	r2, #0
 8000d14:	601a      	str	r2, [r3, #0]
 8000d16:	605a      	str	r2, [r3, #4]
 8000d18:	609a      	str	r2, [r3, #8]
 8000d1a:	60da      	str	r2, [r3, #12]
 8000d1c:	611a      	str	r2, [r3, #16]

	/** Initializes the RCC Oscillators according to the specified parameters
	 * in the RCC_OscInitTypeDef structure.
	 */
	RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000d1e:	2301      	movs	r3, #1
 8000d20:	61bb      	str	r3, [r7, #24]
	RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000d22:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000d26:	61fb      	str	r3, [r7, #28]
	RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 8000d28:	2300      	movs	r3, #0
 8000d2a:	623b      	str	r3, [r7, #32]
	RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000d2c:	2301      	movs	r3, #1
 8000d2e:	62bb      	str	r3, [r7, #40]	; 0x28
	RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000d30:	2302      	movs	r3, #2
 8000d32:	637b      	str	r3, [r7, #52]	; 0x34
	RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000d34:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000d38:	63bb      	str	r3, [r7, #56]	; 0x38
	RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 8000d3a:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 8000d3e:	63fb      	str	r3, [r7, #60]	; 0x3c
	if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK) {
 8000d40:	f107 0318 	add.w	r3, r7, #24
 8000d44:	4618      	mov	r0, r3
 8000d46:	f000 fe0f 	bl	8001968 <HAL_RCC_OscConfig>
 8000d4a:	4603      	mov	r3, r0
 8000d4c:	2b00      	cmp	r3, #0
 8000d4e:	d001      	beq.n	8000d54 <SystemClock_Config+0x58>
		Error_Handler();
 8000d50:	f000 f819 	bl	8000d86 <Error_Handler>
	}

	/** Initializes the CPU, AHB and APB buses clocks
	 */
	RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_SYSCLK
 8000d54:	230f      	movs	r3, #15
 8000d56:	607b      	str	r3, [r7, #4]
			| RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
	RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000d58:	2302      	movs	r3, #2
 8000d5a:	60bb      	str	r3, [r7, #8]
	RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000d5c:	2300      	movs	r3, #0
 8000d5e:	60fb      	str	r3, [r7, #12]
	RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000d60:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000d64:	613b      	str	r3, [r7, #16]
	RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000d66:	2300      	movs	r3, #0
 8000d68:	617b      	str	r3, [r7, #20]

	if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK) {
 8000d6a:	1d3b      	adds	r3, r7, #4
 8000d6c:	2102      	movs	r1, #2
 8000d6e:	4618      	mov	r0, r3
 8000d70:	f001 f87c 	bl	8001e6c <HAL_RCC_ClockConfig>
 8000d74:	4603      	mov	r3, r0
 8000d76:	2b00      	cmp	r3, #0
 8000d78:	d001      	beq.n	8000d7e <SystemClock_Config+0x82>
		Error_Handler();
 8000d7a:	f000 f804 	bl	8000d86 <Error_Handler>
	}
}
 8000d7e:	bf00      	nop
 8000d80:	3740      	adds	r7, #64	; 0x40
 8000d82:	46bd      	mov	sp, r7
 8000d84:	bd80      	pop	{r7, pc}

08000d86 <Error_Handler>:

/**
 * @brief  This function is executed in case of error occurrence.
 * @retval None
 */
void Error_Handler(void) {
 8000d86:	b480      	push	{r7}
 8000d88:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000d8a:	b672      	cpsid	i
}
 8000d8c:	bf00      	nop
	/* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1) {
 8000d8e:	e7fe      	b.n	8000d8e <Error_Handler+0x8>

08000d90 <MX_SPI1_Init>:

SPI_HandleTypeDef hspi1;

/* SPI1 init function */
void MX_SPI1_Init(void)
{
 8000d90:	b580      	push	{r7, lr}
 8000d92:	af00      	add	r7, sp, #0
  /* USER CODE END SPI1_Init 0 */

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  hspi1.Instance = SPI1;
 8000d94:	4b18      	ldr	r3, [pc, #96]	; (8000df8 <MX_SPI1_Init+0x68>)
 8000d96:	4a19      	ldr	r2, [pc, #100]	; (8000dfc <MX_SPI1_Init+0x6c>)
 8000d98:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8000d9a:	4b17      	ldr	r3, [pc, #92]	; (8000df8 <MX_SPI1_Init+0x68>)
 8000d9c:	f44f 7282 	mov.w	r2, #260	; 0x104
 8000da0:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_1LINE;
 8000da2:	4b15      	ldr	r3, [pc, #84]	; (8000df8 <MX_SPI1_Init+0x68>)
 8000da4:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 8000da8:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8000daa:	4b13      	ldr	r3, [pc, #76]	; (8000df8 <MX_SPI1_Init+0x68>)
 8000dac:	2200      	movs	r2, #0
 8000dae:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_HIGH;
 8000db0:	4b11      	ldr	r3, [pc, #68]	; (8000df8 <MX_SPI1_Init+0x68>)
 8000db2:	2202      	movs	r2, #2
 8000db4:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000db6:	4b10      	ldr	r3, [pc, #64]	; (8000df8 <MX_SPI1_Init+0x68>)
 8000db8:	2200      	movs	r2, #0
 8000dba:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8000dbc:	4b0e      	ldr	r3, [pc, #56]	; (8000df8 <MX_SPI1_Init+0x68>)
 8000dbe:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000dc2:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_16;
 8000dc4:	4b0c      	ldr	r3, [pc, #48]	; (8000df8 <MX_SPI1_Init+0x68>)
 8000dc6:	2218      	movs	r2, #24
 8000dc8:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000dca:	4b0b      	ldr	r3, [pc, #44]	; (8000df8 <MX_SPI1_Init+0x68>)
 8000dcc:	2200      	movs	r2, #0
 8000dce:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8000dd0:	4b09      	ldr	r3, [pc, #36]	; (8000df8 <MX_SPI1_Init+0x68>)
 8000dd2:	2200      	movs	r2, #0
 8000dd4:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000dd6:	4b08      	ldr	r3, [pc, #32]	; (8000df8 <MX_SPI1_Init+0x68>)
 8000dd8:	2200      	movs	r2, #0
 8000dda:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
 8000ddc:	4b06      	ldr	r3, [pc, #24]	; (8000df8 <MX_SPI1_Init+0x68>)
 8000dde:	220a      	movs	r2, #10
 8000de0:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8000de2:	4805      	ldr	r0, [pc, #20]	; (8000df8 <MX_SPI1_Init+0x68>)
 8000de4:	f001 f9a8 	bl	8002138 <HAL_SPI_Init>
 8000de8:	4603      	mov	r3, r0
 8000dea:	2b00      	cmp	r3, #0
 8000dec:	d001      	beq.n	8000df2 <MX_SPI1_Init+0x62>
  {
    Error_Handler();
 8000dee:	f7ff ffca 	bl	8000d86 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8000df2:	bf00      	nop
 8000df4:	bd80      	pop	{r7, pc}
 8000df6:	bf00      	nop
 8000df8:	200001b0 	.word	0x200001b0
 8000dfc:	40013000 	.word	0x40013000

08000e00 <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 8000e00:	b580      	push	{r7, lr}
 8000e02:	b088      	sub	sp, #32
 8000e04:	af00      	add	r7, sp, #0
 8000e06:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000e08:	f107 0310 	add.w	r3, r7, #16
 8000e0c:	2200      	movs	r2, #0
 8000e0e:	601a      	str	r2, [r3, #0]
 8000e10:	605a      	str	r2, [r3, #4]
 8000e12:	609a      	str	r2, [r3, #8]
 8000e14:	60da      	str	r2, [r3, #12]
  if(spiHandle->Instance==SPI1)
 8000e16:	687b      	ldr	r3, [r7, #4]
 8000e18:	681b      	ldr	r3, [r3, #0]
 8000e1a:	4a15      	ldr	r2, [pc, #84]	; (8000e70 <HAL_SPI_MspInit+0x70>)
 8000e1c:	4293      	cmp	r3, r2
 8000e1e:	d123      	bne.n	8000e68 <HAL_SPI_MspInit+0x68>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* SPI1 clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8000e20:	4b14      	ldr	r3, [pc, #80]	; (8000e74 <HAL_SPI_MspInit+0x74>)
 8000e22:	699b      	ldr	r3, [r3, #24]
 8000e24:	4a13      	ldr	r2, [pc, #76]	; (8000e74 <HAL_SPI_MspInit+0x74>)
 8000e26:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8000e2a:	6193      	str	r3, [r2, #24]
 8000e2c:	4b11      	ldr	r3, [pc, #68]	; (8000e74 <HAL_SPI_MspInit+0x74>)
 8000e2e:	699b      	ldr	r3, [r3, #24]
 8000e30:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8000e34:	60fb      	str	r3, [r7, #12]
 8000e36:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000e38:	4b0e      	ldr	r3, [pc, #56]	; (8000e74 <HAL_SPI_MspInit+0x74>)
 8000e3a:	699b      	ldr	r3, [r3, #24]
 8000e3c:	4a0d      	ldr	r2, [pc, #52]	; (8000e74 <HAL_SPI_MspInit+0x74>)
 8000e3e:	f043 0304 	orr.w	r3, r3, #4
 8000e42:	6193      	str	r3, [r2, #24]
 8000e44:	4b0b      	ldr	r3, [pc, #44]	; (8000e74 <HAL_SPI_MspInit+0x74>)
 8000e46:	699b      	ldr	r3, [r3, #24]
 8000e48:	f003 0304 	and.w	r3, r3, #4
 8000e4c:	60bb      	str	r3, [r7, #8]
 8000e4e:	68bb      	ldr	r3, [r7, #8]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_7;
 8000e50:	23a0      	movs	r3, #160	; 0xa0
 8000e52:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000e54:	2302      	movs	r3, #2
 8000e56:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000e58:	2303      	movs	r3, #3
 8000e5a:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000e5c:	f107 0310 	add.w	r3, r7, #16
 8000e60:	4619      	mov	r1, r3
 8000e62:	4805      	ldr	r0, [pc, #20]	; (8000e78 <HAL_SPI_MspInit+0x78>)
 8000e64:	f000 fbe4 	bl	8001630 <HAL_GPIO_Init>

  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }
}
 8000e68:	bf00      	nop
 8000e6a:	3720      	adds	r7, #32
 8000e6c:	46bd      	mov	sp, r7
 8000e6e:	bd80      	pop	{r7, pc}
 8000e70:	40013000 	.word	0x40013000
 8000e74:	40021000 	.word	0x40021000
 8000e78:	40010800 	.word	0x40010800

08000e7c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000e7c:	b480      	push	{r7}
 8000e7e:	b085      	sub	sp, #20
 8000e80:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8000e82:	4b15      	ldr	r3, [pc, #84]	; (8000ed8 <HAL_MspInit+0x5c>)
 8000e84:	699b      	ldr	r3, [r3, #24]
 8000e86:	4a14      	ldr	r2, [pc, #80]	; (8000ed8 <HAL_MspInit+0x5c>)
 8000e88:	f043 0301 	orr.w	r3, r3, #1
 8000e8c:	6193      	str	r3, [r2, #24]
 8000e8e:	4b12      	ldr	r3, [pc, #72]	; (8000ed8 <HAL_MspInit+0x5c>)
 8000e90:	699b      	ldr	r3, [r3, #24]
 8000e92:	f003 0301 	and.w	r3, r3, #1
 8000e96:	60bb      	str	r3, [r7, #8]
 8000e98:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000e9a:	4b0f      	ldr	r3, [pc, #60]	; (8000ed8 <HAL_MspInit+0x5c>)
 8000e9c:	69db      	ldr	r3, [r3, #28]
 8000e9e:	4a0e      	ldr	r2, [pc, #56]	; (8000ed8 <HAL_MspInit+0x5c>)
 8000ea0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000ea4:	61d3      	str	r3, [r2, #28]
 8000ea6:	4b0c      	ldr	r3, [pc, #48]	; (8000ed8 <HAL_MspInit+0x5c>)
 8000ea8:	69db      	ldr	r3, [r3, #28]
 8000eaa:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000eae:	607b      	str	r3, [r7, #4]
 8000eb0:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8000eb2:	4b0a      	ldr	r3, [pc, #40]	; (8000edc <HAL_MspInit+0x60>)
 8000eb4:	685b      	ldr	r3, [r3, #4]
 8000eb6:	60fb      	str	r3, [r7, #12]
 8000eb8:	68fb      	ldr	r3, [r7, #12]
 8000eba:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 8000ebe:	60fb      	str	r3, [r7, #12]
 8000ec0:	68fb      	ldr	r3, [r7, #12]
 8000ec2:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8000ec6:	60fb      	str	r3, [r7, #12]
 8000ec8:	4a04      	ldr	r2, [pc, #16]	; (8000edc <HAL_MspInit+0x60>)
 8000eca:	68fb      	ldr	r3, [r7, #12]
 8000ecc:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000ece:	bf00      	nop
 8000ed0:	3714      	adds	r7, #20
 8000ed2:	46bd      	mov	sp, r7
 8000ed4:	bc80      	pop	{r7}
 8000ed6:	4770      	bx	lr
 8000ed8:	40021000 	.word	0x40021000
 8000edc:	40010000 	.word	0x40010000

08000ee0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000ee0:	b480      	push	{r7}
 8000ee2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000ee4:	e7fe      	b.n	8000ee4 <NMI_Handler+0x4>

08000ee6 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000ee6:	b480      	push	{r7}
 8000ee8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000eea:	e7fe      	b.n	8000eea <HardFault_Handler+0x4>

08000eec <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000eec:	b480      	push	{r7}
 8000eee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000ef0:	e7fe      	b.n	8000ef0 <MemManage_Handler+0x4>

08000ef2 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000ef2:	b480      	push	{r7}
 8000ef4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000ef6:	e7fe      	b.n	8000ef6 <BusFault_Handler+0x4>

08000ef8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000ef8:	b480      	push	{r7}
 8000efa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000efc:	e7fe      	b.n	8000efc <UsageFault_Handler+0x4>

08000efe <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000efe:	b480      	push	{r7}
 8000f00:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000f02:	bf00      	nop
 8000f04:	46bd      	mov	sp, r7
 8000f06:	bc80      	pop	{r7}
 8000f08:	4770      	bx	lr

08000f0a <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000f0a:	b480      	push	{r7}
 8000f0c:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000f0e:	bf00      	nop
 8000f10:	46bd      	mov	sp, r7
 8000f12:	bc80      	pop	{r7}
 8000f14:	4770      	bx	lr

08000f16 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000f16:	b480      	push	{r7}
 8000f18:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000f1a:	bf00      	nop
 8000f1c:	46bd      	mov	sp, r7
 8000f1e:	bc80      	pop	{r7}
 8000f20:	4770      	bx	lr

08000f22 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000f22:	b580      	push	{r7, lr}
 8000f24:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000f26:	f000 fa35 	bl	8001394 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000f2a:	bf00      	nop
 8000f2c:	bd80      	pop	{r7, pc}
	...

08000f30 <TIM1_UP_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt.
  */
void TIM1_UP_IRQHandler(void)
{
 8000f30:	b580      	push	{r7, lr}
 8000f32:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_IRQn 0 */

  /* USER CODE END TIM1_UP_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8000f34:	4802      	ldr	r0, [pc, #8]	; (8000f40 <TIM1_UP_IRQHandler+0x10>)
 8000f36:	f001 fcd8 	bl	80028ea <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_IRQn 1 */

  /* USER CODE END TIM1_UP_IRQn 1 */
}
 8000f3a:	bf00      	nop
 8000f3c:	bd80      	pop	{r7, pc}
 8000f3e:	bf00      	nop
 8000f40:	2000020c 	.word	0x2000020c

08000f44 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000f44:	b580      	push	{r7, lr}
 8000f46:	b086      	sub	sp, #24
 8000f48:	af00      	add	r7, sp, #0
 8000f4a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000f4c:	4a14      	ldr	r2, [pc, #80]	; (8000fa0 <_sbrk+0x5c>)
 8000f4e:	4b15      	ldr	r3, [pc, #84]	; (8000fa4 <_sbrk+0x60>)
 8000f50:	1ad3      	subs	r3, r2, r3
 8000f52:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000f54:	697b      	ldr	r3, [r7, #20]
 8000f56:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000f58:	4b13      	ldr	r3, [pc, #76]	; (8000fa8 <_sbrk+0x64>)
 8000f5a:	681b      	ldr	r3, [r3, #0]
 8000f5c:	2b00      	cmp	r3, #0
 8000f5e:	d102      	bne.n	8000f66 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000f60:	4b11      	ldr	r3, [pc, #68]	; (8000fa8 <_sbrk+0x64>)
 8000f62:	4a12      	ldr	r2, [pc, #72]	; (8000fac <_sbrk+0x68>)
 8000f64:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000f66:	4b10      	ldr	r3, [pc, #64]	; (8000fa8 <_sbrk+0x64>)
 8000f68:	681a      	ldr	r2, [r3, #0]
 8000f6a:	687b      	ldr	r3, [r7, #4]
 8000f6c:	4413      	add	r3, r2
 8000f6e:	693a      	ldr	r2, [r7, #16]
 8000f70:	429a      	cmp	r2, r3
 8000f72:	d207      	bcs.n	8000f84 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000f74:	f002 f8e2 	bl	800313c <__errno>
 8000f78:	4603      	mov	r3, r0
 8000f7a:	220c      	movs	r2, #12
 8000f7c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000f7e:	f04f 33ff 	mov.w	r3, #4294967295
 8000f82:	e009      	b.n	8000f98 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000f84:	4b08      	ldr	r3, [pc, #32]	; (8000fa8 <_sbrk+0x64>)
 8000f86:	681b      	ldr	r3, [r3, #0]
 8000f88:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000f8a:	4b07      	ldr	r3, [pc, #28]	; (8000fa8 <_sbrk+0x64>)
 8000f8c:	681a      	ldr	r2, [r3, #0]
 8000f8e:	687b      	ldr	r3, [r7, #4]
 8000f90:	4413      	add	r3, r2
 8000f92:	4a05      	ldr	r2, [pc, #20]	; (8000fa8 <_sbrk+0x64>)
 8000f94:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000f96:	68fb      	ldr	r3, [r7, #12]
}
 8000f98:	4618      	mov	r0, r3
 8000f9a:	3718      	adds	r7, #24
 8000f9c:	46bd      	mov	sp, r7
 8000f9e:	bd80      	pop	{r7, pc}
 8000fa0:	20005000 	.word	0x20005000
 8000fa4:	00000400 	.word	0x00000400
 8000fa8:	20000208 	.word	0x20000208
 8000fac:	200002f8 	.word	0x200002f8

08000fb0 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8000fb0:	b480      	push	{r7}
 8000fb2:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000fb4:	bf00      	nop
 8000fb6:	46bd      	mov	sp, r7
 8000fb8:	bc80      	pop	{r7}
 8000fba:	4770      	bx	lr

08000fbc <MX_TIM1_Init>:
TIM_HandleTypeDef htim2;
TIM_HandleTypeDef htim3;

/* TIM1 init function */
void MX_TIM1_Init(void)
{
 8000fbc:	b580      	push	{r7, lr}
 8000fbe:	b086      	sub	sp, #24
 8000fc0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000fc2:	f107 0308 	add.w	r3, r7, #8
 8000fc6:	2200      	movs	r2, #0
 8000fc8:	601a      	str	r2, [r3, #0]
 8000fca:	605a      	str	r2, [r3, #4]
 8000fcc:	609a      	str	r2, [r3, #8]
 8000fce:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000fd0:	463b      	mov	r3, r7
 8000fd2:	2200      	movs	r2, #0
 8000fd4:	601a      	str	r2, [r3, #0]
 8000fd6:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8000fd8:	4b23      	ldr	r3, [pc, #140]	; (8001068 <MX_TIM1_Init+0xac>)
 8000fda:	4a24      	ldr	r2, [pc, #144]	; (800106c <MX_TIM1_Init+0xb0>)
 8000fdc:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 7199;
 8000fde:	4b22      	ldr	r3, [pc, #136]	; (8001068 <MX_TIM1_Init+0xac>)
 8000fe0:	f641 421f 	movw	r2, #7199	; 0x1c1f
 8000fe4:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_DOWN;
 8000fe6:	4b20      	ldr	r3, [pc, #128]	; (8001068 <MX_TIM1_Init+0xac>)
 8000fe8:	2210      	movs	r2, #16
 8000fea:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 9999;
 8000fec:	4b1e      	ldr	r3, [pc, #120]	; (8001068 <MX_TIM1_Init+0xac>)
 8000fee:	f242 720f 	movw	r2, #9999	; 0x270f
 8000ff2:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000ff4:	4b1c      	ldr	r3, [pc, #112]	; (8001068 <MX_TIM1_Init+0xac>)
 8000ff6:	2200      	movs	r2, #0
 8000ff8:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8000ffa:	4b1b      	ldr	r3, [pc, #108]	; (8001068 <MX_TIM1_Init+0xac>)
 8000ffc:	2200      	movs	r2, #0
 8000ffe:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001000:	4b19      	ldr	r3, [pc, #100]	; (8001068 <MX_TIM1_Init+0xac>)
 8001002:	2200      	movs	r2, #0
 8001004:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8001006:	4818      	ldr	r0, [pc, #96]	; (8001068 <MX_TIM1_Init+0xac>)
 8001008:	f001 fafc 	bl	8002604 <HAL_TIM_Base_Init>
 800100c:	4603      	mov	r3, r0
 800100e:	2b00      	cmp	r3, #0
 8001010:	d001      	beq.n	8001016 <MX_TIM1_Init+0x5a>
  {
    Error_Handler();
 8001012:	f7ff feb8 	bl	8000d86 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001016:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800101a:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 800101c:	f107 0308 	add.w	r3, r7, #8
 8001020:	4619      	mov	r1, r3
 8001022:	4811      	ldr	r0, [pc, #68]	; (8001068 <MX_TIM1_Init+0xac>)
 8001024:	f001 fd69 	bl	8002afa <HAL_TIM_ConfigClockSource>
 8001028:	4603      	mov	r3, r0
 800102a:	2b00      	cmp	r3, #0
 800102c:	d001      	beq.n	8001032 <MX_TIM1_Init+0x76>
  {
    Error_Handler();
 800102e:	f7ff feaa 	bl	8000d86 <Error_Handler>
  }
  if (HAL_TIM_OnePulse_Init(&htim1, TIM_OPMODE_SINGLE) != HAL_OK)
 8001032:	2108      	movs	r1, #8
 8001034:	480c      	ldr	r0, [pc, #48]	; (8001068 <MX_TIM1_Init+0xac>)
 8001036:	f001 fbff 	bl	8002838 <HAL_TIM_OnePulse_Init>
 800103a:	4603      	mov	r3, r0
 800103c:	2b00      	cmp	r3, #0
 800103e:	d001      	beq.n	8001044 <MX_TIM1_Init+0x88>
  {
    Error_Handler();
 8001040:	f7ff fea1 	bl	8000d86 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_ENABLE;
 8001044:	2310      	movs	r3, #16
 8001046:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001048:	2300      	movs	r3, #0
 800104a:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 800104c:	463b      	mov	r3, r7
 800104e:	4619      	mov	r1, r3
 8001050:	4805      	ldr	r0, [pc, #20]	; (8001068 <MX_TIM1_Init+0xac>)
 8001052:	f002 f803 	bl	800305c <HAL_TIMEx_MasterConfigSynchronization>
 8001056:	4603      	mov	r3, r0
 8001058:	2b00      	cmp	r3, #0
 800105a:	d001      	beq.n	8001060 <MX_TIM1_Init+0xa4>
  {
    Error_Handler();
 800105c:	f7ff fe93 	bl	8000d86 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 8001060:	bf00      	nop
 8001062:	3718      	adds	r7, #24
 8001064:	46bd      	mov	sp, r7
 8001066:	bd80      	pop	{r7, pc}
 8001068:	2000020c 	.word	0x2000020c
 800106c:	40012c00 	.word	0x40012c00

08001070 <MX_TIM2_Init>:
/* TIM2 init function */
void MX_TIM2_Init(void)
{
 8001070:	b580      	push	{r7, lr}
 8001072:	b08c      	sub	sp, #48	; 0x30
 8001074:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001076:	f107 0320 	add.w	r3, r7, #32
 800107a:	2200      	movs	r2, #0
 800107c:	601a      	str	r2, [r3, #0]
 800107e:	605a      	str	r2, [r3, #4]
 8001080:	609a      	str	r2, [r3, #8]
 8001082:	60da      	str	r2, [r3, #12]
  TIM_SlaveConfigTypeDef sSlaveConfig = {0};
 8001084:	f107 030c 	add.w	r3, r7, #12
 8001088:	2200      	movs	r2, #0
 800108a:	601a      	str	r2, [r3, #0]
 800108c:	605a      	str	r2, [r3, #4]
 800108e:	609a      	str	r2, [r3, #8]
 8001090:	60da      	str	r2, [r3, #12]
 8001092:	611a      	str	r2, [r3, #16]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001094:	1d3b      	adds	r3, r7, #4
 8001096:	2200      	movs	r2, #0
 8001098:	601a      	str	r2, [r3, #0]
 800109a:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 800109c:	4b28      	ldr	r3, [pc, #160]	; (8001140 <MX_TIM2_Init+0xd0>)
 800109e:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80010a2:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 80010a4:	4b26      	ldr	r3, [pc, #152]	; (8001140 <MX_TIM2_Init+0xd0>)
 80010a6:	2200      	movs	r2, #0
 80010a8:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 80010aa:	4b25      	ldr	r3, [pc, #148]	; (8001140 <MX_TIM2_Init+0xd0>)
 80010ac:	2200      	movs	r2, #0
 80010ae:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 65535;
 80010b0:	4b23      	ldr	r3, [pc, #140]	; (8001140 <MX_TIM2_Init+0xd0>)
 80010b2:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80010b6:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80010b8:	4b21      	ldr	r3, [pc, #132]	; (8001140 <MX_TIM2_Init+0xd0>)
 80010ba:	2200      	movs	r2, #0
 80010bc:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80010be:	4b20      	ldr	r3, [pc, #128]	; (8001140 <MX_TIM2_Init+0xd0>)
 80010c0:	2200      	movs	r2, #0
 80010c2:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 80010c4:	481e      	ldr	r0, [pc, #120]	; (8001140 <MX_TIM2_Init+0xd0>)
 80010c6:	f001 fa9d 	bl	8002604 <HAL_TIM_Base_Init>
 80010ca:	4603      	mov	r3, r0
 80010cc:	2b00      	cmp	r3, #0
 80010ce:	d001      	beq.n	80010d4 <MX_TIM2_Init+0x64>
  {
    Error_Handler();
 80010d0:	f7ff fe59 	bl	8000d86 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_ETRMODE2;
 80010d4:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80010d8:	623b      	str	r3, [r7, #32]
  sClockSourceConfig.ClockPolarity = TIM_CLOCKPOLARITY_NONINVERTED;
 80010da:	2300      	movs	r3, #0
 80010dc:	627b      	str	r3, [r7, #36]	; 0x24
  sClockSourceConfig.ClockPrescaler = TIM_CLOCKPRESCALER_DIV1;
 80010de:	2300      	movs	r3, #0
 80010e0:	62bb      	str	r3, [r7, #40]	; 0x28
  sClockSourceConfig.ClockFilter = 0;
 80010e2:	2300      	movs	r3, #0
 80010e4:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 80010e6:	f107 0320 	add.w	r3, r7, #32
 80010ea:	4619      	mov	r1, r3
 80010ec:	4814      	ldr	r0, [pc, #80]	; (8001140 <MX_TIM2_Init+0xd0>)
 80010ee:	f001 fd04 	bl	8002afa <HAL_TIM_ConfigClockSource>
 80010f2:	4603      	mov	r3, r0
 80010f4:	2b00      	cmp	r3, #0
 80010f6:	d001      	beq.n	80010fc <MX_TIM2_Init+0x8c>
  {
    Error_Handler();
 80010f8:	f7ff fe45 	bl	8000d86 <Error_Handler>
  }
  sSlaveConfig.SlaveMode = TIM_SLAVEMODE_GATED;
 80010fc:	2305      	movs	r3, #5
 80010fe:	60fb      	str	r3, [r7, #12]
  sSlaveConfig.InputTrigger = TIM_TS_ITR0;
 8001100:	2300      	movs	r3, #0
 8001102:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_SlaveConfigSynchro(&htim2, &sSlaveConfig) != HAL_OK)
 8001104:	f107 030c 	add.w	r3, r7, #12
 8001108:	4619      	mov	r1, r3
 800110a:	480d      	ldr	r0, [pc, #52]	; (8001140 <MX_TIM2_Init+0xd0>)
 800110c:	f001 fdb9 	bl	8002c82 <HAL_TIM_SlaveConfigSynchro>
 8001110:	4603      	mov	r3, r0
 8001112:	2b00      	cmp	r3, #0
 8001114:	d001      	beq.n	800111a <MX_TIM2_Init+0xaa>
  {
    Error_Handler();
 8001116:	f7ff fe36 	bl	8000d86 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 800111a:	2320      	movs	r3, #32
 800111c:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800111e:	2300      	movs	r3, #0
 8001120:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8001122:	1d3b      	adds	r3, r7, #4
 8001124:	4619      	mov	r1, r3
 8001126:	4806      	ldr	r0, [pc, #24]	; (8001140 <MX_TIM2_Init+0xd0>)
 8001128:	f001 ff98 	bl	800305c <HAL_TIMEx_MasterConfigSynchronization>
 800112c:	4603      	mov	r3, r0
 800112e:	2b00      	cmp	r3, #0
 8001130:	d001      	beq.n	8001136 <MX_TIM2_Init+0xc6>
  {
    Error_Handler();
 8001132:	f7ff fe28 	bl	8000d86 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8001136:	bf00      	nop
 8001138:	3730      	adds	r7, #48	; 0x30
 800113a:	46bd      	mov	sp, r7
 800113c:	bd80      	pop	{r7, pc}
 800113e:	bf00      	nop
 8001140:	20000254 	.word	0x20000254

08001144 <MX_TIM3_Init>:
/* TIM3 init function */
void MX_TIM3_Init(void)
{
 8001144:	b580      	push	{r7, lr}
 8001146:	b088      	sub	sp, #32
 8001148:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_SlaveConfigTypeDef sSlaveConfig = {0};
 800114a:	f107 030c 	add.w	r3, r7, #12
 800114e:	2200      	movs	r2, #0
 8001150:	601a      	str	r2, [r3, #0]
 8001152:	605a      	str	r2, [r3, #4]
 8001154:	609a      	str	r2, [r3, #8]
 8001156:	60da      	str	r2, [r3, #12]
 8001158:	611a      	str	r2, [r3, #16]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800115a:	1d3b      	adds	r3, r7, #4
 800115c:	2200      	movs	r2, #0
 800115e:	601a      	str	r2, [r3, #0]
 8001160:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8001162:	4b1e      	ldr	r3, [pc, #120]	; (80011dc <MX_TIM3_Init+0x98>)
 8001164:	4a1e      	ldr	r2, [pc, #120]	; (80011e0 <MX_TIM3_Init+0x9c>)
 8001166:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 8001168:	4b1c      	ldr	r3, [pc, #112]	; (80011dc <MX_TIM3_Init+0x98>)
 800116a:	2200      	movs	r2, #0
 800116c:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 800116e:	4b1b      	ldr	r3, [pc, #108]	; (80011dc <MX_TIM3_Init+0x98>)
 8001170:	2200      	movs	r2, #0
 8001172:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 65535;
 8001174:	4b19      	ldr	r3, [pc, #100]	; (80011dc <MX_TIM3_Init+0x98>)
 8001176:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800117a:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800117c:	4b17      	ldr	r3, [pc, #92]	; (80011dc <MX_TIM3_Init+0x98>)
 800117e:	2200      	movs	r2, #0
 8001180:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001182:	4b16      	ldr	r3, [pc, #88]	; (80011dc <MX_TIM3_Init+0x98>)
 8001184:	2200      	movs	r2, #0
 8001186:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8001188:	4814      	ldr	r0, [pc, #80]	; (80011dc <MX_TIM3_Init+0x98>)
 800118a:	f001 fa3b 	bl	8002604 <HAL_TIM_Base_Init>
 800118e:	4603      	mov	r3, r0
 8001190:	2b00      	cmp	r3, #0
 8001192:	d001      	beq.n	8001198 <MX_TIM3_Init+0x54>
  {
    Error_Handler();
 8001194:	f7ff fdf7 	bl	8000d86 <Error_Handler>
  }
  sSlaveConfig.SlaveMode = TIM_SLAVEMODE_EXTERNAL1;
 8001198:	2307      	movs	r3, #7
 800119a:	60fb      	str	r3, [r7, #12]
  sSlaveConfig.InputTrigger = TIM_TS_ITR1;
 800119c:	2310      	movs	r3, #16
 800119e:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_SlaveConfigSynchro(&htim3, &sSlaveConfig) != HAL_OK)
 80011a0:	f107 030c 	add.w	r3, r7, #12
 80011a4:	4619      	mov	r1, r3
 80011a6:	480d      	ldr	r0, [pc, #52]	; (80011dc <MX_TIM3_Init+0x98>)
 80011a8:	f001 fd6b 	bl	8002c82 <HAL_TIM_SlaveConfigSynchro>
 80011ac:	4603      	mov	r3, r0
 80011ae:	2b00      	cmp	r3, #0
 80011b0:	d001      	beq.n	80011b6 <MX_TIM3_Init+0x72>
  {
    Error_Handler();
 80011b2:	f7ff fde8 	bl	8000d86 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80011b6:	2300      	movs	r3, #0
 80011b8:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80011ba:	2300      	movs	r3, #0
 80011bc:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 80011be:	1d3b      	adds	r3, r7, #4
 80011c0:	4619      	mov	r1, r3
 80011c2:	4806      	ldr	r0, [pc, #24]	; (80011dc <MX_TIM3_Init+0x98>)
 80011c4:	f001 ff4a 	bl	800305c <HAL_TIMEx_MasterConfigSynchronization>
 80011c8:	4603      	mov	r3, r0
 80011ca:	2b00      	cmp	r3, #0
 80011cc:	d001      	beq.n	80011d2 <MX_TIM3_Init+0x8e>
  {
    Error_Handler();
 80011ce:	f7ff fdda 	bl	8000d86 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 80011d2:	bf00      	nop
 80011d4:	3720      	adds	r7, #32
 80011d6:	46bd      	mov	sp, r7
 80011d8:	bd80      	pop	{r7, pc}
 80011da:	bf00      	nop
 80011dc:	2000029c 	.word	0x2000029c
 80011e0:	40000400 	.word	0x40000400

080011e4 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 80011e4:	b580      	push	{r7, lr}
 80011e6:	b08a      	sub	sp, #40	; 0x28
 80011e8:	af00      	add	r7, sp, #0
 80011ea:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80011ec:	f107 0318 	add.w	r3, r7, #24
 80011f0:	2200      	movs	r2, #0
 80011f2:	601a      	str	r2, [r3, #0]
 80011f4:	605a      	str	r2, [r3, #4]
 80011f6:	609a      	str	r2, [r3, #8]
 80011f8:	60da      	str	r2, [r3, #12]
  if(tim_baseHandle->Instance==TIM1)
 80011fa:	687b      	ldr	r3, [r7, #4]
 80011fc:	681b      	ldr	r3, [r3, #0]
 80011fe:	4a2b      	ldr	r2, [pc, #172]	; (80012ac <HAL_TIM_Base_MspInit+0xc8>)
 8001200:	4293      	cmp	r3, r2
 8001202:	d114      	bne.n	800122e <HAL_TIM_Base_MspInit+0x4a>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* TIM1 clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8001204:	4b2a      	ldr	r3, [pc, #168]	; (80012b0 <HAL_TIM_Base_MspInit+0xcc>)
 8001206:	699b      	ldr	r3, [r3, #24]
 8001208:	4a29      	ldr	r2, [pc, #164]	; (80012b0 <HAL_TIM_Base_MspInit+0xcc>)
 800120a:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 800120e:	6193      	str	r3, [r2, #24]
 8001210:	4b27      	ldr	r3, [pc, #156]	; (80012b0 <HAL_TIM_Base_MspInit+0xcc>)
 8001212:	699b      	ldr	r3, [r3, #24]
 8001214:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8001218:	617b      	str	r3, [r7, #20]
 800121a:	697b      	ldr	r3, [r7, #20]

    /* TIM1 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_UP_IRQn, 0, 0);
 800121c:	2200      	movs	r2, #0
 800121e:	2100      	movs	r1, #0
 8001220:	2019      	movs	r0, #25
 8001222:	f000 f9ce 	bl	80015c2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_UP_IRQn);
 8001226:	2019      	movs	r0, #25
 8001228:	f000 f9e7 	bl	80015fa <HAL_NVIC_EnableIRQ>
    __HAL_RCC_TIM3_CLK_ENABLE();
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }
}
 800122c:	e03a      	b.n	80012a4 <HAL_TIM_Base_MspInit+0xc0>
  else if(tim_baseHandle->Instance==TIM2)
 800122e:	687b      	ldr	r3, [r7, #4]
 8001230:	681b      	ldr	r3, [r3, #0]
 8001232:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001236:	d124      	bne.n	8001282 <HAL_TIM_Base_MspInit+0x9e>
    __HAL_RCC_TIM2_CLK_ENABLE();
 8001238:	4b1d      	ldr	r3, [pc, #116]	; (80012b0 <HAL_TIM_Base_MspInit+0xcc>)
 800123a:	69db      	ldr	r3, [r3, #28]
 800123c:	4a1c      	ldr	r2, [pc, #112]	; (80012b0 <HAL_TIM_Base_MspInit+0xcc>)
 800123e:	f043 0301 	orr.w	r3, r3, #1
 8001242:	61d3      	str	r3, [r2, #28]
 8001244:	4b1a      	ldr	r3, [pc, #104]	; (80012b0 <HAL_TIM_Base_MspInit+0xcc>)
 8001246:	69db      	ldr	r3, [r3, #28]
 8001248:	f003 0301 	and.w	r3, r3, #1
 800124c:	613b      	str	r3, [r7, #16]
 800124e:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001250:	4b17      	ldr	r3, [pc, #92]	; (80012b0 <HAL_TIM_Base_MspInit+0xcc>)
 8001252:	699b      	ldr	r3, [r3, #24]
 8001254:	4a16      	ldr	r2, [pc, #88]	; (80012b0 <HAL_TIM_Base_MspInit+0xcc>)
 8001256:	f043 0304 	orr.w	r3, r3, #4
 800125a:	6193      	str	r3, [r2, #24]
 800125c:	4b14      	ldr	r3, [pc, #80]	; (80012b0 <HAL_TIM_Base_MspInit+0xcc>)
 800125e:	699b      	ldr	r3, [r3, #24]
 8001260:	f003 0304 	and.w	r3, r3, #4
 8001264:	60fb      	str	r3, [r7, #12]
 8001266:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 8001268:	2301      	movs	r3, #1
 800126a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800126c:	2300      	movs	r3, #0
 800126e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001270:	2300      	movs	r3, #0
 8001272:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001274:	f107 0318 	add.w	r3, r7, #24
 8001278:	4619      	mov	r1, r3
 800127a:	480e      	ldr	r0, [pc, #56]	; (80012b4 <HAL_TIM_Base_MspInit+0xd0>)
 800127c:	f000 f9d8 	bl	8001630 <HAL_GPIO_Init>
}
 8001280:	e010      	b.n	80012a4 <HAL_TIM_Base_MspInit+0xc0>
  else if(tim_baseHandle->Instance==TIM3)
 8001282:	687b      	ldr	r3, [r7, #4]
 8001284:	681b      	ldr	r3, [r3, #0]
 8001286:	4a0c      	ldr	r2, [pc, #48]	; (80012b8 <HAL_TIM_Base_MspInit+0xd4>)
 8001288:	4293      	cmp	r3, r2
 800128a:	d10b      	bne.n	80012a4 <HAL_TIM_Base_MspInit+0xc0>
    __HAL_RCC_TIM3_CLK_ENABLE();
 800128c:	4b08      	ldr	r3, [pc, #32]	; (80012b0 <HAL_TIM_Base_MspInit+0xcc>)
 800128e:	69db      	ldr	r3, [r3, #28]
 8001290:	4a07      	ldr	r2, [pc, #28]	; (80012b0 <HAL_TIM_Base_MspInit+0xcc>)
 8001292:	f043 0302 	orr.w	r3, r3, #2
 8001296:	61d3      	str	r3, [r2, #28]
 8001298:	4b05      	ldr	r3, [pc, #20]	; (80012b0 <HAL_TIM_Base_MspInit+0xcc>)
 800129a:	69db      	ldr	r3, [r3, #28]
 800129c:	f003 0302 	and.w	r3, r3, #2
 80012a0:	60bb      	str	r3, [r7, #8]
 80012a2:	68bb      	ldr	r3, [r7, #8]
}
 80012a4:	bf00      	nop
 80012a6:	3728      	adds	r7, #40	; 0x28
 80012a8:	46bd      	mov	sp, r7
 80012aa:	bd80      	pop	{r7, pc}
 80012ac:	40012c00 	.word	0x40012c00
 80012b0:	40021000 	.word	0x40021000
 80012b4:	40010800 	.word	0x40010800
 80012b8:	40000400 	.word	0x40000400

080012bc <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80012bc:	480c      	ldr	r0, [pc, #48]	; (80012f0 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 80012be:	490d      	ldr	r1, [pc, #52]	; (80012f4 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 80012c0:	4a0d      	ldr	r2, [pc, #52]	; (80012f8 <LoopFillZerobss+0x1a>)
  movs r3, #0
 80012c2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80012c4:	e002      	b.n	80012cc <LoopCopyDataInit>

080012c6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80012c6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80012c8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80012ca:	3304      	adds	r3, #4

080012cc <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80012cc:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80012ce:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80012d0:	d3f9      	bcc.n	80012c6 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80012d2:	4a0a      	ldr	r2, [pc, #40]	; (80012fc <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 80012d4:	4c0a      	ldr	r4, [pc, #40]	; (8001300 <LoopFillZerobss+0x22>)
  movs r3, #0
 80012d6:	2300      	movs	r3, #0
  b LoopFillZerobss
 80012d8:	e001      	b.n	80012de <LoopFillZerobss>

080012da <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80012da:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80012dc:	3204      	adds	r2, #4

080012de <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80012de:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80012e0:	d3fb      	bcc.n	80012da <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 80012e2:	f7ff fe65 	bl	8000fb0 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80012e6:	f001 ff2f 	bl	8003148 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80012ea:	f7ff fc6f 	bl	8000bcc <main>
  bx lr
 80012ee:	4770      	bx	lr
  ldr r0, =_sdata
 80012f0:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80012f4:	2000007c 	.word	0x2000007c
  ldr r2, =_sidata
 80012f8:	08004780 	.word	0x08004780
  ldr r2, =_sbss
 80012fc:	2000007c 	.word	0x2000007c
  ldr r4, =_ebss
 8001300:	200002f8 	.word	0x200002f8

08001304 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8001304:	e7fe      	b.n	8001304 <ADC1_2_IRQHandler>
	...

08001308 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001308:	b580      	push	{r7, lr}
 800130a:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800130c:	4b08      	ldr	r3, [pc, #32]	; (8001330 <HAL_Init+0x28>)
 800130e:	681b      	ldr	r3, [r3, #0]
 8001310:	4a07      	ldr	r2, [pc, #28]	; (8001330 <HAL_Init+0x28>)
 8001312:	f043 0310 	orr.w	r3, r3, #16
 8001316:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001318:	2003      	movs	r0, #3
 800131a:	f000 f947 	bl	80015ac <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800131e:	200f      	movs	r0, #15
 8001320:	f000 f808 	bl	8001334 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001324:	f7ff fdaa 	bl	8000e7c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001328:	2300      	movs	r3, #0
}
 800132a:	4618      	mov	r0, r3
 800132c:	bd80      	pop	{r7, pc}
 800132e:	bf00      	nop
 8001330:	40022000 	.word	0x40022000

08001334 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001334:	b580      	push	{r7, lr}
 8001336:	b082      	sub	sp, #8
 8001338:	af00      	add	r7, sp, #0
 800133a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 800133c:	4b12      	ldr	r3, [pc, #72]	; (8001388 <HAL_InitTick+0x54>)
 800133e:	681a      	ldr	r2, [r3, #0]
 8001340:	4b12      	ldr	r3, [pc, #72]	; (800138c <HAL_InitTick+0x58>)
 8001342:	781b      	ldrb	r3, [r3, #0]
 8001344:	4619      	mov	r1, r3
 8001346:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800134a:	fbb3 f3f1 	udiv	r3, r3, r1
 800134e:	fbb2 f3f3 	udiv	r3, r2, r3
 8001352:	4618      	mov	r0, r3
 8001354:	f000 f95f 	bl	8001616 <HAL_SYSTICK_Config>
 8001358:	4603      	mov	r3, r0
 800135a:	2b00      	cmp	r3, #0
 800135c:	d001      	beq.n	8001362 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800135e:	2301      	movs	r3, #1
 8001360:	e00e      	b.n	8001380 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001362:	687b      	ldr	r3, [r7, #4]
 8001364:	2b0f      	cmp	r3, #15
 8001366:	d80a      	bhi.n	800137e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001368:	2200      	movs	r2, #0
 800136a:	6879      	ldr	r1, [r7, #4]
 800136c:	f04f 30ff 	mov.w	r0, #4294967295
 8001370:	f000 f927 	bl	80015c2 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001374:	4a06      	ldr	r2, [pc, #24]	; (8001390 <HAL_InitTick+0x5c>)
 8001376:	687b      	ldr	r3, [r7, #4]
 8001378:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800137a:	2300      	movs	r3, #0
 800137c:	e000      	b.n	8001380 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800137e:	2301      	movs	r3, #1
}
 8001380:	4618      	mov	r0, r3
 8001382:	3708      	adds	r7, #8
 8001384:	46bd      	mov	sp, r7
 8001386:	bd80      	pop	{r7, pc}
 8001388:	2000000c 	.word	0x2000000c
 800138c:	20000014 	.word	0x20000014
 8001390:	20000010 	.word	0x20000010

08001394 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001394:	b480      	push	{r7}
 8001396:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001398:	4b05      	ldr	r3, [pc, #20]	; (80013b0 <HAL_IncTick+0x1c>)
 800139a:	781b      	ldrb	r3, [r3, #0]
 800139c:	461a      	mov	r2, r3
 800139e:	4b05      	ldr	r3, [pc, #20]	; (80013b4 <HAL_IncTick+0x20>)
 80013a0:	681b      	ldr	r3, [r3, #0]
 80013a2:	4413      	add	r3, r2
 80013a4:	4a03      	ldr	r2, [pc, #12]	; (80013b4 <HAL_IncTick+0x20>)
 80013a6:	6013      	str	r3, [r2, #0]
}
 80013a8:	bf00      	nop
 80013aa:	46bd      	mov	sp, r7
 80013ac:	bc80      	pop	{r7}
 80013ae:	4770      	bx	lr
 80013b0:	20000014 	.word	0x20000014
 80013b4:	200002e4 	.word	0x200002e4

080013b8 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80013b8:	b480      	push	{r7}
 80013ba:	af00      	add	r7, sp, #0
  return uwTick;
 80013bc:	4b02      	ldr	r3, [pc, #8]	; (80013c8 <HAL_GetTick+0x10>)
 80013be:	681b      	ldr	r3, [r3, #0]
}
 80013c0:	4618      	mov	r0, r3
 80013c2:	46bd      	mov	sp, r7
 80013c4:	bc80      	pop	{r7}
 80013c6:	4770      	bx	lr
 80013c8:	200002e4 	.word	0x200002e4

080013cc <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80013cc:	b580      	push	{r7, lr}
 80013ce:	b084      	sub	sp, #16
 80013d0:	af00      	add	r7, sp, #0
 80013d2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80013d4:	f7ff fff0 	bl	80013b8 <HAL_GetTick>
 80013d8:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80013da:	687b      	ldr	r3, [r7, #4]
 80013dc:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80013de:	68fb      	ldr	r3, [r7, #12]
 80013e0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80013e4:	d005      	beq.n	80013f2 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80013e6:	4b0a      	ldr	r3, [pc, #40]	; (8001410 <HAL_Delay+0x44>)
 80013e8:	781b      	ldrb	r3, [r3, #0]
 80013ea:	461a      	mov	r2, r3
 80013ec:	68fb      	ldr	r3, [r7, #12]
 80013ee:	4413      	add	r3, r2
 80013f0:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80013f2:	bf00      	nop
 80013f4:	f7ff ffe0 	bl	80013b8 <HAL_GetTick>
 80013f8:	4602      	mov	r2, r0
 80013fa:	68bb      	ldr	r3, [r7, #8]
 80013fc:	1ad3      	subs	r3, r2, r3
 80013fe:	68fa      	ldr	r2, [r7, #12]
 8001400:	429a      	cmp	r2, r3
 8001402:	d8f7      	bhi.n	80013f4 <HAL_Delay+0x28>
  {
  }
}
 8001404:	bf00      	nop
 8001406:	bf00      	nop
 8001408:	3710      	adds	r7, #16
 800140a:	46bd      	mov	sp, r7
 800140c:	bd80      	pop	{r7, pc}
 800140e:	bf00      	nop
 8001410:	20000014 	.word	0x20000014

08001414 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001414:	b480      	push	{r7}
 8001416:	b085      	sub	sp, #20
 8001418:	af00      	add	r7, sp, #0
 800141a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800141c:	687b      	ldr	r3, [r7, #4]
 800141e:	f003 0307 	and.w	r3, r3, #7
 8001422:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001424:	4b0c      	ldr	r3, [pc, #48]	; (8001458 <__NVIC_SetPriorityGrouping+0x44>)
 8001426:	68db      	ldr	r3, [r3, #12]
 8001428:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800142a:	68ba      	ldr	r2, [r7, #8]
 800142c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001430:	4013      	ands	r3, r2
 8001432:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8001434:	68fb      	ldr	r3, [r7, #12]
 8001436:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001438:	68bb      	ldr	r3, [r7, #8]
 800143a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800143c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001440:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001444:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001446:	4a04      	ldr	r2, [pc, #16]	; (8001458 <__NVIC_SetPriorityGrouping+0x44>)
 8001448:	68bb      	ldr	r3, [r7, #8]
 800144a:	60d3      	str	r3, [r2, #12]
}
 800144c:	bf00      	nop
 800144e:	3714      	adds	r7, #20
 8001450:	46bd      	mov	sp, r7
 8001452:	bc80      	pop	{r7}
 8001454:	4770      	bx	lr
 8001456:	bf00      	nop
 8001458:	e000ed00 	.word	0xe000ed00

0800145c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800145c:	b480      	push	{r7}
 800145e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001460:	4b04      	ldr	r3, [pc, #16]	; (8001474 <__NVIC_GetPriorityGrouping+0x18>)
 8001462:	68db      	ldr	r3, [r3, #12]
 8001464:	0a1b      	lsrs	r3, r3, #8
 8001466:	f003 0307 	and.w	r3, r3, #7
}
 800146a:	4618      	mov	r0, r3
 800146c:	46bd      	mov	sp, r7
 800146e:	bc80      	pop	{r7}
 8001470:	4770      	bx	lr
 8001472:	bf00      	nop
 8001474:	e000ed00 	.word	0xe000ed00

08001478 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001478:	b480      	push	{r7}
 800147a:	b083      	sub	sp, #12
 800147c:	af00      	add	r7, sp, #0
 800147e:	4603      	mov	r3, r0
 8001480:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001482:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001486:	2b00      	cmp	r3, #0
 8001488:	db0b      	blt.n	80014a2 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800148a:	79fb      	ldrb	r3, [r7, #7]
 800148c:	f003 021f 	and.w	r2, r3, #31
 8001490:	4906      	ldr	r1, [pc, #24]	; (80014ac <__NVIC_EnableIRQ+0x34>)
 8001492:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001496:	095b      	lsrs	r3, r3, #5
 8001498:	2001      	movs	r0, #1
 800149a:	fa00 f202 	lsl.w	r2, r0, r2
 800149e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80014a2:	bf00      	nop
 80014a4:	370c      	adds	r7, #12
 80014a6:	46bd      	mov	sp, r7
 80014a8:	bc80      	pop	{r7}
 80014aa:	4770      	bx	lr
 80014ac:	e000e100 	.word	0xe000e100

080014b0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80014b0:	b480      	push	{r7}
 80014b2:	b083      	sub	sp, #12
 80014b4:	af00      	add	r7, sp, #0
 80014b6:	4603      	mov	r3, r0
 80014b8:	6039      	str	r1, [r7, #0]
 80014ba:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80014bc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80014c0:	2b00      	cmp	r3, #0
 80014c2:	db0a      	blt.n	80014da <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80014c4:	683b      	ldr	r3, [r7, #0]
 80014c6:	b2da      	uxtb	r2, r3
 80014c8:	490c      	ldr	r1, [pc, #48]	; (80014fc <__NVIC_SetPriority+0x4c>)
 80014ca:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80014ce:	0112      	lsls	r2, r2, #4
 80014d0:	b2d2      	uxtb	r2, r2
 80014d2:	440b      	add	r3, r1
 80014d4:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80014d8:	e00a      	b.n	80014f0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80014da:	683b      	ldr	r3, [r7, #0]
 80014dc:	b2da      	uxtb	r2, r3
 80014de:	4908      	ldr	r1, [pc, #32]	; (8001500 <__NVIC_SetPriority+0x50>)
 80014e0:	79fb      	ldrb	r3, [r7, #7]
 80014e2:	f003 030f 	and.w	r3, r3, #15
 80014e6:	3b04      	subs	r3, #4
 80014e8:	0112      	lsls	r2, r2, #4
 80014ea:	b2d2      	uxtb	r2, r2
 80014ec:	440b      	add	r3, r1
 80014ee:	761a      	strb	r2, [r3, #24]
}
 80014f0:	bf00      	nop
 80014f2:	370c      	adds	r7, #12
 80014f4:	46bd      	mov	sp, r7
 80014f6:	bc80      	pop	{r7}
 80014f8:	4770      	bx	lr
 80014fa:	bf00      	nop
 80014fc:	e000e100 	.word	0xe000e100
 8001500:	e000ed00 	.word	0xe000ed00

08001504 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001504:	b480      	push	{r7}
 8001506:	b089      	sub	sp, #36	; 0x24
 8001508:	af00      	add	r7, sp, #0
 800150a:	60f8      	str	r0, [r7, #12]
 800150c:	60b9      	str	r1, [r7, #8]
 800150e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001510:	68fb      	ldr	r3, [r7, #12]
 8001512:	f003 0307 	and.w	r3, r3, #7
 8001516:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001518:	69fb      	ldr	r3, [r7, #28]
 800151a:	f1c3 0307 	rsb	r3, r3, #7
 800151e:	2b04      	cmp	r3, #4
 8001520:	bf28      	it	cs
 8001522:	2304      	movcs	r3, #4
 8001524:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001526:	69fb      	ldr	r3, [r7, #28]
 8001528:	3304      	adds	r3, #4
 800152a:	2b06      	cmp	r3, #6
 800152c:	d902      	bls.n	8001534 <NVIC_EncodePriority+0x30>
 800152e:	69fb      	ldr	r3, [r7, #28]
 8001530:	3b03      	subs	r3, #3
 8001532:	e000      	b.n	8001536 <NVIC_EncodePriority+0x32>
 8001534:	2300      	movs	r3, #0
 8001536:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001538:	f04f 32ff 	mov.w	r2, #4294967295
 800153c:	69bb      	ldr	r3, [r7, #24]
 800153e:	fa02 f303 	lsl.w	r3, r2, r3
 8001542:	43da      	mvns	r2, r3
 8001544:	68bb      	ldr	r3, [r7, #8]
 8001546:	401a      	ands	r2, r3
 8001548:	697b      	ldr	r3, [r7, #20]
 800154a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800154c:	f04f 31ff 	mov.w	r1, #4294967295
 8001550:	697b      	ldr	r3, [r7, #20]
 8001552:	fa01 f303 	lsl.w	r3, r1, r3
 8001556:	43d9      	mvns	r1, r3
 8001558:	687b      	ldr	r3, [r7, #4]
 800155a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800155c:	4313      	orrs	r3, r2
         );
}
 800155e:	4618      	mov	r0, r3
 8001560:	3724      	adds	r7, #36	; 0x24
 8001562:	46bd      	mov	sp, r7
 8001564:	bc80      	pop	{r7}
 8001566:	4770      	bx	lr

08001568 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001568:	b580      	push	{r7, lr}
 800156a:	b082      	sub	sp, #8
 800156c:	af00      	add	r7, sp, #0
 800156e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001570:	687b      	ldr	r3, [r7, #4]
 8001572:	3b01      	subs	r3, #1
 8001574:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001578:	d301      	bcc.n	800157e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800157a:	2301      	movs	r3, #1
 800157c:	e00f      	b.n	800159e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800157e:	4a0a      	ldr	r2, [pc, #40]	; (80015a8 <SysTick_Config+0x40>)
 8001580:	687b      	ldr	r3, [r7, #4]
 8001582:	3b01      	subs	r3, #1
 8001584:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001586:	210f      	movs	r1, #15
 8001588:	f04f 30ff 	mov.w	r0, #4294967295
 800158c:	f7ff ff90 	bl	80014b0 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001590:	4b05      	ldr	r3, [pc, #20]	; (80015a8 <SysTick_Config+0x40>)
 8001592:	2200      	movs	r2, #0
 8001594:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001596:	4b04      	ldr	r3, [pc, #16]	; (80015a8 <SysTick_Config+0x40>)
 8001598:	2207      	movs	r2, #7
 800159a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800159c:	2300      	movs	r3, #0
}
 800159e:	4618      	mov	r0, r3
 80015a0:	3708      	adds	r7, #8
 80015a2:	46bd      	mov	sp, r7
 80015a4:	bd80      	pop	{r7, pc}
 80015a6:	bf00      	nop
 80015a8:	e000e010 	.word	0xe000e010

080015ac <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80015ac:	b580      	push	{r7, lr}
 80015ae:	b082      	sub	sp, #8
 80015b0:	af00      	add	r7, sp, #0
 80015b2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80015b4:	6878      	ldr	r0, [r7, #4]
 80015b6:	f7ff ff2d 	bl	8001414 <__NVIC_SetPriorityGrouping>
}
 80015ba:	bf00      	nop
 80015bc:	3708      	adds	r7, #8
 80015be:	46bd      	mov	sp, r7
 80015c0:	bd80      	pop	{r7, pc}

080015c2 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80015c2:	b580      	push	{r7, lr}
 80015c4:	b086      	sub	sp, #24
 80015c6:	af00      	add	r7, sp, #0
 80015c8:	4603      	mov	r3, r0
 80015ca:	60b9      	str	r1, [r7, #8]
 80015cc:	607a      	str	r2, [r7, #4]
 80015ce:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80015d0:	2300      	movs	r3, #0
 80015d2:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80015d4:	f7ff ff42 	bl	800145c <__NVIC_GetPriorityGrouping>
 80015d8:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80015da:	687a      	ldr	r2, [r7, #4]
 80015dc:	68b9      	ldr	r1, [r7, #8]
 80015de:	6978      	ldr	r0, [r7, #20]
 80015e0:	f7ff ff90 	bl	8001504 <NVIC_EncodePriority>
 80015e4:	4602      	mov	r2, r0
 80015e6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80015ea:	4611      	mov	r1, r2
 80015ec:	4618      	mov	r0, r3
 80015ee:	f7ff ff5f 	bl	80014b0 <__NVIC_SetPriority>
}
 80015f2:	bf00      	nop
 80015f4:	3718      	adds	r7, #24
 80015f6:	46bd      	mov	sp, r7
 80015f8:	bd80      	pop	{r7, pc}

080015fa <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80015fa:	b580      	push	{r7, lr}
 80015fc:	b082      	sub	sp, #8
 80015fe:	af00      	add	r7, sp, #0
 8001600:	4603      	mov	r3, r0
 8001602:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001604:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001608:	4618      	mov	r0, r3
 800160a:	f7ff ff35 	bl	8001478 <__NVIC_EnableIRQ>
}
 800160e:	bf00      	nop
 8001610:	3708      	adds	r7, #8
 8001612:	46bd      	mov	sp, r7
 8001614:	bd80      	pop	{r7, pc}

08001616 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001616:	b580      	push	{r7, lr}
 8001618:	b082      	sub	sp, #8
 800161a:	af00      	add	r7, sp, #0
 800161c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800161e:	6878      	ldr	r0, [r7, #4]
 8001620:	f7ff ffa2 	bl	8001568 <SysTick_Config>
 8001624:	4603      	mov	r3, r0
}
 8001626:	4618      	mov	r0, r3
 8001628:	3708      	adds	r7, #8
 800162a:	46bd      	mov	sp, r7
 800162c:	bd80      	pop	{r7, pc}
	...

08001630 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001630:	b480      	push	{r7}
 8001632:	b08b      	sub	sp, #44	; 0x2c
 8001634:	af00      	add	r7, sp, #0
 8001636:	6078      	str	r0, [r7, #4]
 8001638:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800163a:	2300      	movs	r3, #0
 800163c:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 800163e:	2300      	movs	r3, #0
 8001640:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001642:	e169      	b.n	8001918 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8001644:	2201      	movs	r2, #1
 8001646:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001648:	fa02 f303 	lsl.w	r3, r2, r3
 800164c:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800164e:	683b      	ldr	r3, [r7, #0]
 8001650:	681b      	ldr	r3, [r3, #0]
 8001652:	69fa      	ldr	r2, [r7, #28]
 8001654:	4013      	ands	r3, r2
 8001656:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8001658:	69ba      	ldr	r2, [r7, #24]
 800165a:	69fb      	ldr	r3, [r7, #28]
 800165c:	429a      	cmp	r2, r3
 800165e:	f040 8158 	bne.w	8001912 <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8001662:	683b      	ldr	r3, [r7, #0]
 8001664:	685b      	ldr	r3, [r3, #4]
 8001666:	4a9a      	ldr	r2, [pc, #616]	; (80018d0 <HAL_GPIO_Init+0x2a0>)
 8001668:	4293      	cmp	r3, r2
 800166a:	d05e      	beq.n	800172a <HAL_GPIO_Init+0xfa>
 800166c:	4a98      	ldr	r2, [pc, #608]	; (80018d0 <HAL_GPIO_Init+0x2a0>)
 800166e:	4293      	cmp	r3, r2
 8001670:	d875      	bhi.n	800175e <HAL_GPIO_Init+0x12e>
 8001672:	4a98      	ldr	r2, [pc, #608]	; (80018d4 <HAL_GPIO_Init+0x2a4>)
 8001674:	4293      	cmp	r3, r2
 8001676:	d058      	beq.n	800172a <HAL_GPIO_Init+0xfa>
 8001678:	4a96      	ldr	r2, [pc, #600]	; (80018d4 <HAL_GPIO_Init+0x2a4>)
 800167a:	4293      	cmp	r3, r2
 800167c:	d86f      	bhi.n	800175e <HAL_GPIO_Init+0x12e>
 800167e:	4a96      	ldr	r2, [pc, #600]	; (80018d8 <HAL_GPIO_Init+0x2a8>)
 8001680:	4293      	cmp	r3, r2
 8001682:	d052      	beq.n	800172a <HAL_GPIO_Init+0xfa>
 8001684:	4a94      	ldr	r2, [pc, #592]	; (80018d8 <HAL_GPIO_Init+0x2a8>)
 8001686:	4293      	cmp	r3, r2
 8001688:	d869      	bhi.n	800175e <HAL_GPIO_Init+0x12e>
 800168a:	4a94      	ldr	r2, [pc, #592]	; (80018dc <HAL_GPIO_Init+0x2ac>)
 800168c:	4293      	cmp	r3, r2
 800168e:	d04c      	beq.n	800172a <HAL_GPIO_Init+0xfa>
 8001690:	4a92      	ldr	r2, [pc, #584]	; (80018dc <HAL_GPIO_Init+0x2ac>)
 8001692:	4293      	cmp	r3, r2
 8001694:	d863      	bhi.n	800175e <HAL_GPIO_Init+0x12e>
 8001696:	4a92      	ldr	r2, [pc, #584]	; (80018e0 <HAL_GPIO_Init+0x2b0>)
 8001698:	4293      	cmp	r3, r2
 800169a:	d046      	beq.n	800172a <HAL_GPIO_Init+0xfa>
 800169c:	4a90      	ldr	r2, [pc, #576]	; (80018e0 <HAL_GPIO_Init+0x2b0>)
 800169e:	4293      	cmp	r3, r2
 80016a0:	d85d      	bhi.n	800175e <HAL_GPIO_Init+0x12e>
 80016a2:	2b12      	cmp	r3, #18
 80016a4:	d82a      	bhi.n	80016fc <HAL_GPIO_Init+0xcc>
 80016a6:	2b12      	cmp	r3, #18
 80016a8:	d859      	bhi.n	800175e <HAL_GPIO_Init+0x12e>
 80016aa:	a201      	add	r2, pc, #4	; (adr r2, 80016b0 <HAL_GPIO_Init+0x80>)
 80016ac:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80016b0:	0800172b 	.word	0x0800172b
 80016b4:	08001705 	.word	0x08001705
 80016b8:	08001717 	.word	0x08001717
 80016bc:	08001759 	.word	0x08001759
 80016c0:	0800175f 	.word	0x0800175f
 80016c4:	0800175f 	.word	0x0800175f
 80016c8:	0800175f 	.word	0x0800175f
 80016cc:	0800175f 	.word	0x0800175f
 80016d0:	0800175f 	.word	0x0800175f
 80016d4:	0800175f 	.word	0x0800175f
 80016d8:	0800175f 	.word	0x0800175f
 80016dc:	0800175f 	.word	0x0800175f
 80016e0:	0800175f 	.word	0x0800175f
 80016e4:	0800175f 	.word	0x0800175f
 80016e8:	0800175f 	.word	0x0800175f
 80016ec:	0800175f 	.word	0x0800175f
 80016f0:	0800175f 	.word	0x0800175f
 80016f4:	0800170d 	.word	0x0800170d
 80016f8:	08001721 	.word	0x08001721
 80016fc:	4a79      	ldr	r2, [pc, #484]	; (80018e4 <HAL_GPIO_Init+0x2b4>)
 80016fe:	4293      	cmp	r3, r2
 8001700:	d013      	beq.n	800172a <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8001702:	e02c      	b.n	800175e <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8001704:	683b      	ldr	r3, [r7, #0]
 8001706:	68db      	ldr	r3, [r3, #12]
 8001708:	623b      	str	r3, [r7, #32]
          break;
 800170a:	e029      	b.n	8001760 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 800170c:	683b      	ldr	r3, [r7, #0]
 800170e:	68db      	ldr	r3, [r3, #12]
 8001710:	3304      	adds	r3, #4
 8001712:	623b      	str	r3, [r7, #32]
          break;
 8001714:	e024      	b.n	8001760 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8001716:	683b      	ldr	r3, [r7, #0]
 8001718:	68db      	ldr	r3, [r3, #12]
 800171a:	3308      	adds	r3, #8
 800171c:	623b      	str	r3, [r7, #32]
          break;
 800171e:	e01f      	b.n	8001760 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8001720:	683b      	ldr	r3, [r7, #0]
 8001722:	68db      	ldr	r3, [r3, #12]
 8001724:	330c      	adds	r3, #12
 8001726:	623b      	str	r3, [r7, #32]
          break;
 8001728:	e01a      	b.n	8001760 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 800172a:	683b      	ldr	r3, [r7, #0]
 800172c:	689b      	ldr	r3, [r3, #8]
 800172e:	2b00      	cmp	r3, #0
 8001730:	d102      	bne.n	8001738 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8001732:	2304      	movs	r3, #4
 8001734:	623b      	str	r3, [r7, #32]
          break;
 8001736:	e013      	b.n	8001760 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8001738:	683b      	ldr	r3, [r7, #0]
 800173a:	689b      	ldr	r3, [r3, #8]
 800173c:	2b01      	cmp	r3, #1
 800173e:	d105      	bne.n	800174c <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001740:	2308      	movs	r3, #8
 8001742:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8001744:	687b      	ldr	r3, [r7, #4]
 8001746:	69fa      	ldr	r2, [r7, #28]
 8001748:	611a      	str	r2, [r3, #16]
          break;
 800174a:	e009      	b.n	8001760 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 800174c:	2308      	movs	r3, #8
 800174e:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8001750:	687b      	ldr	r3, [r7, #4]
 8001752:	69fa      	ldr	r2, [r7, #28]
 8001754:	615a      	str	r2, [r3, #20]
          break;
 8001756:	e003      	b.n	8001760 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8001758:	2300      	movs	r3, #0
 800175a:	623b      	str	r3, [r7, #32]
          break;
 800175c:	e000      	b.n	8001760 <HAL_GPIO_Init+0x130>
          break;
 800175e:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8001760:	69bb      	ldr	r3, [r7, #24]
 8001762:	2bff      	cmp	r3, #255	; 0xff
 8001764:	d801      	bhi.n	800176a <HAL_GPIO_Init+0x13a>
 8001766:	687b      	ldr	r3, [r7, #4]
 8001768:	e001      	b.n	800176e <HAL_GPIO_Init+0x13e>
 800176a:	687b      	ldr	r3, [r7, #4]
 800176c:	3304      	adds	r3, #4
 800176e:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8001770:	69bb      	ldr	r3, [r7, #24]
 8001772:	2bff      	cmp	r3, #255	; 0xff
 8001774:	d802      	bhi.n	800177c <HAL_GPIO_Init+0x14c>
 8001776:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001778:	009b      	lsls	r3, r3, #2
 800177a:	e002      	b.n	8001782 <HAL_GPIO_Init+0x152>
 800177c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800177e:	3b08      	subs	r3, #8
 8001780:	009b      	lsls	r3, r3, #2
 8001782:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8001784:	697b      	ldr	r3, [r7, #20]
 8001786:	681a      	ldr	r2, [r3, #0]
 8001788:	210f      	movs	r1, #15
 800178a:	693b      	ldr	r3, [r7, #16]
 800178c:	fa01 f303 	lsl.w	r3, r1, r3
 8001790:	43db      	mvns	r3, r3
 8001792:	401a      	ands	r2, r3
 8001794:	6a39      	ldr	r1, [r7, #32]
 8001796:	693b      	ldr	r3, [r7, #16]
 8001798:	fa01 f303 	lsl.w	r3, r1, r3
 800179c:	431a      	orrs	r2, r3
 800179e:	697b      	ldr	r3, [r7, #20]
 80017a0:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80017a2:	683b      	ldr	r3, [r7, #0]
 80017a4:	685b      	ldr	r3, [r3, #4]
 80017a6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80017aa:	2b00      	cmp	r3, #0
 80017ac:	f000 80b1 	beq.w	8001912 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 80017b0:	4b4d      	ldr	r3, [pc, #308]	; (80018e8 <HAL_GPIO_Init+0x2b8>)
 80017b2:	699b      	ldr	r3, [r3, #24]
 80017b4:	4a4c      	ldr	r2, [pc, #304]	; (80018e8 <HAL_GPIO_Init+0x2b8>)
 80017b6:	f043 0301 	orr.w	r3, r3, #1
 80017ba:	6193      	str	r3, [r2, #24]
 80017bc:	4b4a      	ldr	r3, [pc, #296]	; (80018e8 <HAL_GPIO_Init+0x2b8>)
 80017be:	699b      	ldr	r3, [r3, #24]
 80017c0:	f003 0301 	and.w	r3, r3, #1
 80017c4:	60bb      	str	r3, [r7, #8]
 80017c6:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 80017c8:	4a48      	ldr	r2, [pc, #288]	; (80018ec <HAL_GPIO_Init+0x2bc>)
 80017ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80017cc:	089b      	lsrs	r3, r3, #2
 80017ce:	3302      	adds	r3, #2
 80017d0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80017d4:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 80017d6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80017d8:	f003 0303 	and.w	r3, r3, #3
 80017dc:	009b      	lsls	r3, r3, #2
 80017de:	220f      	movs	r2, #15
 80017e0:	fa02 f303 	lsl.w	r3, r2, r3
 80017e4:	43db      	mvns	r3, r3
 80017e6:	68fa      	ldr	r2, [r7, #12]
 80017e8:	4013      	ands	r3, r2
 80017ea:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 80017ec:	687b      	ldr	r3, [r7, #4]
 80017ee:	4a40      	ldr	r2, [pc, #256]	; (80018f0 <HAL_GPIO_Init+0x2c0>)
 80017f0:	4293      	cmp	r3, r2
 80017f2:	d013      	beq.n	800181c <HAL_GPIO_Init+0x1ec>
 80017f4:	687b      	ldr	r3, [r7, #4]
 80017f6:	4a3f      	ldr	r2, [pc, #252]	; (80018f4 <HAL_GPIO_Init+0x2c4>)
 80017f8:	4293      	cmp	r3, r2
 80017fa:	d00d      	beq.n	8001818 <HAL_GPIO_Init+0x1e8>
 80017fc:	687b      	ldr	r3, [r7, #4]
 80017fe:	4a3e      	ldr	r2, [pc, #248]	; (80018f8 <HAL_GPIO_Init+0x2c8>)
 8001800:	4293      	cmp	r3, r2
 8001802:	d007      	beq.n	8001814 <HAL_GPIO_Init+0x1e4>
 8001804:	687b      	ldr	r3, [r7, #4]
 8001806:	4a3d      	ldr	r2, [pc, #244]	; (80018fc <HAL_GPIO_Init+0x2cc>)
 8001808:	4293      	cmp	r3, r2
 800180a:	d101      	bne.n	8001810 <HAL_GPIO_Init+0x1e0>
 800180c:	2303      	movs	r3, #3
 800180e:	e006      	b.n	800181e <HAL_GPIO_Init+0x1ee>
 8001810:	2304      	movs	r3, #4
 8001812:	e004      	b.n	800181e <HAL_GPIO_Init+0x1ee>
 8001814:	2302      	movs	r3, #2
 8001816:	e002      	b.n	800181e <HAL_GPIO_Init+0x1ee>
 8001818:	2301      	movs	r3, #1
 800181a:	e000      	b.n	800181e <HAL_GPIO_Init+0x1ee>
 800181c:	2300      	movs	r3, #0
 800181e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001820:	f002 0203 	and.w	r2, r2, #3
 8001824:	0092      	lsls	r2, r2, #2
 8001826:	4093      	lsls	r3, r2
 8001828:	68fa      	ldr	r2, [r7, #12]
 800182a:	4313      	orrs	r3, r2
 800182c:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 800182e:	492f      	ldr	r1, [pc, #188]	; (80018ec <HAL_GPIO_Init+0x2bc>)
 8001830:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001832:	089b      	lsrs	r3, r3, #2
 8001834:	3302      	adds	r3, #2
 8001836:	68fa      	ldr	r2, [r7, #12]
 8001838:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 800183c:	683b      	ldr	r3, [r7, #0]
 800183e:	685b      	ldr	r3, [r3, #4]
 8001840:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001844:	2b00      	cmp	r3, #0
 8001846:	d006      	beq.n	8001856 <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8001848:	4b2d      	ldr	r3, [pc, #180]	; (8001900 <HAL_GPIO_Init+0x2d0>)
 800184a:	681a      	ldr	r2, [r3, #0]
 800184c:	492c      	ldr	r1, [pc, #176]	; (8001900 <HAL_GPIO_Init+0x2d0>)
 800184e:	69bb      	ldr	r3, [r7, #24]
 8001850:	4313      	orrs	r3, r2
 8001852:	600b      	str	r3, [r1, #0]
 8001854:	e006      	b.n	8001864 <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8001856:	4b2a      	ldr	r3, [pc, #168]	; (8001900 <HAL_GPIO_Init+0x2d0>)
 8001858:	681a      	ldr	r2, [r3, #0]
 800185a:	69bb      	ldr	r3, [r7, #24]
 800185c:	43db      	mvns	r3, r3
 800185e:	4928      	ldr	r1, [pc, #160]	; (8001900 <HAL_GPIO_Init+0x2d0>)
 8001860:	4013      	ands	r3, r2
 8001862:	600b      	str	r3, [r1, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001864:	683b      	ldr	r3, [r7, #0]
 8001866:	685b      	ldr	r3, [r3, #4]
 8001868:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800186c:	2b00      	cmp	r3, #0
 800186e:	d006      	beq.n	800187e <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8001870:	4b23      	ldr	r3, [pc, #140]	; (8001900 <HAL_GPIO_Init+0x2d0>)
 8001872:	685a      	ldr	r2, [r3, #4]
 8001874:	4922      	ldr	r1, [pc, #136]	; (8001900 <HAL_GPIO_Init+0x2d0>)
 8001876:	69bb      	ldr	r3, [r7, #24]
 8001878:	4313      	orrs	r3, r2
 800187a:	604b      	str	r3, [r1, #4]
 800187c:	e006      	b.n	800188c <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 800187e:	4b20      	ldr	r3, [pc, #128]	; (8001900 <HAL_GPIO_Init+0x2d0>)
 8001880:	685a      	ldr	r2, [r3, #4]
 8001882:	69bb      	ldr	r3, [r7, #24]
 8001884:	43db      	mvns	r3, r3
 8001886:	491e      	ldr	r1, [pc, #120]	; (8001900 <HAL_GPIO_Init+0x2d0>)
 8001888:	4013      	ands	r3, r2
 800188a:	604b      	str	r3, [r1, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 800188c:	683b      	ldr	r3, [r7, #0]
 800188e:	685b      	ldr	r3, [r3, #4]
 8001890:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001894:	2b00      	cmp	r3, #0
 8001896:	d006      	beq.n	80018a6 <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8001898:	4b19      	ldr	r3, [pc, #100]	; (8001900 <HAL_GPIO_Init+0x2d0>)
 800189a:	689a      	ldr	r2, [r3, #8]
 800189c:	4918      	ldr	r1, [pc, #96]	; (8001900 <HAL_GPIO_Init+0x2d0>)
 800189e:	69bb      	ldr	r3, [r7, #24]
 80018a0:	4313      	orrs	r3, r2
 80018a2:	608b      	str	r3, [r1, #8]
 80018a4:	e006      	b.n	80018b4 <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 80018a6:	4b16      	ldr	r3, [pc, #88]	; (8001900 <HAL_GPIO_Init+0x2d0>)
 80018a8:	689a      	ldr	r2, [r3, #8]
 80018aa:	69bb      	ldr	r3, [r7, #24]
 80018ac:	43db      	mvns	r3, r3
 80018ae:	4914      	ldr	r1, [pc, #80]	; (8001900 <HAL_GPIO_Init+0x2d0>)
 80018b0:	4013      	ands	r3, r2
 80018b2:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80018b4:	683b      	ldr	r3, [r7, #0]
 80018b6:	685b      	ldr	r3, [r3, #4]
 80018b8:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80018bc:	2b00      	cmp	r3, #0
 80018be:	d021      	beq.n	8001904 <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 80018c0:	4b0f      	ldr	r3, [pc, #60]	; (8001900 <HAL_GPIO_Init+0x2d0>)
 80018c2:	68da      	ldr	r2, [r3, #12]
 80018c4:	490e      	ldr	r1, [pc, #56]	; (8001900 <HAL_GPIO_Init+0x2d0>)
 80018c6:	69bb      	ldr	r3, [r7, #24]
 80018c8:	4313      	orrs	r3, r2
 80018ca:	60cb      	str	r3, [r1, #12]
 80018cc:	e021      	b.n	8001912 <HAL_GPIO_Init+0x2e2>
 80018ce:	bf00      	nop
 80018d0:	10320000 	.word	0x10320000
 80018d4:	10310000 	.word	0x10310000
 80018d8:	10220000 	.word	0x10220000
 80018dc:	10210000 	.word	0x10210000
 80018e0:	10120000 	.word	0x10120000
 80018e4:	10110000 	.word	0x10110000
 80018e8:	40021000 	.word	0x40021000
 80018ec:	40010000 	.word	0x40010000
 80018f0:	40010800 	.word	0x40010800
 80018f4:	40010c00 	.word	0x40010c00
 80018f8:	40011000 	.word	0x40011000
 80018fc:	40011400 	.word	0x40011400
 8001900:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8001904:	4b0b      	ldr	r3, [pc, #44]	; (8001934 <HAL_GPIO_Init+0x304>)
 8001906:	68da      	ldr	r2, [r3, #12]
 8001908:	69bb      	ldr	r3, [r7, #24]
 800190a:	43db      	mvns	r3, r3
 800190c:	4909      	ldr	r1, [pc, #36]	; (8001934 <HAL_GPIO_Init+0x304>)
 800190e:	4013      	ands	r3, r2
 8001910:	60cb      	str	r3, [r1, #12]
        }
      }
    }

	position++;
 8001912:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001914:	3301      	adds	r3, #1
 8001916:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001918:	683b      	ldr	r3, [r7, #0]
 800191a:	681a      	ldr	r2, [r3, #0]
 800191c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800191e:	fa22 f303 	lsr.w	r3, r2, r3
 8001922:	2b00      	cmp	r3, #0
 8001924:	f47f ae8e 	bne.w	8001644 <HAL_GPIO_Init+0x14>
  }
}
 8001928:	bf00      	nop
 800192a:	bf00      	nop
 800192c:	372c      	adds	r7, #44	; 0x2c
 800192e:	46bd      	mov	sp, r7
 8001930:	bc80      	pop	{r7}
 8001932:	4770      	bx	lr
 8001934:	40010400 	.word	0x40010400

08001938 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001938:	b480      	push	{r7}
 800193a:	b083      	sub	sp, #12
 800193c:	af00      	add	r7, sp, #0
 800193e:	6078      	str	r0, [r7, #4]
 8001940:	460b      	mov	r3, r1
 8001942:	807b      	strh	r3, [r7, #2]
 8001944:	4613      	mov	r3, r2
 8001946:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8001948:	787b      	ldrb	r3, [r7, #1]
 800194a:	2b00      	cmp	r3, #0
 800194c:	d003      	beq.n	8001956 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800194e:	887a      	ldrh	r2, [r7, #2]
 8001950:	687b      	ldr	r3, [r7, #4]
 8001952:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8001954:	e003      	b.n	800195e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8001956:	887b      	ldrh	r3, [r7, #2]
 8001958:	041a      	lsls	r2, r3, #16
 800195a:	687b      	ldr	r3, [r7, #4]
 800195c:	611a      	str	r2, [r3, #16]
}
 800195e:	bf00      	nop
 8001960:	370c      	adds	r7, #12
 8001962:	46bd      	mov	sp, r7
 8001964:	bc80      	pop	{r7}
 8001966:	4770      	bx	lr

08001968 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001968:	b580      	push	{r7, lr}
 800196a:	b086      	sub	sp, #24
 800196c:	af00      	add	r7, sp, #0
 800196e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8001970:	687b      	ldr	r3, [r7, #4]
 8001972:	2b00      	cmp	r3, #0
 8001974:	d101      	bne.n	800197a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001976:	2301      	movs	r3, #1
 8001978:	e272      	b.n	8001e60 <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800197a:	687b      	ldr	r3, [r7, #4]
 800197c:	681b      	ldr	r3, [r3, #0]
 800197e:	f003 0301 	and.w	r3, r3, #1
 8001982:	2b00      	cmp	r3, #0
 8001984:	f000 8087 	beq.w	8001a96 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8001988:	4b92      	ldr	r3, [pc, #584]	; (8001bd4 <HAL_RCC_OscConfig+0x26c>)
 800198a:	685b      	ldr	r3, [r3, #4]
 800198c:	f003 030c 	and.w	r3, r3, #12
 8001990:	2b04      	cmp	r3, #4
 8001992:	d00c      	beq.n	80019ae <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8001994:	4b8f      	ldr	r3, [pc, #572]	; (8001bd4 <HAL_RCC_OscConfig+0x26c>)
 8001996:	685b      	ldr	r3, [r3, #4]
 8001998:	f003 030c 	and.w	r3, r3, #12
 800199c:	2b08      	cmp	r3, #8
 800199e:	d112      	bne.n	80019c6 <HAL_RCC_OscConfig+0x5e>
 80019a0:	4b8c      	ldr	r3, [pc, #560]	; (8001bd4 <HAL_RCC_OscConfig+0x26c>)
 80019a2:	685b      	ldr	r3, [r3, #4]
 80019a4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80019a8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80019ac:	d10b      	bne.n	80019c6 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80019ae:	4b89      	ldr	r3, [pc, #548]	; (8001bd4 <HAL_RCC_OscConfig+0x26c>)
 80019b0:	681b      	ldr	r3, [r3, #0]
 80019b2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80019b6:	2b00      	cmp	r3, #0
 80019b8:	d06c      	beq.n	8001a94 <HAL_RCC_OscConfig+0x12c>
 80019ba:	687b      	ldr	r3, [r7, #4]
 80019bc:	685b      	ldr	r3, [r3, #4]
 80019be:	2b00      	cmp	r3, #0
 80019c0:	d168      	bne.n	8001a94 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 80019c2:	2301      	movs	r3, #1
 80019c4:	e24c      	b.n	8001e60 <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80019c6:	687b      	ldr	r3, [r7, #4]
 80019c8:	685b      	ldr	r3, [r3, #4]
 80019ca:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80019ce:	d106      	bne.n	80019de <HAL_RCC_OscConfig+0x76>
 80019d0:	4b80      	ldr	r3, [pc, #512]	; (8001bd4 <HAL_RCC_OscConfig+0x26c>)
 80019d2:	681b      	ldr	r3, [r3, #0]
 80019d4:	4a7f      	ldr	r2, [pc, #508]	; (8001bd4 <HAL_RCC_OscConfig+0x26c>)
 80019d6:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80019da:	6013      	str	r3, [r2, #0]
 80019dc:	e02e      	b.n	8001a3c <HAL_RCC_OscConfig+0xd4>
 80019de:	687b      	ldr	r3, [r7, #4]
 80019e0:	685b      	ldr	r3, [r3, #4]
 80019e2:	2b00      	cmp	r3, #0
 80019e4:	d10c      	bne.n	8001a00 <HAL_RCC_OscConfig+0x98>
 80019e6:	4b7b      	ldr	r3, [pc, #492]	; (8001bd4 <HAL_RCC_OscConfig+0x26c>)
 80019e8:	681b      	ldr	r3, [r3, #0]
 80019ea:	4a7a      	ldr	r2, [pc, #488]	; (8001bd4 <HAL_RCC_OscConfig+0x26c>)
 80019ec:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80019f0:	6013      	str	r3, [r2, #0]
 80019f2:	4b78      	ldr	r3, [pc, #480]	; (8001bd4 <HAL_RCC_OscConfig+0x26c>)
 80019f4:	681b      	ldr	r3, [r3, #0]
 80019f6:	4a77      	ldr	r2, [pc, #476]	; (8001bd4 <HAL_RCC_OscConfig+0x26c>)
 80019f8:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80019fc:	6013      	str	r3, [r2, #0]
 80019fe:	e01d      	b.n	8001a3c <HAL_RCC_OscConfig+0xd4>
 8001a00:	687b      	ldr	r3, [r7, #4]
 8001a02:	685b      	ldr	r3, [r3, #4]
 8001a04:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001a08:	d10c      	bne.n	8001a24 <HAL_RCC_OscConfig+0xbc>
 8001a0a:	4b72      	ldr	r3, [pc, #456]	; (8001bd4 <HAL_RCC_OscConfig+0x26c>)
 8001a0c:	681b      	ldr	r3, [r3, #0]
 8001a0e:	4a71      	ldr	r2, [pc, #452]	; (8001bd4 <HAL_RCC_OscConfig+0x26c>)
 8001a10:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001a14:	6013      	str	r3, [r2, #0]
 8001a16:	4b6f      	ldr	r3, [pc, #444]	; (8001bd4 <HAL_RCC_OscConfig+0x26c>)
 8001a18:	681b      	ldr	r3, [r3, #0]
 8001a1a:	4a6e      	ldr	r2, [pc, #440]	; (8001bd4 <HAL_RCC_OscConfig+0x26c>)
 8001a1c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001a20:	6013      	str	r3, [r2, #0]
 8001a22:	e00b      	b.n	8001a3c <HAL_RCC_OscConfig+0xd4>
 8001a24:	4b6b      	ldr	r3, [pc, #428]	; (8001bd4 <HAL_RCC_OscConfig+0x26c>)
 8001a26:	681b      	ldr	r3, [r3, #0]
 8001a28:	4a6a      	ldr	r2, [pc, #424]	; (8001bd4 <HAL_RCC_OscConfig+0x26c>)
 8001a2a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001a2e:	6013      	str	r3, [r2, #0]
 8001a30:	4b68      	ldr	r3, [pc, #416]	; (8001bd4 <HAL_RCC_OscConfig+0x26c>)
 8001a32:	681b      	ldr	r3, [r3, #0]
 8001a34:	4a67      	ldr	r2, [pc, #412]	; (8001bd4 <HAL_RCC_OscConfig+0x26c>)
 8001a36:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001a3a:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001a3c:	687b      	ldr	r3, [r7, #4]
 8001a3e:	685b      	ldr	r3, [r3, #4]
 8001a40:	2b00      	cmp	r3, #0
 8001a42:	d013      	beq.n	8001a6c <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001a44:	f7ff fcb8 	bl	80013b8 <HAL_GetTick>
 8001a48:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001a4a:	e008      	b.n	8001a5e <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001a4c:	f7ff fcb4 	bl	80013b8 <HAL_GetTick>
 8001a50:	4602      	mov	r2, r0
 8001a52:	693b      	ldr	r3, [r7, #16]
 8001a54:	1ad3      	subs	r3, r2, r3
 8001a56:	2b64      	cmp	r3, #100	; 0x64
 8001a58:	d901      	bls.n	8001a5e <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8001a5a:	2303      	movs	r3, #3
 8001a5c:	e200      	b.n	8001e60 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001a5e:	4b5d      	ldr	r3, [pc, #372]	; (8001bd4 <HAL_RCC_OscConfig+0x26c>)
 8001a60:	681b      	ldr	r3, [r3, #0]
 8001a62:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001a66:	2b00      	cmp	r3, #0
 8001a68:	d0f0      	beq.n	8001a4c <HAL_RCC_OscConfig+0xe4>
 8001a6a:	e014      	b.n	8001a96 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001a6c:	f7ff fca4 	bl	80013b8 <HAL_GetTick>
 8001a70:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001a72:	e008      	b.n	8001a86 <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001a74:	f7ff fca0 	bl	80013b8 <HAL_GetTick>
 8001a78:	4602      	mov	r2, r0
 8001a7a:	693b      	ldr	r3, [r7, #16]
 8001a7c:	1ad3      	subs	r3, r2, r3
 8001a7e:	2b64      	cmp	r3, #100	; 0x64
 8001a80:	d901      	bls.n	8001a86 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8001a82:	2303      	movs	r3, #3
 8001a84:	e1ec      	b.n	8001e60 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001a86:	4b53      	ldr	r3, [pc, #332]	; (8001bd4 <HAL_RCC_OscConfig+0x26c>)
 8001a88:	681b      	ldr	r3, [r3, #0]
 8001a8a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001a8e:	2b00      	cmp	r3, #0
 8001a90:	d1f0      	bne.n	8001a74 <HAL_RCC_OscConfig+0x10c>
 8001a92:	e000      	b.n	8001a96 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001a94:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001a96:	687b      	ldr	r3, [r7, #4]
 8001a98:	681b      	ldr	r3, [r3, #0]
 8001a9a:	f003 0302 	and.w	r3, r3, #2
 8001a9e:	2b00      	cmp	r3, #0
 8001aa0:	d063      	beq.n	8001b6a <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8001aa2:	4b4c      	ldr	r3, [pc, #304]	; (8001bd4 <HAL_RCC_OscConfig+0x26c>)
 8001aa4:	685b      	ldr	r3, [r3, #4]
 8001aa6:	f003 030c 	and.w	r3, r3, #12
 8001aaa:	2b00      	cmp	r3, #0
 8001aac:	d00b      	beq.n	8001ac6 <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8001aae:	4b49      	ldr	r3, [pc, #292]	; (8001bd4 <HAL_RCC_OscConfig+0x26c>)
 8001ab0:	685b      	ldr	r3, [r3, #4]
 8001ab2:	f003 030c 	and.w	r3, r3, #12
 8001ab6:	2b08      	cmp	r3, #8
 8001ab8:	d11c      	bne.n	8001af4 <HAL_RCC_OscConfig+0x18c>
 8001aba:	4b46      	ldr	r3, [pc, #280]	; (8001bd4 <HAL_RCC_OscConfig+0x26c>)
 8001abc:	685b      	ldr	r3, [r3, #4]
 8001abe:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001ac2:	2b00      	cmp	r3, #0
 8001ac4:	d116      	bne.n	8001af4 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001ac6:	4b43      	ldr	r3, [pc, #268]	; (8001bd4 <HAL_RCC_OscConfig+0x26c>)
 8001ac8:	681b      	ldr	r3, [r3, #0]
 8001aca:	f003 0302 	and.w	r3, r3, #2
 8001ace:	2b00      	cmp	r3, #0
 8001ad0:	d005      	beq.n	8001ade <HAL_RCC_OscConfig+0x176>
 8001ad2:	687b      	ldr	r3, [r7, #4]
 8001ad4:	691b      	ldr	r3, [r3, #16]
 8001ad6:	2b01      	cmp	r3, #1
 8001ad8:	d001      	beq.n	8001ade <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8001ada:	2301      	movs	r3, #1
 8001adc:	e1c0      	b.n	8001e60 <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001ade:	4b3d      	ldr	r3, [pc, #244]	; (8001bd4 <HAL_RCC_OscConfig+0x26c>)
 8001ae0:	681b      	ldr	r3, [r3, #0]
 8001ae2:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001ae6:	687b      	ldr	r3, [r7, #4]
 8001ae8:	695b      	ldr	r3, [r3, #20]
 8001aea:	00db      	lsls	r3, r3, #3
 8001aec:	4939      	ldr	r1, [pc, #228]	; (8001bd4 <HAL_RCC_OscConfig+0x26c>)
 8001aee:	4313      	orrs	r3, r2
 8001af0:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001af2:	e03a      	b.n	8001b6a <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001af4:	687b      	ldr	r3, [r7, #4]
 8001af6:	691b      	ldr	r3, [r3, #16]
 8001af8:	2b00      	cmp	r3, #0
 8001afa:	d020      	beq.n	8001b3e <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001afc:	4b36      	ldr	r3, [pc, #216]	; (8001bd8 <HAL_RCC_OscConfig+0x270>)
 8001afe:	2201      	movs	r2, #1
 8001b00:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001b02:	f7ff fc59 	bl	80013b8 <HAL_GetTick>
 8001b06:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001b08:	e008      	b.n	8001b1c <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001b0a:	f7ff fc55 	bl	80013b8 <HAL_GetTick>
 8001b0e:	4602      	mov	r2, r0
 8001b10:	693b      	ldr	r3, [r7, #16]
 8001b12:	1ad3      	subs	r3, r2, r3
 8001b14:	2b02      	cmp	r3, #2
 8001b16:	d901      	bls.n	8001b1c <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8001b18:	2303      	movs	r3, #3
 8001b1a:	e1a1      	b.n	8001e60 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001b1c:	4b2d      	ldr	r3, [pc, #180]	; (8001bd4 <HAL_RCC_OscConfig+0x26c>)
 8001b1e:	681b      	ldr	r3, [r3, #0]
 8001b20:	f003 0302 	and.w	r3, r3, #2
 8001b24:	2b00      	cmp	r3, #0
 8001b26:	d0f0      	beq.n	8001b0a <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001b28:	4b2a      	ldr	r3, [pc, #168]	; (8001bd4 <HAL_RCC_OscConfig+0x26c>)
 8001b2a:	681b      	ldr	r3, [r3, #0]
 8001b2c:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001b30:	687b      	ldr	r3, [r7, #4]
 8001b32:	695b      	ldr	r3, [r3, #20]
 8001b34:	00db      	lsls	r3, r3, #3
 8001b36:	4927      	ldr	r1, [pc, #156]	; (8001bd4 <HAL_RCC_OscConfig+0x26c>)
 8001b38:	4313      	orrs	r3, r2
 8001b3a:	600b      	str	r3, [r1, #0]
 8001b3c:	e015      	b.n	8001b6a <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001b3e:	4b26      	ldr	r3, [pc, #152]	; (8001bd8 <HAL_RCC_OscConfig+0x270>)
 8001b40:	2200      	movs	r2, #0
 8001b42:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001b44:	f7ff fc38 	bl	80013b8 <HAL_GetTick>
 8001b48:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001b4a:	e008      	b.n	8001b5e <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001b4c:	f7ff fc34 	bl	80013b8 <HAL_GetTick>
 8001b50:	4602      	mov	r2, r0
 8001b52:	693b      	ldr	r3, [r7, #16]
 8001b54:	1ad3      	subs	r3, r2, r3
 8001b56:	2b02      	cmp	r3, #2
 8001b58:	d901      	bls.n	8001b5e <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8001b5a:	2303      	movs	r3, #3
 8001b5c:	e180      	b.n	8001e60 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001b5e:	4b1d      	ldr	r3, [pc, #116]	; (8001bd4 <HAL_RCC_OscConfig+0x26c>)
 8001b60:	681b      	ldr	r3, [r3, #0]
 8001b62:	f003 0302 	and.w	r3, r3, #2
 8001b66:	2b00      	cmp	r3, #0
 8001b68:	d1f0      	bne.n	8001b4c <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001b6a:	687b      	ldr	r3, [r7, #4]
 8001b6c:	681b      	ldr	r3, [r3, #0]
 8001b6e:	f003 0308 	and.w	r3, r3, #8
 8001b72:	2b00      	cmp	r3, #0
 8001b74:	d03a      	beq.n	8001bec <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001b76:	687b      	ldr	r3, [r7, #4]
 8001b78:	699b      	ldr	r3, [r3, #24]
 8001b7a:	2b00      	cmp	r3, #0
 8001b7c:	d019      	beq.n	8001bb2 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001b7e:	4b17      	ldr	r3, [pc, #92]	; (8001bdc <HAL_RCC_OscConfig+0x274>)
 8001b80:	2201      	movs	r2, #1
 8001b82:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001b84:	f7ff fc18 	bl	80013b8 <HAL_GetTick>
 8001b88:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001b8a:	e008      	b.n	8001b9e <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001b8c:	f7ff fc14 	bl	80013b8 <HAL_GetTick>
 8001b90:	4602      	mov	r2, r0
 8001b92:	693b      	ldr	r3, [r7, #16]
 8001b94:	1ad3      	subs	r3, r2, r3
 8001b96:	2b02      	cmp	r3, #2
 8001b98:	d901      	bls.n	8001b9e <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8001b9a:	2303      	movs	r3, #3
 8001b9c:	e160      	b.n	8001e60 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001b9e:	4b0d      	ldr	r3, [pc, #52]	; (8001bd4 <HAL_RCC_OscConfig+0x26c>)
 8001ba0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001ba2:	f003 0302 	and.w	r3, r3, #2
 8001ba6:	2b00      	cmp	r3, #0
 8001ba8:	d0f0      	beq.n	8001b8c <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8001baa:	2001      	movs	r0, #1
 8001bac:	f000 faa6 	bl	80020fc <RCC_Delay>
 8001bb0:	e01c      	b.n	8001bec <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001bb2:	4b0a      	ldr	r3, [pc, #40]	; (8001bdc <HAL_RCC_OscConfig+0x274>)
 8001bb4:	2200      	movs	r2, #0
 8001bb6:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001bb8:	f7ff fbfe 	bl	80013b8 <HAL_GetTick>
 8001bbc:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001bbe:	e00f      	b.n	8001be0 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001bc0:	f7ff fbfa 	bl	80013b8 <HAL_GetTick>
 8001bc4:	4602      	mov	r2, r0
 8001bc6:	693b      	ldr	r3, [r7, #16]
 8001bc8:	1ad3      	subs	r3, r2, r3
 8001bca:	2b02      	cmp	r3, #2
 8001bcc:	d908      	bls.n	8001be0 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8001bce:	2303      	movs	r3, #3
 8001bd0:	e146      	b.n	8001e60 <HAL_RCC_OscConfig+0x4f8>
 8001bd2:	bf00      	nop
 8001bd4:	40021000 	.word	0x40021000
 8001bd8:	42420000 	.word	0x42420000
 8001bdc:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001be0:	4b92      	ldr	r3, [pc, #584]	; (8001e2c <HAL_RCC_OscConfig+0x4c4>)
 8001be2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001be4:	f003 0302 	and.w	r3, r3, #2
 8001be8:	2b00      	cmp	r3, #0
 8001bea:	d1e9      	bne.n	8001bc0 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001bec:	687b      	ldr	r3, [r7, #4]
 8001bee:	681b      	ldr	r3, [r3, #0]
 8001bf0:	f003 0304 	and.w	r3, r3, #4
 8001bf4:	2b00      	cmp	r3, #0
 8001bf6:	f000 80a6 	beq.w	8001d46 <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001bfa:	2300      	movs	r3, #0
 8001bfc:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001bfe:	4b8b      	ldr	r3, [pc, #556]	; (8001e2c <HAL_RCC_OscConfig+0x4c4>)
 8001c00:	69db      	ldr	r3, [r3, #28]
 8001c02:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001c06:	2b00      	cmp	r3, #0
 8001c08:	d10d      	bne.n	8001c26 <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001c0a:	4b88      	ldr	r3, [pc, #544]	; (8001e2c <HAL_RCC_OscConfig+0x4c4>)
 8001c0c:	69db      	ldr	r3, [r3, #28]
 8001c0e:	4a87      	ldr	r2, [pc, #540]	; (8001e2c <HAL_RCC_OscConfig+0x4c4>)
 8001c10:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001c14:	61d3      	str	r3, [r2, #28]
 8001c16:	4b85      	ldr	r3, [pc, #532]	; (8001e2c <HAL_RCC_OscConfig+0x4c4>)
 8001c18:	69db      	ldr	r3, [r3, #28]
 8001c1a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001c1e:	60bb      	str	r3, [r7, #8]
 8001c20:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001c22:	2301      	movs	r3, #1
 8001c24:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001c26:	4b82      	ldr	r3, [pc, #520]	; (8001e30 <HAL_RCC_OscConfig+0x4c8>)
 8001c28:	681b      	ldr	r3, [r3, #0]
 8001c2a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001c2e:	2b00      	cmp	r3, #0
 8001c30:	d118      	bne.n	8001c64 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001c32:	4b7f      	ldr	r3, [pc, #508]	; (8001e30 <HAL_RCC_OscConfig+0x4c8>)
 8001c34:	681b      	ldr	r3, [r3, #0]
 8001c36:	4a7e      	ldr	r2, [pc, #504]	; (8001e30 <HAL_RCC_OscConfig+0x4c8>)
 8001c38:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001c3c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001c3e:	f7ff fbbb 	bl	80013b8 <HAL_GetTick>
 8001c42:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001c44:	e008      	b.n	8001c58 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001c46:	f7ff fbb7 	bl	80013b8 <HAL_GetTick>
 8001c4a:	4602      	mov	r2, r0
 8001c4c:	693b      	ldr	r3, [r7, #16]
 8001c4e:	1ad3      	subs	r3, r2, r3
 8001c50:	2b64      	cmp	r3, #100	; 0x64
 8001c52:	d901      	bls.n	8001c58 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8001c54:	2303      	movs	r3, #3
 8001c56:	e103      	b.n	8001e60 <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001c58:	4b75      	ldr	r3, [pc, #468]	; (8001e30 <HAL_RCC_OscConfig+0x4c8>)
 8001c5a:	681b      	ldr	r3, [r3, #0]
 8001c5c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001c60:	2b00      	cmp	r3, #0
 8001c62:	d0f0      	beq.n	8001c46 <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001c64:	687b      	ldr	r3, [r7, #4]
 8001c66:	68db      	ldr	r3, [r3, #12]
 8001c68:	2b01      	cmp	r3, #1
 8001c6a:	d106      	bne.n	8001c7a <HAL_RCC_OscConfig+0x312>
 8001c6c:	4b6f      	ldr	r3, [pc, #444]	; (8001e2c <HAL_RCC_OscConfig+0x4c4>)
 8001c6e:	6a1b      	ldr	r3, [r3, #32]
 8001c70:	4a6e      	ldr	r2, [pc, #440]	; (8001e2c <HAL_RCC_OscConfig+0x4c4>)
 8001c72:	f043 0301 	orr.w	r3, r3, #1
 8001c76:	6213      	str	r3, [r2, #32]
 8001c78:	e02d      	b.n	8001cd6 <HAL_RCC_OscConfig+0x36e>
 8001c7a:	687b      	ldr	r3, [r7, #4]
 8001c7c:	68db      	ldr	r3, [r3, #12]
 8001c7e:	2b00      	cmp	r3, #0
 8001c80:	d10c      	bne.n	8001c9c <HAL_RCC_OscConfig+0x334>
 8001c82:	4b6a      	ldr	r3, [pc, #424]	; (8001e2c <HAL_RCC_OscConfig+0x4c4>)
 8001c84:	6a1b      	ldr	r3, [r3, #32]
 8001c86:	4a69      	ldr	r2, [pc, #420]	; (8001e2c <HAL_RCC_OscConfig+0x4c4>)
 8001c88:	f023 0301 	bic.w	r3, r3, #1
 8001c8c:	6213      	str	r3, [r2, #32]
 8001c8e:	4b67      	ldr	r3, [pc, #412]	; (8001e2c <HAL_RCC_OscConfig+0x4c4>)
 8001c90:	6a1b      	ldr	r3, [r3, #32]
 8001c92:	4a66      	ldr	r2, [pc, #408]	; (8001e2c <HAL_RCC_OscConfig+0x4c4>)
 8001c94:	f023 0304 	bic.w	r3, r3, #4
 8001c98:	6213      	str	r3, [r2, #32]
 8001c9a:	e01c      	b.n	8001cd6 <HAL_RCC_OscConfig+0x36e>
 8001c9c:	687b      	ldr	r3, [r7, #4]
 8001c9e:	68db      	ldr	r3, [r3, #12]
 8001ca0:	2b05      	cmp	r3, #5
 8001ca2:	d10c      	bne.n	8001cbe <HAL_RCC_OscConfig+0x356>
 8001ca4:	4b61      	ldr	r3, [pc, #388]	; (8001e2c <HAL_RCC_OscConfig+0x4c4>)
 8001ca6:	6a1b      	ldr	r3, [r3, #32]
 8001ca8:	4a60      	ldr	r2, [pc, #384]	; (8001e2c <HAL_RCC_OscConfig+0x4c4>)
 8001caa:	f043 0304 	orr.w	r3, r3, #4
 8001cae:	6213      	str	r3, [r2, #32]
 8001cb0:	4b5e      	ldr	r3, [pc, #376]	; (8001e2c <HAL_RCC_OscConfig+0x4c4>)
 8001cb2:	6a1b      	ldr	r3, [r3, #32]
 8001cb4:	4a5d      	ldr	r2, [pc, #372]	; (8001e2c <HAL_RCC_OscConfig+0x4c4>)
 8001cb6:	f043 0301 	orr.w	r3, r3, #1
 8001cba:	6213      	str	r3, [r2, #32]
 8001cbc:	e00b      	b.n	8001cd6 <HAL_RCC_OscConfig+0x36e>
 8001cbe:	4b5b      	ldr	r3, [pc, #364]	; (8001e2c <HAL_RCC_OscConfig+0x4c4>)
 8001cc0:	6a1b      	ldr	r3, [r3, #32]
 8001cc2:	4a5a      	ldr	r2, [pc, #360]	; (8001e2c <HAL_RCC_OscConfig+0x4c4>)
 8001cc4:	f023 0301 	bic.w	r3, r3, #1
 8001cc8:	6213      	str	r3, [r2, #32]
 8001cca:	4b58      	ldr	r3, [pc, #352]	; (8001e2c <HAL_RCC_OscConfig+0x4c4>)
 8001ccc:	6a1b      	ldr	r3, [r3, #32]
 8001cce:	4a57      	ldr	r2, [pc, #348]	; (8001e2c <HAL_RCC_OscConfig+0x4c4>)
 8001cd0:	f023 0304 	bic.w	r3, r3, #4
 8001cd4:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001cd6:	687b      	ldr	r3, [r7, #4]
 8001cd8:	68db      	ldr	r3, [r3, #12]
 8001cda:	2b00      	cmp	r3, #0
 8001cdc:	d015      	beq.n	8001d0a <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001cde:	f7ff fb6b 	bl	80013b8 <HAL_GetTick>
 8001ce2:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001ce4:	e00a      	b.n	8001cfc <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001ce6:	f7ff fb67 	bl	80013b8 <HAL_GetTick>
 8001cea:	4602      	mov	r2, r0
 8001cec:	693b      	ldr	r3, [r7, #16]
 8001cee:	1ad3      	subs	r3, r2, r3
 8001cf0:	f241 3288 	movw	r2, #5000	; 0x1388
 8001cf4:	4293      	cmp	r3, r2
 8001cf6:	d901      	bls.n	8001cfc <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8001cf8:	2303      	movs	r3, #3
 8001cfa:	e0b1      	b.n	8001e60 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001cfc:	4b4b      	ldr	r3, [pc, #300]	; (8001e2c <HAL_RCC_OscConfig+0x4c4>)
 8001cfe:	6a1b      	ldr	r3, [r3, #32]
 8001d00:	f003 0302 	and.w	r3, r3, #2
 8001d04:	2b00      	cmp	r3, #0
 8001d06:	d0ee      	beq.n	8001ce6 <HAL_RCC_OscConfig+0x37e>
 8001d08:	e014      	b.n	8001d34 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001d0a:	f7ff fb55 	bl	80013b8 <HAL_GetTick>
 8001d0e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001d10:	e00a      	b.n	8001d28 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001d12:	f7ff fb51 	bl	80013b8 <HAL_GetTick>
 8001d16:	4602      	mov	r2, r0
 8001d18:	693b      	ldr	r3, [r7, #16]
 8001d1a:	1ad3      	subs	r3, r2, r3
 8001d1c:	f241 3288 	movw	r2, #5000	; 0x1388
 8001d20:	4293      	cmp	r3, r2
 8001d22:	d901      	bls.n	8001d28 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8001d24:	2303      	movs	r3, #3
 8001d26:	e09b      	b.n	8001e60 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001d28:	4b40      	ldr	r3, [pc, #256]	; (8001e2c <HAL_RCC_OscConfig+0x4c4>)
 8001d2a:	6a1b      	ldr	r3, [r3, #32]
 8001d2c:	f003 0302 	and.w	r3, r3, #2
 8001d30:	2b00      	cmp	r3, #0
 8001d32:	d1ee      	bne.n	8001d12 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8001d34:	7dfb      	ldrb	r3, [r7, #23]
 8001d36:	2b01      	cmp	r3, #1
 8001d38:	d105      	bne.n	8001d46 <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001d3a:	4b3c      	ldr	r3, [pc, #240]	; (8001e2c <HAL_RCC_OscConfig+0x4c4>)
 8001d3c:	69db      	ldr	r3, [r3, #28]
 8001d3e:	4a3b      	ldr	r2, [pc, #236]	; (8001e2c <HAL_RCC_OscConfig+0x4c4>)
 8001d40:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001d44:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001d46:	687b      	ldr	r3, [r7, #4]
 8001d48:	69db      	ldr	r3, [r3, #28]
 8001d4a:	2b00      	cmp	r3, #0
 8001d4c:	f000 8087 	beq.w	8001e5e <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001d50:	4b36      	ldr	r3, [pc, #216]	; (8001e2c <HAL_RCC_OscConfig+0x4c4>)
 8001d52:	685b      	ldr	r3, [r3, #4]
 8001d54:	f003 030c 	and.w	r3, r3, #12
 8001d58:	2b08      	cmp	r3, #8
 8001d5a:	d061      	beq.n	8001e20 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001d5c:	687b      	ldr	r3, [r7, #4]
 8001d5e:	69db      	ldr	r3, [r3, #28]
 8001d60:	2b02      	cmp	r3, #2
 8001d62:	d146      	bne.n	8001df2 <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001d64:	4b33      	ldr	r3, [pc, #204]	; (8001e34 <HAL_RCC_OscConfig+0x4cc>)
 8001d66:	2200      	movs	r2, #0
 8001d68:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001d6a:	f7ff fb25 	bl	80013b8 <HAL_GetTick>
 8001d6e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001d70:	e008      	b.n	8001d84 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001d72:	f7ff fb21 	bl	80013b8 <HAL_GetTick>
 8001d76:	4602      	mov	r2, r0
 8001d78:	693b      	ldr	r3, [r7, #16]
 8001d7a:	1ad3      	subs	r3, r2, r3
 8001d7c:	2b02      	cmp	r3, #2
 8001d7e:	d901      	bls.n	8001d84 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8001d80:	2303      	movs	r3, #3
 8001d82:	e06d      	b.n	8001e60 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001d84:	4b29      	ldr	r3, [pc, #164]	; (8001e2c <HAL_RCC_OscConfig+0x4c4>)
 8001d86:	681b      	ldr	r3, [r3, #0]
 8001d88:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001d8c:	2b00      	cmp	r3, #0
 8001d8e:	d1f0      	bne.n	8001d72 <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8001d90:	687b      	ldr	r3, [r7, #4]
 8001d92:	6a1b      	ldr	r3, [r3, #32]
 8001d94:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001d98:	d108      	bne.n	8001dac <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8001d9a:	4b24      	ldr	r3, [pc, #144]	; (8001e2c <HAL_RCC_OscConfig+0x4c4>)
 8001d9c:	685b      	ldr	r3, [r3, #4]
 8001d9e:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 8001da2:	687b      	ldr	r3, [r7, #4]
 8001da4:	689b      	ldr	r3, [r3, #8]
 8001da6:	4921      	ldr	r1, [pc, #132]	; (8001e2c <HAL_RCC_OscConfig+0x4c4>)
 8001da8:	4313      	orrs	r3, r2
 8001daa:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001dac:	4b1f      	ldr	r3, [pc, #124]	; (8001e2c <HAL_RCC_OscConfig+0x4c4>)
 8001dae:	685b      	ldr	r3, [r3, #4]
 8001db0:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8001db4:	687b      	ldr	r3, [r7, #4]
 8001db6:	6a19      	ldr	r1, [r3, #32]
 8001db8:	687b      	ldr	r3, [r7, #4]
 8001dba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001dbc:	430b      	orrs	r3, r1
 8001dbe:	491b      	ldr	r1, [pc, #108]	; (8001e2c <HAL_RCC_OscConfig+0x4c4>)
 8001dc0:	4313      	orrs	r3, r2
 8001dc2:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001dc4:	4b1b      	ldr	r3, [pc, #108]	; (8001e34 <HAL_RCC_OscConfig+0x4cc>)
 8001dc6:	2201      	movs	r2, #1
 8001dc8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001dca:	f7ff faf5 	bl	80013b8 <HAL_GetTick>
 8001dce:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001dd0:	e008      	b.n	8001de4 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001dd2:	f7ff faf1 	bl	80013b8 <HAL_GetTick>
 8001dd6:	4602      	mov	r2, r0
 8001dd8:	693b      	ldr	r3, [r7, #16]
 8001dda:	1ad3      	subs	r3, r2, r3
 8001ddc:	2b02      	cmp	r3, #2
 8001dde:	d901      	bls.n	8001de4 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8001de0:	2303      	movs	r3, #3
 8001de2:	e03d      	b.n	8001e60 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001de4:	4b11      	ldr	r3, [pc, #68]	; (8001e2c <HAL_RCC_OscConfig+0x4c4>)
 8001de6:	681b      	ldr	r3, [r3, #0]
 8001de8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001dec:	2b00      	cmp	r3, #0
 8001dee:	d0f0      	beq.n	8001dd2 <HAL_RCC_OscConfig+0x46a>
 8001df0:	e035      	b.n	8001e5e <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001df2:	4b10      	ldr	r3, [pc, #64]	; (8001e34 <HAL_RCC_OscConfig+0x4cc>)
 8001df4:	2200      	movs	r2, #0
 8001df6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001df8:	f7ff fade 	bl	80013b8 <HAL_GetTick>
 8001dfc:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001dfe:	e008      	b.n	8001e12 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001e00:	f7ff fada 	bl	80013b8 <HAL_GetTick>
 8001e04:	4602      	mov	r2, r0
 8001e06:	693b      	ldr	r3, [r7, #16]
 8001e08:	1ad3      	subs	r3, r2, r3
 8001e0a:	2b02      	cmp	r3, #2
 8001e0c:	d901      	bls.n	8001e12 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8001e0e:	2303      	movs	r3, #3
 8001e10:	e026      	b.n	8001e60 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001e12:	4b06      	ldr	r3, [pc, #24]	; (8001e2c <HAL_RCC_OscConfig+0x4c4>)
 8001e14:	681b      	ldr	r3, [r3, #0]
 8001e16:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001e1a:	2b00      	cmp	r3, #0
 8001e1c:	d1f0      	bne.n	8001e00 <HAL_RCC_OscConfig+0x498>
 8001e1e:	e01e      	b.n	8001e5e <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001e20:	687b      	ldr	r3, [r7, #4]
 8001e22:	69db      	ldr	r3, [r3, #28]
 8001e24:	2b01      	cmp	r3, #1
 8001e26:	d107      	bne.n	8001e38 <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 8001e28:	2301      	movs	r3, #1
 8001e2a:	e019      	b.n	8001e60 <HAL_RCC_OscConfig+0x4f8>
 8001e2c:	40021000 	.word	0x40021000
 8001e30:	40007000 	.word	0x40007000
 8001e34:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8001e38:	4b0b      	ldr	r3, [pc, #44]	; (8001e68 <HAL_RCC_OscConfig+0x500>)
 8001e3a:	685b      	ldr	r3, [r3, #4]
 8001e3c:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001e3e:	68fb      	ldr	r3, [r7, #12]
 8001e40:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8001e44:	687b      	ldr	r3, [r7, #4]
 8001e46:	6a1b      	ldr	r3, [r3, #32]
 8001e48:	429a      	cmp	r2, r3
 8001e4a:	d106      	bne.n	8001e5a <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8001e4c:	68fb      	ldr	r3, [r7, #12]
 8001e4e:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8001e52:	687b      	ldr	r3, [r7, #4]
 8001e54:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001e56:	429a      	cmp	r2, r3
 8001e58:	d001      	beq.n	8001e5e <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 8001e5a:	2301      	movs	r3, #1
 8001e5c:	e000      	b.n	8001e60 <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 8001e5e:	2300      	movs	r3, #0
}
 8001e60:	4618      	mov	r0, r3
 8001e62:	3718      	adds	r7, #24
 8001e64:	46bd      	mov	sp, r7
 8001e66:	bd80      	pop	{r7, pc}
 8001e68:	40021000 	.word	0x40021000

08001e6c <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001e6c:	b580      	push	{r7, lr}
 8001e6e:	b084      	sub	sp, #16
 8001e70:	af00      	add	r7, sp, #0
 8001e72:	6078      	str	r0, [r7, #4]
 8001e74:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8001e76:	687b      	ldr	r3, [r7, #4]
 8001e78:	2b00      	cmp	r3, #0
 8001e7a:	d101      	bne.n	8001e80 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001e7c:	2301      	movs	r3, #1
 8001e7e:	e0d0      	b.n	8002022 <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8001e80:	4b6a      	ldr	r3, [pc, #424]	; (800202c <HAL_RCC_ClockConfig+0x1c0>)
 8001e82:	681b      	ldr	r3, [r3, #0]
 8001e84:	f003 0307 	and.w	r3, r3, #7
 8001e88:	683a      	ldr	r2, [r7, #0]
 8001e8a:	429a      	cmp	r2, r3
 8001e8c:	d910      	bls.n	8001eb0 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001e8e:	4b67      	ldr	r3, [pc, #412]	; (800202c <HAL_RCC_ClockConfig+0x1c0>)
 8001e90:	681b      	ldr	r3, [r3, #0]
 8001e92:	f023 0207 	bic.w	r2, r3, #7
 8001e96:	4965      	ldr	r1, [pc, #404]	; (800202c <HAL_RCC_ClockConfig+0x1c0>)
 8001e98:	683b      	ldr	r3, [r7, #0]
 8001e9a:	4313      	orrs	r3, r2
 8001e9c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001e9e:	4b63      	ldr	r3, [pc, #396]	; (800202c <HAL_RCC_ClockConfig+0x1c0>)
 8001ea0:	681b      	ldr	r3, [r3, #0]
 8001ea2:	f003 0307 	and.w	r3, r3, #7
 8001ea6:	683a      	ldr	r2, [r7, #0]
 8001ea8:	429a      	cmp	r2, r3
 8001eaa:	d001      	beq.n	8001eb0 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8001eac:	2301      	movs	r3, #1
 8001eae:	e0b8      	b.n	8002022 <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001eb0:	687b      	ldr	r3, [r7, #4]
 8001eb2:	681b      	ldr	r3, [r3, #0]
 8001eb4:	f003 0302 	and.w	r3, r3, #2
 8001eb8:	2b00      	cmp	r3, #0
 8001eba:	d020      	beq.n	8001efe <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001ebc:	687b      	ldr	r3, [r7, #4]
 8001ebe:	681b      	ldr	r3, [r3, #0]
 8001ec0:	f003 0304 	and.w	r3, r3, #4
 8001ec4:	2b00      	cmp	r3, #0
 8001ec6:	d005      	beq.n	8001ed4 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001ec8:	4b59      	ldr	r3, [pc, #356]	; (8002030 <HAL_RCC_ClockConfig+0x1c4>)
 8001eca:	685b      	ldr	r3, [r3, #4]
 8001ecc:	4a58      	ldr	r2, [pc, #352]	; (8002030 <HAL_RCC_ClockConfig+0x1c4>)
 8001ece:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8001ed2:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001ed4:	687b      	ldr	r3, [r7, #4]
 8001ed6:	681b      	ldr	r3, [r3, #0]
 8001ed8:	f003 0308 	and.w	r3, r3, #8
 8001edc:	2b00      	cmp	r3, #0
 8001ede:	d005      	beq.n	8001eec <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001ee0:	4b53      	ldr	r3, [pc, #332]	; (8002030 <HAL_RCC_ClockConfig+0x1c4>)
 8001ee2:	685b      	ldr	r3, [r3, #4]
 8001ee4:	4a52      	ldr	r2, [pc, #328]	; (8002030 <HAL_RCC_ClockConfig+0x1c4>)
 8001ee6:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 8001eea:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001eec:	4b50      	ldr	r3, [pc, #320]	; (8002030 <HAL_RCC_ClockConfig+0x1c4>)
 8001eee:	685b      	ldr	r3, [r3, #4]
 8001ef0:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001ef4:	687b      	ldr	r3, [r7, #4]
 8001ef6:	689b      	ldr	r3, [r3, #8]
 8001ef8:	494d      	ldr	r1, [pc, #308]	; (8002030 <HAL_RCC_ClockConfig+0x1c4>)
 8001efa:	4313      	orrs	r3, r2
 8001efc:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001efe:	687b      	ldr	r3, [r7, #4]
 8001f00:	681b      	ldr	r3, [r3, #0]
 8001f02:	f003 0301 	and.w	r3, r3, #1
 8001f06:	2b00      	cmp	r3, #0
 8001f08:	d040      	beq.n	8001f8c <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001f0a:	687b      	ldr	r3, [r7, #4]
 8001f0c:	685b      	ldr	r3, [r3, #4]
 8001f0e:	2b01      	cmp	r3, #1
 8001f10:	d107      	bne.n	8001f22 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001f12:	4b47      	ldr	r3, [pc, #284]	; (8002030 <HAL_RCC_ClockConfig+0x1c4>)
 8001f14:	681b      	ldr	r3, [r3, #0]
 8001f16:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001f1a:	2b00      	cmp	r3, #0
 8001f1c:	d115      	bne.n	8001f4a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001f1e:	2301      	movs	r3, #1
 8001f20:	e07f      	b.n	8002022 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001f22:	687b      	ldr	r3, [r7, #4]
 8001f24:	685b      	ldr	r3, [r3, #4]
 8001f26:	2b02      	cmp	r3, #2
 8001f28:	d107      	bne.n	8001f3a <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001f2a:	4b41      	ldr	r3, [pc, #260]	; (8002030 <HAL_RCC_ClockConfig+0x1c4>)
 8001f2c:	681b      	ldr	r3, [r3, #0]
 8001f2e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001f32:	2b00      	cmp	r3, #0
 8001f34:	d109      	bne.n	8001f4a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001f36:	2301      	movs	r3, #1
 8001f38:	e073      	b.n	8002022 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001f3a:	4b3d      	ldr	r3, [pc, #244]	; (8002030 <HAL_RCC_ClockConfig+0x1c4>)
 8001f3c:	681b      	ldr	r3, [r3, #0]
 8001f3e:	f003 0302 	and.w	r3, r3, #2
 8001f42:	2b00      	cmp	r3, #0
 8001f44:	d101      	bne.n	8001f4a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001f46:	2301      	movs	r3, #1
 8001f48:	e06b      	b.n	8002022 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001f4a:	4b39      	ldr	r3, [pc, #228]	; (8002030 <HAL_RCC_ClockConfig+0x1c4>)
 8001f4c:	685b      	ldr	r3, [r3, #4]
 8001f4e:	f023 0203 	bic.w	r2, r3, #3
 8001f52:	687b      	ldr	r3, [r7, #4]
 8001f54:	685b      	ldr	r3, [r3, #4]
 8001f56:	4936      	ldr	r1, [pc, #216]	; (8002030 <HAL_RCC_ClockConfig+0x1c4>)
 8001f58:	4313      	orrs	r3, r2
 8001f5a:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001f5c:	f7ff fa2c 	bl	80013b8 <HAL_GetTick>
 8001f60:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001f62:	e00a      	b.n	8001f7a <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001f64:	f7ff fa28 	bl	80013b8 <HAL_GetTick>
 8001f68:	4602      	mov	r2, r0
 8001f6a:	68fb      	ldr	r3, [r7, #12]
 8001f6c:	1ad3      	subs	r3, r2, r3
 8001f6e:	f241 3288 	movw	r2, #5000	; 0x1388
 8001f72:	4293      	cmp	r3, r2
 8001f74:	d901      	bls.n	8001f7a <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8001f76:	2303      	movs	r3, #3
 8001f78:	e053      	b.n	8002022 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001f7a:	4b2d      	ldr	r3, [pc, #180]	; (8002030 <HAL_RCC_ClockConfig+0x1c4>)
 8001f7c:	685b      	ldr	r3, [r3, #4]
 8001f7e:	f003 020c 	and.w	r2, r3, #12
 8001f82:	687b      	ldr	r3, [r7, #4]
 8001f84:	685b      	ldr	r3, [r3, #4]
 8001f86:	009b      	lsls	r3, r3, #2
 8001f88:	429a      	cmp	r2, r3
 8001f8a:	d1eb      	bne.n	8001f64 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8001f8c:	4b27      	ldr	r3, [pc, #156]	; (800202c <HAL_RCC_ClockConfig+0x1c0>)
 8001f8e:	681b      	ldr	r3, [r3, #0]
 8001f90:	f003 0307 	and.w	r3, r3, #7
 8001f94:	683a      	ldr	r2, [r7, #0]
 8001f96:	429a      	cmp	r2, r3
 8001f98:	d210      	bcs.n	8001fbc <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001f9a:	4b24      	ldr	r3, [pc, #144]	; (800202c <HAL_RCC_ClockConfig+0x1c0>)
 8001f9c:	681b      	ldr	r3, [r3, #0]
 8001f9e:	f023 0207 	bic.w	r2, r3, #7
 8001fa2:	4922      	ldr	r1, [pc, #136]	; (800202c <HAL_RCC_ClockConfig+0x1c0>)
 8001fa4:	683b      	ldr	r3, [r7, #0]
 8001fa6:	4313      	orrs	r3, r2
 8001fa8:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001faa:	4b20      	ldr	r3, [pc, #128]	; (800202c <HAL_RCC_ClockConfig+0x1c0>)
 8001fac:	681b      	ldr	r3, [r3, #0]
 8001fae:	f003 0307 	and.w	r3, r3, #7
 8001fb2:	683a      	ldr	r2, [r7, #0]
 8001fb4:	429a      	cmp	r2, r3
 8001fb6:	d001      	beq.n	8001fbc <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8001fb8:	2301      	movs	r3, #1
 8001fba:	e032      	b.n	8002022 <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001fbc:	687b      	ldr	r3, [r7, #4]
 8001fbe:	681b      	ldr	r3, [r3, #0]
 8001fc0:	f003 0304 	and.w	r3, r3, #4
 8001fc4:	2b00      	cmp	r3, #0
 8001fc6:	d008      	beq.n	8001fda <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001fc8:	4b19      	ldr	r3, [pc, #100]	; (8002030 <HAL_RCC_ClockConfig+0x1c4>)
 8001fca:	685b      	ldr	r3, [r3, #4]
 8001fcc:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8001fd0:	687b      	ldr	r3, [r7, #4]
 8001fd2:	68db      	ldr	r3, [r3, #12]
 8001fd4:	4916      	ldr	r1, [pc, #88]	; (8002030 <HAL_RCC_ClockConfig+0x1c4>)
 8001fd6:	4313      	orrs	r3, r2
 8001fd8:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001fda:	687b      	ldr	r3, [r7, #4]
 8001fdc:	681b      	ldr	r3, [r3, #0]
 8001fde:	f003 0308 	and.w	r3, r3, #8
 8001fe2:	2b00      	cmp	r3, #0
 8001fe4:	d009      	beq.n	8001ffa <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8001fe6:	4b12      	ldr	r3, [pc, #72]	; (8002030 <HAL_RCC_ClockConfig+0x1c4>)
 8001fe8:	685b      	ldr	r3, [r3, #4]
 8001fea:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8001fee:	687b      	ldr	r3, [r7, #4]
 8001ff0:	691b      	ldr	r3, [r3, #16]
 8001ff2:	00db      	lsls	r3, r3, #3
 8001ff4:	490e      	ldr	r1, [pc, #56]	; (8002030 <HAL_RCC_ClockConfig+0x1c4>)
 8001ff6:	4313      	orrs	r3, r2
 8001ff8:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8001ffa:	f000 f821 	bl	8002040 <HAL_RCC_GetSysClockFreq>
 8001ffe:	4602      	mov	r2, r0
 8002000:	4b0b      	ldr	r3, [pc, #44]	; (8002030 <HAL_RCC_ClockConfig+0x1c4>)
 8002002:	685b      	ldr	r3, [r3, #4]
 8002004:	091b      	lsrs	r3, r3, #4
 8002006:	f003 030f 	and.w	r3, r3, #15
 800200a:	490a      	ldr	r1, [pc, #40]	; (8002034 <HAL_RCC_ClockConfig+0x1c8>)
 800200c:	5ccb      	ldrb	r3, [r1, r3]
 800200e:	fa22 f303 	lsr.w	r3, r2, r3
 8002012:	4a09      	ldr	r2, [pc, #36]	; (8002038 <HAL_RCC_ClockConfig+0x1cc>)
 8002014:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8002016:	4b09      	ldr	r3, [pc, #36]	; (800203c <HAL_RCC_ClockConfig+0x1d0>)
 8002018:	681b      	ldr	r3, [r3, #0]
 800201a:	4618      	mov	r0, r3
 800201c:	f7ff f98a 	bl	8001334 <HAL_InitTick>

  return HAL_OK;
 8002020:	2300      	movs	r3, #0
}
 8002022:	4618      	mov	r0, r3
 8002024:	3710      	adds	r7, #16
 8002026:	46bd      	mov	sp, r7
 8002028:	bd80      	pop	{r7, pc}
 800202a:	bf00      	nop
 800202c:	40022000 	.word	0x40022000
 8002030:	40021000 	.word	0x40021000
 8002034:	08004734 	.word	0x08004734
 8002038:	2000000c 	.word	0x2000000c
 800203c:	20000010 	.word	0x20000010

08002040 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002040:	b490      	push	{r4, r7}
 8002042:	b08a      	sub	sp, #40	; 0x28
 8002044:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[14] = {0, 0, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 13};
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 8002046:	4b29      	ldr	r3, [pc, #164]	; (80020ec <HAL_RCC_GetSysClockFreq+0xac>)
 8002048:	1d3c      	adds	r4, r7, #4
 800204a:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800204c:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(RCC_CFGR2_PREDIV1)
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPredivFactorTable[2] = {1, 2};
 8002050:	f240 2301 	movw	r3, #513	; 0x201
 8002054:	803b      	strh	r3, [r7, #0]
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8002056:	2300      	movs	r3, #0
 8002058:	61fb      	str	r3, [r7, #28]
 800205a:	2300      	movs	r3, #0
 800205c:	61bb      	str	r3, [r7, #24]
 800205e:	2300      	movs	r3, #0
 8002060:	627b      	str	r3, [r7, #36]	; 0x24
 8002062:	2300      	movs	r3, #0
 8002064:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 8002066:	2300      	movs	r3, #0
 8002068:	623b      	str	r3, [r7, #32]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 800206a:	4b21      	ldr	r3, [pc, #132]	; (80020f0 <HAL_RCC_GetSysClockFreq+0xb0>)
 800206c:	685b      	ldr	r3, [r3, #4]
 800206e:	61fb      	str	r3, [r7, #28]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8002070:	69fb      	ldr	r3, [r7, #28]
 8002072:	f003 030c 	and.w	r3, r3, #12
 8002076:	2b04      	cmp	r3, #4
 8002078:	d002      	beq.n	8002080 <HAL_RCC_GetSysClockFreq+0x40>
 800207a:	2b08      	cmp	r3, #8
 800207c:	d003      	beq.n	8002086 <HAL_RCC_GetSysClockFreq+0x46>
 800207e:	e02b      	b.n	80020d8 <HAL_RCC_GetSysClockFreq+0x98>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8002080:	4b1c      	ldr	r3, [pc, #112]	; (80020f4 <HAL_RCC_GetSysClockFreq+0xb4>)
 8002082:	623b      	str	r3, [r7, #32]
      break;
 8002084:	e02b      	b.n	80020de <HAL_RCC_GetSysClockFreq+0x9e>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8002086:	69fb      	ldr	r3, [r7, #28]
 8002088:	0c9b      	lsrs	r3, r3, #18
 800208a:	f003 030f 	and.w	r3, r3, #15
 800208e:	3328      	adds	r3, #40	; 0x28
 8002090:	443b      	add	r3, r7
 8002092:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 8002096:	617b      	str	r3, [r7, #20]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8002098:	69fb      	ldr	r3, [r7, #28]
 800209a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800209e:	2b00      	cmp	r3, #0
 80020a0:	d012      	beq.n	80020c8 <HAL_RCC_GetSysClockFreq+0x88>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 80020a2:	4b13      	ldr	r3, [pc, #76]	; (80020f0 <HAL_RCC_GetSysClockFreq+0xb0>)
 80020a4:	685b      	ldr	r3, [r3, #4]
 80020a6:	0c5b      	lsrs	r3, r3, #17
 80020a8:	f003 0301 	and.w	r3, r3, #1
 80020ac:	3328      	adds	r3, #40	; 0x28
 80020ae:	443b      	add	r3, r7
 80020b0:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 80020b4:	61bb      	str	r3, [r7, #24]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 80020b6:	697b      	ldr	r3, [r7, #20]
 80020b8:	4a0e      	ldr	r2, [pc, #56]	; (80020f4 <HAL_RCC_GetSysClockFreq+0xb4>)
 80020ba:	fb03 f202 	mul.w	r2, r3, r2
 80020be:	69bb      	ldr	r3, [r7, #24]
 80020c0:	fbb2 f3f3 	udiv	r3, r2, r3
 80020c4:	627b      	str	r3, [r7, #36]	; 0x24
 80020c6:	e004      	b.n	80020d2 <HAL_RCC_GetSysClockFreq+0x92>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 80020c8:	697b      	ldr	r3, [r7, #20]
 80020ca:	4a0b      	ldr	r2, [pc, #44]	; (80020f8 <HAL_RCC_GetSysClockFreq+0xb8>)
 80020cc:	fb02 f303 	mul.w	r3, r2, r3
 80020d0:	627b      	str	r3, [r7, #36]	; 0x24
      }
      sysclockfreq = pllclk;
 80020d2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80020d4:	623b      	str	r3, [r7, #32]
      break;
 80020d6:	e002      	b.n	80020de <HAL_RCC_GetSysClockFreq+0x9e>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 80020d8:	4b06      	ldr	r3, [pc, #24]	; (80020f4 <HAL_RCC_GetSysClockFreq+0xb4>)
 80020da:	623b      	str	r3, [r7, #32]
      break;
 80020dc:	bf00      	nop
    }
  }
  return sysclockfreq;
 80020de:	6a3b      	ldr	r3, [r7, #32]
}
 80020e0:	4618      	mov	r0, r3
 80020e2:	3728      	adds	r7, #40	; 0x28
 80020e4:	46bd      	mov	sp, r7
 80020e6:	bc90      	pop	{r4, r7}
 80020e8:	4770      	bx	lr
 80020ea:	bf00      	nop
 80020ec:	08003abc 	.word	0x08003abc
 80020f0:	40021000 	.word	0x40021000
 80020f4:	007a1200 	.word	0x007a1200
 80020f8:	003d0900 	.word	0x003d0900

080020fc <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 80020fc:	b480      	push	{r7}
 80020fe:	b085      	sub	sp, #20
 8002100:	af00      	add	r7, sp, #0
 8002102:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8002104:	4b0a      	ldr	r3, [pc, #40]	; (8002130 <RCC_Delay+0x34>)
 8002106:	681b      	ldr	r3, [r3, #0]
 8002108:	4a0a      	ldr	r2, [pc, #40]	; (8002134 <RCC_Delay+0x38>)
 800210a:	fba2 2303 	umull	r2, r3, r2, r3
 800210e:	0a5b      	lsrs	r3, r3, #9
 8002110:	687a      	ldr	r2, [r7, #4]
 8002112:	fb02 f303 	mul.w	r3, r2, r3
 8002116:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8002118:	bf00      	nop
  }
  while (Delay --);
 800211a:	68fb      	ldr	r3, [r7, #12]
 800211c:	1e5a      	subs	r2, r3, #1
 800211e:	60fa      	str	r2, [r7, #12]
 8002120:	2b00      	cmp	r3, #0
 8002122:	d1f9      	bne.n	8002118 <RCC_Delay+0x1c>
}
 8002124:	bf00      	nop
 8002126:	bf00      	nop
 8002128:	3714      	adds	r7, #20
 800212a:	46bd      	mov	sp, r7
 800212c:	bc80      	pop	{r7}
 800212e:	4770      	bx	lr
 8002130:	2000000c 	.word	0x2000000c
 8002134:	10624dd3 	.word	0x10624dd3

08002138 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8002138:	b580      	push	{r7, lr}
 800213a:	b082      	sub	sp, #8
 800213c:	af00      	add	r7, sp, #0
 800213e:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8002140:	687b      	ldr	r3, [r7, #4]
 8002142:	2b00      	cmp	r3, #0
 8002144:	d101      	bne.n	800214a <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8002146:	2301      	movs	r3, #1
 8002148:	e076      	b.n	8002238 <HAL_SPI_Init+0x100>
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  /* TI mode is not supported on this device.
     TIMode parameter is mandatory equal to SPI_TIMODE_DISABLE */
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 800214a:	687b      	ldr	r3, [r7, #4]
 800214c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800214e:	2b00      	cmp	r3, #0
 8002150:	d108      	bne.n	8002164 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8002152:	687b      	ldr	r3, [r7, #4]
 8002154:	685b      	ldr	r3, [r3, #4]
 8002156:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800215a:	d009      	beq.n	8002170 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 800215c:	687b      	ldr	r3, [r7, #4]
 800215e:	2200      	movs	r2, #0
 8002160:	61da      	str	r2, [r3, #28]
 8002162:	e005      	b.n	8002170 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8002164:	687b      	ldr	r3, [r7, #4]
 8002166:	2200      	movs	r2, #0
 8002168:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 800216a:	687b      	ldr	r3, [r7, #4]
 800216c:	2200      	movs	r2, #0
 800216e:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8002170:	687b      	ldr	r3, [r7, #4]
 8002172:	2200      	movs	r2, #0
 8002174:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8002176:	687b      	ldr	r3, [r7, #4]
 8002178:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800217c:	b2db      	uxtb	r3, r3
 800217e:	2b00      	cmp	r3, #0
 8002180:	d106      	bne.n	8002190 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8002182:	687b      	ldr	r3, [r7, #4]
 8002184:	2200      	movs	r2, #0
 8002186:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 800218a:	6878      	ldr	r0, [r7, #4]
 800218c:	f7fe fe38 	bl	8000e00 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8002190:	687b      	ldr	r3, [r7, #4]
 8002192:	2202      	movs	r2, #2
 8002194:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8002198:	687b      	ldr	r3, [r7, #4]
 800219a:	681b      	ldr	r3, [r3, #0]
 800219c:	681a      	ldr	r2, [r3, #0]
 800219e:	687b      	ldr	r3, [r7, #4]
 80021a0:	681b      	ldr	r3, [r3, #0]
 80021a2:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80021a6:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 80021a8:	687b      	ldr	r3, [r7, #4]
 80021aa:	685b      	ldr	r3, [r3, #4]
 80021ac:	f403 7282 	and.w	r2, r3, #260	; 0x104
 80021b0:	687b      	ldr	r3, [r7, #4]
 80021b2:	689b      	ldr	r3, [r3, #8]
 80021b4:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 80021b8:	431a      	orrs	r2, r3
 80021ba:	687b      	ldr	r3, [r7, #4]
 80021bc:	68db      	ldr	r3, [r3, #12]
 80021be:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80021c2:	431a      	orrs	r2, r3
 80021c4:	687b      	ldr	r3, [r7, #4]
 80021c6:	691b      	ldr	r3, [r3, #16]
 80021c8:	f003 0302 	and.w	r3, r3, #2
 80021cc:	431a      	orrs	r2, r3
 80021ce:	687b      	ldr	r3, [r7, #4]
 80021d0:	695b      	ldr	r3, [r3, #20]
 80021d2:	f003 0301 	and.w	r3, r3, #1
 80021d6:	431a      	orrs	r2, r3
 80021d8:	687b      	ldr	r3, [r7, #4]
 80021da:	699b      	ldr	r3, [r3, #24]
 80021dc:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80021e0:	431a      	orrs	r2, r3
 80021e2:	687b      	ldr	r3, [r7, #4]
 80021e4:	69db      	ldr	r3, [r3, #28]
 80021e6:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80021ea:	431a      	orrs	r2, r3
 80021ec:	687b      	ldr	r3, [r7, #4]
 80021ee:	6a1b      	ldr	r3, [r3, #32]
 80021f0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80021f4:	ea42 0103 	orr.w	r1, r2, r3
 80021f8:	687b      	ldr	r3, [r7, #4]
 80021fa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80021fc:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8002200:	687b      	ldr	r3, [r7, #4]
 8002202:	681b      	ldr	r3, [r3, #0]
 8002204:	430a      	orrs	r2, r1
 8002206:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management */
  WRITE_REG(hspi->Instance->CR2, ((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE));
 8002208:	687b      	ldr	r3, [r7, #4]
 800220a:	699b      	ldr	r3, [r3, #24]
 800220c:	0c1a      	lsrs	r2, r3, #16
 800220e:	687b      	ldr	r3, [r7, #4]
 8002210:	681b      	ldr	r3, [r3, #0]
 8002212:	f002 0204 	and.w	r2, r2, #4
 8002216:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8002218:	687b      	ldr	r3, [r7, #4]
 800221a:	681b      	ldr	r3, [r3, #0]
 800221c:	69da      	ldr	r2, [r3, #28]
 800221e:	687b      	ldr	r3, [r7, #4]
 8002220:	681b      	ldr	r3, [r3, #0]
 8002222:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002226:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8002228:	687b      	ldr	r3, [r7, #4]
 800222a:	2200      	movs	r2, #0
 800222c:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 800222e:	687b      	ldr	r3, [r7, #4]
 8002230:	2201      	movs	r2, #1
 8002232:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 8002236:	2300      	movs	r3, #0
}
 8002238:	4618      	mov	r0, r3
 800223a:	3708      	adds	r7, #8
 800223c:	46bd      	mov	sp, r7
 800223e:	bd80      	pop	{r7, pc}

08002240 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002240:	b580      	push	{r7, lr}
 8002242:	b088      	sub	sp, #32
 8002244:	af00      	add	r7, sp, #0
 8002246:	60f8      	str	r0, [r7, #12]
 8002248:	60b9      	str	r1, [r7, #8]
 800224a:	603b      	str	r3, [r7, #0]
 800224c:	4613      	mov	r3, r2
 800224e:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8002250:	2300      	movs	r3, #0
 8002252:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8002254:	68fb      	ldr	r3, [r7, #12]
 8002256:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 800225a:	2b01      	cmp	r3, #1
 800225c:	d101      	bne.n	8002262 <HAL_SPI_Transmit+0x22>
 800225e:	2302      	movs	r3, #2
 8002260:	e126      	b.n	80024b0 <HAL_SPI_Transmit+0x270>
 8002262:	68fb      	ldr	r3, [r7, #12]
 8002264:	2201      	movs	r2, #1
 8002266:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800226a:	f7ff f8a5 	bl	80013b8 <HAL_GetTick>
 800226e:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 8002270:	88fb      	ldrh	r3, [r7, #6]
 8002272:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 8002274:	68fb      	ldr	r3, [r7, #12]
 8002276:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800227a:	b2db      	uxtb	r3, r3
 800227c:	2b01      	cmp	r3, #1
 800227e:	d002      	beq.n	8002286 <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 8002280:	2302      	movs	r3, #2
 8002282:	77fb      	strb	r3, [r7, #31]
    goto error;
 8002284:	e10b      	b.n	800249e <HAL_SPI_Transmit+0x25e>
  }

  if ((pData == NULL) || (Size == 0U))
 8002286:	68bb      	ldr	r3, [r7, #8]
 8002288:	2b00      	cmp	r3, #0
 800228a:	d002      	beq.n	8002292 <HAL_SPI_Transmit+0x52>
 800228c:	88fb      	ldrh	r3, [r7, #6]
 800228e:	2b00      	cmp	r3, #0
 8002290:	d102      	bne.n	8002298 <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 8002292:	2301      	movs	r3, #1
 8002294:	77fb      	strb	r3, [r7, #31]
    goto error;
 8002296:	e102      	b.n	800249e <HAL_SPI_Transmit+0x25e>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8002298:	68fb      	ldr	r3, [r7, #12]
 800229a:	2203      	movs	r2, #3
 800229c:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80022a0:	68fb      	ldr	r3, [r7, #12]
 80022a2:	2200      	movs	r2, #0
 80022a4:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 80022a6:	68fb      	ldr	r3, [r7, #12]
 80022a8:	68ba      	ldr	r2, [r7, #8]
 80022aa:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 80022ac:	68fb      	ldr	r3, [r7, #12]
 80022ae:	88fa      	ldrh	r2, [r7, #6]
 80022b0:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 80022b2:	68fb      	ldr	r3, [r7, #12]
 80022b4:	88fa      	ldrh	r2, [r7, #6]
 80022b6:	86da      	strh	r2, [r3, #54]	; 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 80022b8:	68fb      	ldr	r3, [r7, #12]
 80022ba:	2200      	movs	r2, #0
 80022bc:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = 0U;
 80022be:	68fb      	ldr	r3, [r7, #12]
 80022c0:	2200      	movs	r2, #0
 80022c2:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 80022c4:	68fb      	ldr	r3, [r7, #12]
 80022c6:	2200      	movs	r2, #0
 80022c8:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxISR       = NULL;
 80022ca:	68fb      	ldr	r3, [r7, #12]
 80022cc:	2200      	movs	r2, #0
 80022ce:	645a      	str	r2, [r3, #68]	; 0x44
  hspi->RxISR       = NULL;
 80022d0:	68fb      	ldr	r3, [r7, #12]
 80022d2:	2200      	movs	r2, #0
 80022d4:	641a      	str	r2, [r3, #64]	; 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80022d6:	68fb      	ldr	r3, [r7, #12]
 80022d8:	689b      	ldr	r3, [r3, #8]
 80022da:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80022de:	d10f      	bne.n	8002300 <HAL_SPI_Transmit+0xc0>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 80022e0:	68fb      	ldr	r3, [r7, #12]
 80022e2:	681b      	ldr	r3, [r3, #0]
 80022e4:	681a      	ldr	r2, [r3, #0]
 80022e6:	68fb      	ldr	r3, [r7, #12]
 80022e8:	681b      	ldr	r3, [r3, #0]
 80022ea:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80022ee:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 80022f0:	68fb      	ldr	r3, [r7, #12]
 80022f2:	681b      	ldr	r3, [r3, #0]
 80022f4:	681a      	ldr	r2, [r3, #0]
 80022f6:	68fb      	ldr	r3, [r7, #12]
 80022f8:	681b      	ldr	r3, [r3, #0]
 80022fa:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80022fe:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8002300:	68fb      	ldr	r3, [r7, #12]
 8002302:	681b      	ldr	r3, [r3, #0]
 8002304:	681b      	ldr	r3, [r3, #0]
 8002306:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800230a:	2b40      	cmp	r3, #64	; 0x40
 800230c:	d007      	beq.n	800231e <HAL_SPI_Transmit+0xde>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800230e:	68fb      	ldr	r3, [r7, #12]
 8002310:	681b      	ldr	r3, [r3, #0]
 8002312:	681a      	ldr	r2, [r3, #0]
 8002314:	68fb      	ldr	r3, [r7, #12]
 8002316:	681b      	ldr	r3, [r3, #0]
 8002318:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800231c:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 800231e:	68fb      	ldr	r3, [r7, #12]
 8002320:	68db      	ldr	r3, [r3, #12]
 8002322:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8002326:	d14b      	bne.n	80023c0 <HAL_SPI_Transmit+0x180>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8002328:	68fb      	ldr	r3, [r7, #12]
 800232a:	685b      	ldr	r3, [r3, #4]
 800232c:	2b00      	cmp	r3, #0
 800232e:	d002      	beq.n	8002336 <HAL_SPI_Transmit+0xf6>
 8002330:	8afb      	ldrh	r3, [r7, #22]
 8002332:	2b01      	cmp	r3, #1
 8002334:	d13e      	bne.n	80023b4 <HAL_SPI_Transmit+0x174>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8002336:	68fb      	ldr	r3, [r7, #12]
 8002338:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800233a:	881a      	ldrh	r2, [r3, #0]
 800233c:	68fb      	ldr	r3, [r7, #12]
 800233e:	681b      	ldr	r3, [r3, #0]
 8002340:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8002342:	68fb      	ldr	r3, [r7, #12]
 8002344:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002346:	1c9a      	adds	r2, r3, #2
 8002348:	68fb      	ldr	r3, [r7, #12]
 800234a:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 800234c:	68fb      	ldr	r3, [r7, #12]
 800234e:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002350:	b29b      	uxth	r3, r3
 8002352:	3b01      	subs	r3, #1
 8002354:	b29a      	uxth	r2, r3
 8002356:	68fb      	ldr	r3, [r7, #12]
 8002358:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 800235a:	e02b      	b.n	80023b4 <HAL_SPI_Transmit+0x174>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 800235c:	68fb      	ldr	r3, [r7, #12]
 800235e:	681b      	ldr	r3, [r3, #0]
 8002360:	689b      	ldr	r3, [r3, #8]
 8002362:	f003 0302 	and.w	r3, r3, #2
 8002366:	2b02      	cmp	r3, #2
 8002368:	d112      	bne.n	8002390 <HAL_SPI_Transmit+0x150>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800236a:	68fb      	ldr	r3, [r7, #12]
 800236c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800236e:	881a      	ldrh	r2, [r3, #0]
 8002370:	68fb      	ldr	r3, [r7, #12]
 8002372:	681b      	ldr	r3, [r3, #0]
 8002374:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8002376:	68fb      	ldr	r3, [r7, #12]
 8002378:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800237a:	1c9a      	adds	r2, r3, #2
 800237c:	68fb      	ldr	r3, [r7, #12]
 800237e:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8002380:	68fb      	ldr	r3, [r7, #12]
 8002382:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002384:	b29b      	uxth	r3, r3
 8002386:	3b01      	subs	r3, #1
 8002388:	b29a      	uxth	r2, r3
 800238a:	68fb      	ldr	r3, [r7, #12]
 800238c:	86da      	strh	r2, [r3, #54]	; 0x36
 800238e:	e011      	b.n	80023b4 <HAL_SPI_Transmit+0x174>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8002390:	f7ff f812 	bl	80013b8 <HAL_GetTick>
 8002394:	4602      	mov	r2, r0
 8002396:	69bb      	ldr	r3, [r7, #24]
 8002398:	1ad3      	subs	r3, r2, r3
 800239a:	683a      	ldr	r2, [r7, #0]
 800239c:	429a      	cmp	r2, r3
 800239e:	d803      	bhi.n	80023a8 <HAL_SPI_Transmit+0x168>
 80023a0:	683b      	ldr	r3, [r7, #0]
 80023a2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80023a6:	d102      	bne.n	80023ae <HAL_SPI_Transmit+0x16e>
 80023a8:	683b      	ldr	r3, [r7, #0]
 80023aa:	2b00      	cmp	r3, #0
 80023ac:	d102      	bne.n	80023b4 <HAL_SPI_Transmit+0x174>
        {
          errorcode = HAL_TIMEOUT;
 80023ae:	2303      	movs	r3, #3
 80023b0:	77fb      	strb	r3, [r7, #31]
          goto error;
 80023b2:	e074      	b.n	800249e <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 80023b4:	68fb      	ldr	r3, [r7, #12]
 80023b6:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80023b8:	b29b      	uxth	r3, r3
 80023ba:	2b00      	cmp	r3, #0
 80023bc:	d1ce      	bne.n	800235c <HAL_SPI_Transmit+0x11c>
 80023be:	e04c      	b.n	800245a <HAL_SPI_Transmit+0x21a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80023c0:	68fb      	ldr	r3, [r7, #12]
 80023c2:	685b      	ldr	r3, [r3, #4]
 80023c4:	2b00      	cmp	r3, #0
 80023c6:	d002      	beq.n	80023ce <HAL_SPI_Transmit+0x18e>
 80023c8:	8afb      	ldrh	r3, [r7, #22]
 80023ca:	2b01      	cmp	r3, #1
 80023cc:	d140      	bne.n	8002450 <HAL_SPI_Transmit+0x210>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 80023ce:	68fb      	ldr	r3, [r7, #12]
 80023d0:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80023d2:	68fb      	ldr	r3, [r7, #12]
 80023d4:	681b      	ldr	r3, [r3, #0]
 80023d6:	330c      	adds	r3, #12
 80023d8:	7812      	ldrb	r2, [r2, #0]
 80023da:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 80023dc:	68fb      	ldr	r3, [r7, #12]
 80023de:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80023e0:	1c5a      	adds	r2, r3, #1
 80023e2:	68fb      	ldr	r3, [r7, #12]
 80023e4:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 80023e6:	68fb      	ldr	r3, [r7, #12]
 80023e8:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80023ea:	b29b      	uxth	r3, r3
 80023ec:	3b01      	subs	r3, #1
 80023ee:	b29a      	uxth	r2, r3
 80023f0:	68fb      	ldr	r3, [r7, #12]
 80023f2:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while (hspi->TxXferCount > 0U)
 80023f4:	e02c      	b.n	8002450 <HAL_SPI_Transmit+0x210>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 80023f6:	68fb      	ldr	r3, [r7, #12]
 80023f8:	681b      	ldr	r3, [r3, #0]
 80023fa:	689b      	ldr	r3, [r3, #8]
 80023fc:	f003 0302 	and.w	r3, r3, #2
 8002400:	2b02      	cmp	r3, #2
 8002402:	d113      	bne.n	800242c <HAL_SPI_Transmit+0x1ec>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8002404:	68fb      	ldr	r3, [r7, #12]
 8002406:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002408:	68fb      	ldr	r3, [r7, #12]
 800240a:	681b      	ldr	r3, [r3, #0]
 800240c:	330c      	adds	r3, #12
 800240e:	7812      	ldrb	r2, [r2, #0]
 8002410:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 8002412:	68fb      	ldr	r3, [r7, #12]
 8002414:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002416:	1c5a      	adds	r2, r3, #1
 8002418:	68fb      	ldr	r3, [r7, #12]
 800241a:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 800241c:	68fb      	ldr	r3, [r7, #12]
 800241e:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002420:	b29b      	uxth	r3, r3
 8002422:	3b01      	subs	r3, #1
 8002424:	b29a      	uxth	r2, r3
 8002426:	68fb      	ldr	r3, [r7, #12]
 8002428:	86da      	strh	r2, [r3, #54]	; 0x36
 800242a:	e011      	b.n	8002450 <HAL_SPI_Transmit+0x210>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800242c:	f7fe ffc4 	bl	80013b8 <HAL_GetTick>
 8002430:	4602      	mov	r2, r0
 8002432:	69bb      	ldr	r3, [r7, #24]
 8002434:	1ad3      	subs	r3, r2, r3
 8002436:	683a      	ldr	r2, [r7, #0]
 8002438:	429a      	cmp	r2, r3
 800243a:	d803      	bhi.n	8002444 <HAL_SPI_Transmit+0x204>
 800243c:	683b      	ldr	r3, [r7, #0]
 800243e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002442:	d102      	bne.n	800244a <HAL_SPI_Transmit+0x20a>
 8002444:	683b      	ldr	r3, [r7, #0]
 8002446:	2b00      	cmp	r3, #0
 8002448:	d102      	bne.n	8002450 <HAL_SPI_Transmit+0x210>
        {
          errorcode = HAL_TIMEOUT;
 800244a:	2303      	movs	r3, #3
 800244c:	77fb      	strb	r3, [r7, #31]
          goto error;
 800244e:	e026      	b.n	800249e <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 8002450:	68fb      	ldr	r3, [r7, #12]
 8002452:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002454:	b29b      	uxth	r3, r3
 8002456:	2b00      	cmp	r3, #0
 8002458:	d1cd      	bne.n	80023f6 <HAL_SPI_Transmit+0x1b6>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 800245a:	69ba      	ldr	r2, [r7, #24]
 800245c:	6839      	ldr	r1, [r7, #0]
 800245e:	68f8      	ldr	r0, [r7, #12]
 8002460:	f000 f8b2 	bl	80025c8 <SPI_EndRxTxTransaction>
 8002464:	4603      	mov	r3, r0
 8002466:	2b00      	cmp	r3, #0
 8002468:	d002      	beq.n	8002470 <HAL_SPI_Transmit+0x230>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800246a:	68fb      	ldr	r3, [r7, #12]
 800246c:	2220      	movs	r2, #32
 800246e:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8002470:	68fb      	ldr	r3, [r7, #12]
 8002472:	689b      	ldr	r3, [r3, #8]
 8002474:	2b00      	cmp	r3, #0
 8002476:	d10a      	bne.n	800248e <HAL_SPI_Transmit+0x24e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8002478:	2300      	movs	r3, #0
 800247a:	613b      	str	r3, [r7, #16]
 800247c:	68fb      	ldr	r3, [r7, #12]
 800247e:	681b      	ldr	r3, [r3, #0]
 8002480:	68db      	ldr	r3, [r3, #12]
 8002482:	613b      	str	r3, [r7, #16]
 8002484:	68fb      	ldr	r3, [r7, #12]
 8002486:	681b      	ldr	r3, [r3, #0]
 8002488:	689b      	ldr	r3, [r3, #8]
 800248a:	613b      	str	r3, [r7, #16]
 800248c:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800248e:	68fb      	ldr	r3, [r7, #12]
 8002490:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002492:	2b00      	cmp	r3, #0
 8002494:	d002      	beq.n	800249c <HAL_SPI_Transmit+0x25c>
  {
    errorcode = HAL_ERROR;
 8002496:	2301      	movs	r3, #1
 8002498:	77fb      	strb	r3, [r7, #31]
 800249a:	e000      	b.n	800249e <HAL_SPI_Transmit+0x25e>
  }

error:
 800249c:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 800249e:	68fb      	ldr	r3, [r7, #12]
 80024a0:	2201      	movs	r2, #1
 80024a2:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 80024a6:	68fb      	ldr	r3, [r7, #12]
 80024a8:	2200      	movs	r2, #0
 80024aa:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 80024ae:	7ffb      	ldrb	r3, [r7, #31]
}
 80024b0:	4618      	mov	r0, r3
 80024b2:	3720      	adds	r7, #32
 80024b4:	46bd      	mov	sp, r7
 80024b6:	bd80      	pop	{r7, pc}

080024b8 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 80024b8:	b580      	push	{r7, lr}
 80024ba:	b088      	sub	sp, #32
 80024bc:	af00      	add	r7, sp, #0
 80024be:	60f8      	str	r0, [r7, #12]
 80024c0:	60b9      	str	r1, [r7, #8]
 80024c2:	603b      	str	r3, [r7, #0]
 80024c4:	4613      	mov	r3, r2
 80024c6:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 80024c8:	f7fe ff76 	bl	80013b8 <HAL_GetTick>
 80024cc:	4602      	mov	r2, r0
 80024ce:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80024d0:	1a9b      	subs	r3, r3, r2
 80024d2:	683a      	ldr	r2, [r7, #0]
 80024d4:	4413      	add	r3, r2
 80024d6:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 80024d8:	f7fe ff6e 	bl	80013b8 <HAL_GetTick>
 80024dc:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 80024de:	4b39      	ldr	r3, [pc, #228]	; (80025c4 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 80024e0:	681b      	ldr	r3, [r3, #0]
 80024e2:	015b      	lsls	r3, r3, #5
 80024e4:	0d1b      	lsrs	r3, r3, #20
 80024e6:	69fa      	ldr	r2, [r7, #28]
 80024e8:	fb02 f303 	mul.w	r3, r2, r3
 80024ec:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80024ee:	e054      	b.n	800259a <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 80024f0:	683b      	ldr	r3, [r7, #0]
 80024f2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80024f6:	d050      	beq.n	800259a <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 80024f8:	f7fe ff5e 	bl	80013b8 <HAL_GetTick>
 80024fc:	4602      	mov	r2, r0
 80024fe:	69bb      	ldr	r3, [r7, #24]
 8002500:	1ad3      	subs	r3, r2, r3
 8002502:	69fa      	ldr	r2, [r7, #28]
 8002504:	429a      	cmp	r2, r3
 8002506:	d902      	bls.n	800250e <SPI_WaitFlagStateUntilTimeout+0x56>
 8002508:	69fb      	ldr	r3, [r7, #28]
 800250a:	2b00      	cmp	r3, #0
 800250c:	d13d      	bne.n	800258a <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 800250e:	68fb      	ldr	r3, [r7, #12]
 8002510:	681b      	ldr	r3, [r3, #0]
 8002512:	685a      	ldr	r2, [r3, #4]
 8002514:	68fb      	ldr	r3, [r7, #12]
 8002516:	681b      	ldr	r3, [r3, #0]
 8002518:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 800251c:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800251e:	68fb      	ldr	r3, [r7, #12]
 8002520:	685b      	ldr	r3, [r3, #4]
 8002522:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8002526:	d111      	bne.n	800254c <SPI_WaitFlagStateUntilTimeout+0x94>
 8002528:	68fb      	ldr	r3, [r7, #12]
 800252a:	689b      	ldr	r3, [r3, #8]
 800252c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002530:	d004      	beq.n	800253c <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8002532:	68fb      	ldr	r3, [r7, #12]
 8002534:	689b      	ldr	r3, [r3, #8]
 8002536:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800253a:	d107      	bne.n	800254c <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 800253c:	68fb      	ldr	r3, [r7, #12]
 800253e:	681b      	ldr	r3, [r3, #0]
 8002540:	681a      	ldr	r2, [r3, #0]
 8002542:	68fb      	ldr	r3, [r7, #12]
 8002544:	681b      	ldr	r3, [r3, #0]
 8002546:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800254a:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 800254c:	68fb      	ldr	r3, [r7, #12]
 800254e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002550:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002554:	d10f      	bne.n	8002576 <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8002556:	68fb      	ldr	r3, [r7, #12]
 8002558:	681b      	ldr	r3, [r3, #0]
 800255a:	681a      	ldr	r2, [r3, #0]
 800255c:	68fb      	ldr	r3, [r7, #12]
 800255e:	681b      	ldr	r3, [r3, #0]
 8002560:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8002564:	601a      	str	r2, [r3, #0]
 8002566:	68fb      	ldr	r3, [r7, #12]
 8002568:	681b      	ldr	r3, [r3, #0]
 800256a:	681a      	ldr	r2, [r3, #0]
 800256c:	68fb      	ldr	r3, [r7, #12]
 800256e:	681b      	ldr	r3, [r3, #0]
 8002570:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8002574:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8002576:	68fb      	ldr	r3, [r7, #12]
 8002578:	2201      	movs	r2, #1
 800257a:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 800257e:	68fb      	ldr	r3, [r7, #12]
 8002580:	2200      	movs	r2, #0
 8002582:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 8002586:	2303      	movs	r3, #3
 8002588:	e017      	b.n	80025ba <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if(count == 0U)
 800258a:	697b      	ldr	r3, [r7, #20]
 800258c:	2b00      	cmp	r3, #0
 800258e:	d101      	bne.n	8002594 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8002590:	2300      	movs	r3, #0
 8002592:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8002594:	697b      	ldr	r3, [r7, #20]
 8002596:	3b01      	subs	r3, #1
 8002598:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800259a:	68fb      	ldr	r3, [r7, #12]
 800259c:	681b      	ldr	r3, [r3, #0]
 800259e:	689a      	ldr	r2, [r3, #8]
 80025a0:	68bb      	ldr	r3, [r7, #8]
 80025a2:	4013      	ands	r3, r2
 80025a4:	68ba      	ldr	r2, [r7, #8]
 80025a6:	429a      	cmp	r2, r3
 80025a8:	bf0c      	ite	eq
 80025aa:	2301      	moveq	r3, #1
 80025ac:	2300      	movne	r3, #0
 80025ae:	b2db      	uxtb	r3, r3
 80025b0:	461a      	mov	r2, r3
 80025b2:	79fb      	ldrb	r3, [r7, #7]
 80025b4:	429a      	cmp	r2, r3
 80025b6:	d19b      	bne.n	80024f0 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 80025b8:	2300      	movs	r3, #0
}
 80025ba:	4618      	mov	r0, r3
 80025bc:	3720      	adds	r7, #32
 80025be:	46bd      	mov	sp, r7
 80025c0:	bd80      	pop	{r7, pc}
 80025c2:	bf00      	nop
 80025c4:	2000000c 	.word	0x2000000c

080025c8 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 80025c8:	b580      	push	{r7, lr}
 80025ca:	b086      	sub	sp, #24
 80025cc:	af02      	add	r7, sp, #8
 80025ce:	60f8      	str	r0, [r7, #12]
 80025d0:	60b9      	str	r1, [r7, #8]
 80025d2:	607a      	str	r2, [r7, #4]
  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 80025d4:	687b      	ldr	r3, [r7, #4]
 80025d6:	9300      	str	r3, [sp, #0]
 80025d8:	68bb      	ldr	r3, [r7, #8]
 80025da:	2200      	movs	r2, #0
 80025dc:	2180      	movs	r1, #128	; 0x80
 80025de:	68f8      	ldr	r0, [r7, #12]
 80025e0:	f7ff ff6a 	bl	80024b8 <SPI_WaitFlagStateUntilTimeout>
 80025e4:	4603      	mov	r3, r0
 80025e6:	2b00      	cmp	r3, #0
 80025e8:	d007      	beq.n	80025fa <SPI_EndRxTxTransaction+0x32>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80025ea:	68fb      	ldr	r3, [r7, #12]
 80025ec:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80025ee:	f043 0220 	orr.w	r2, r3, #32
 80025f2:	68fb      	ldr	r3, [r7, #12]
 80025f4:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_TIMEOUT;
 80025f6:	2303      	movs	r3, #3
 80025f8:	e000      	b.n	80025fc <SPI_EndRxTxTransaction+0x34>
  }
  return HAL_OK;
 80025fa:	2300      	movs	r3, #0
}
 80025fc:	4618      	mov	r0, r3
 80025fe:	3710      	adds	r7, #16
 8002600:	46bd      	mov	sp, r7
 8002602:	bd80      	pop	{r7, pc}

08002604 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8002604:	b580      	push	{r7, lr}
 8002606:	b082      	sub	sp, #8
 8002608:	af00      	add	r7, sp, #0
 800260a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800260c:	687b      	ldr	r3, [r7, #4]
 800260e:	2b00      	cmp	r3, #0
 8002610:	d101      	bne.n	8002616 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8002612:	2301      	movs	r3, #1
 8002614:	e041      	b.n	800269a <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002616:	687b      	ldr	r3, [r7, #4]
 8002618:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800261c:	b2db      	uxtb	r3, r3
 800261e:	2b00      	cmp	r3, #0
 8002620:	d106      	bne.n	8002630 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002622:	687b      	ldr	r3, [r7, #4]
 8002624:	2200      	movs	r2, #0
 8002626:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800262a:	6878      	ldr	r0, [r7, #4]
 800262c:	f7fe fdda 	bl	80011e4 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002630:	687b      	ldr	r3, [r7, #4]
 8002632:	2202      	movs	r2, #2
 8002634:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002638:	687b      	ldr	r3, [r7, #4]
 800263a:	681a      	ldr	r2, [r3, #0]
 800263c:	687b      	ldr	r3, [r7, #4]
 800263e:	3304      	adds	r3, #4
 8002640:	4619      	mov	r1, r3
 8002642:	4610      	mov	r0, r2
 8002644:	f000 fb84 	bl	8002d50 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002648:	687b      	ldr	r3, [r7, #4]
 800264a:	2201      	movs	r2, #1
 800264c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002650:	687b      	ldr	r3, [r7, #4]
 8002652:	2201      	movs	r2, #1
 8002654:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8002658:	687b      	ldr	r3, [r7, #4]
 800265a:	2201      	movs	r2, #1
 800265c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8002660:	687b      	ldr	r3, [r7, #4]
 8002662:	2201      	movs	r2, #1
 8002664:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8002668:	687b      	ldr	r3, [r7, #4]
 800266a:	2201      	movs	r2, #1
 800266c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002670:	687b      	ldr	r3, [r7, #4]
 8002672:	2201      	movs	r2, #1
 8002674:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8002678:	687b      	ldr	r3, [r7, #4]
 800267a:	2201      	movs	r2, #1
 800267c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8002680:	687b      	ldr	r3, [r7, #4]
 8002682:	2201      	movs	r2, #1
 8002684:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8002688:	687b      	ldr	r3, [r7, #4]
 800268a:	2201      	movs	r2, #1
 800268c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002690:	687b      	ldr	r3, [r7, #4]
 8002692:	2201      	movs	r2, #1
 8002694:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8002698:	2300      	movs	r3, #0
}
 800269a:	4618      	mov	r0, r3
 800269c:	3708      	adds	r7, #8
 800269e:	46bd      	mov	sp, r7
 80026a0:	bd80      	pop	{r7, pc}
	...

080026a4 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 80026a4:	b480      	push	{r7}
 80026a6:	b085      	sub	sp, #20
 80026a8:	af00      	add	r7, sp, #0
 80026aa:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80026ac:	687b      	ldr	r3, [r7, #4]
 80026ae:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80026b2:	b2db      	uxtb	r3, r3
 80026b4:	2b01      	cmp	r3, #1
 80026b6:	d001      	beq.n	80026bc <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 80026b8:	2301      	movs	r3, #1
 80026ba:	e032      	b.n	8002722 <HAL_TIM_Base_Start+0x7e>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80026bc:	687b      	ldr	r3, [r7, #4]
 80026be:	2202      	movs	r2, #2
 80026c0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80026c4:	687b      	ldr	r3, [r7, #4]
 80026c6:	681b      	ldr	r3, [r3, #0]
 80026c8:	4a18      	ldr	r2, [pc, #96]	; (800272c <HAL_TIM_Base_Start+0x88>)
 80026ca:	4293      	cmp	r3, r2
 80026cc:	d00e      	beq.n	80026ec <HAL_TIM_Base_Start+0x48>
 80026ce:	687b      	ldr	r3, [r7, #4]
 80026d0:	681b      	ldr	r3, [r3, #0]
 80026d2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80026d6:	d009      	beq.n	80026ec <HAL_TIM_Base_Start+0x48>
 80026d8:	687b      	ldr	r3, [r7, #4]
 80026da:	681b      	ldr	r3, [r3, #0]
 80026dc:	4a14      	ldr	r2, [pc, #80]	; (8002730 <HAL_TIM_Base_Start+0x8c>)
 80026de:	4293      	cmp	r3, r2
 80026e0:	d004      	beq.n	80026ec <HAL_TIM_Base_Start+0x48>
 80026e2:	687b      	ldr	r3, [r7, #4]
 80026e4:	681b      	ldr	r3, [r3, #0]
 80026e6:	4a13      	ldr	r2, [pc, #76]	; (8002734 <HAL_TIM_Base_Start+0x90>)
 80026e8:	4293      	cmp	r3, r2
 80026ea:	d111      	bne.n	8002710 <HAL_TIM_Base_Start+0x6c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80026ec:	687b      	ldr	r3, [r7, #4]
 80026ee:	681b      	ldr	r3, [r3, #0]
 80026f0:	689b      	ldr	r3, [r3, #8]
 80026f2:	f003 0307 	and.w	r3, r3, #7
 80026f6:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80026f8:	68fb      	ldr	r3, [r7, #12]
 80026fa:	2b06      	cmp	r3, #6
 80026fc:	d010      	beq.n	8002720 <HAL_TIM_Base_Start+0x7c>
    {
      __HAL_TIM_ENABLE(htim);
 80026fe:	687b      	ldr	r3, [r7, #4]
 8002700:	681b      	ldr	r3, [r3, #0]
 8002702:	681a      	ldr	r2, [r3, #0]
 8002704:	687b      	ldr	r3, [r7, #4]
 8002706:	681b      	ldr	r3, [r3, #0]
 8002708:	f042 0201 	orr.w	r2, r2, #1
 800270c:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800270e:	e007      	b.n	8002720 <HAL_TIM_Base_Start+0x7c>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8002710:	687b      	ldr	r3, [r7, #4]
 8002712:	681b      	ldr	r3, [r3, #0]
 8002714:	681a      	ldr	r2, [r3, #0]
 8002716:	687b      	ldr	r3, [r7, #4]
 8002718:	681b      	ldr	r3, [r3, #0]
 800271a:	f042 0201 	orr.w	r2, r2, #1
 800271e:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8002720:	2300      	movs	r3, #0
}
 8002722:	4618      	mov	r0, r3
 8002724:	3714      	adds	r7, #20
 8002726:	46bd      	mov	sp, r7
 8002728:	bc80      	pop	{r7}
 800272a:	4770      	bx	lr
 800272c:	40012c00 	.word	0x40012c00
 8002730:	40000400 	.word	0x40000400
 8002734:	40000800 	.word	0x40000800

08002738 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8002738:	b480      	push	{r7}
 800273a:	b085      	sub	sp, #20
 800273c:	af00      	add	r7, sp, #0
 800273e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8002740:	687b      	ldr	r3, [r7, #4]
 8002742:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002746:	b2db      	uxtb	r3, r3
 8002748:	2b01      	cmp	r3, #1
 800274a:	d001      	beq.n	8002750 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 800274c:	2301      	movs	r3, #1
 800274e:	e03a      	b.n	80027c6 <HAL_TIM_Base_Start_IT+0x8e>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002750:	687b      	ldr	r3, [r7, #4]
 8002752:	2202      	movs	r2, #2
 8002754:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8002758:	687b      	ldr	r3, [r7, #4]
 800275a:	681b      	ldr	r3, [r3, #0]
 800275c:	68da      	ldr	r2, [r3, #12]
 800275e:	687b      	ldr	r3, [r7, #4]
 8002760:	681b      	ldr	r3, [r3, #0]
 8002762:	f042 0201 	orr.w	r2, r2, #1
 8002766:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002768:	687b      	ldr	r3, [r7, #4]
 800276a:	681b      	ldr	r3, [r3, #0]
 800276c:	4a18      	ldr	r2, [pc, #96]	; (80027d0 <HAL_TIM_Base_Start_IT+0x98>)
 800276e:	4293      	cmp	r3, r2
 8002770:	d00e      	beq.n	8002790 <HAL_TIM_Base_Start_IT+0x58>
 8002772:	687b      	ldr	r3, [r7, #4]
 8002774:	681b      	ldr	r3, [r3, #0]
 8002776:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800277a:	d009      	beq.n	8002790 <HAL_TIM_Base_Start_IT+0x58>
 800277c:	687b      	ldr	r3, [r7, #4]
 800277e:	681b      	ldr	r3, [r3, #0]
 8002780:	4a14      	ldr	r2, [pc, #80]	; (80027d4 <HAL_TIM_Base_Start_IT+0x9c>)
 8002782:	4293      	cmp	r3, r2
 8002784:	d004      	beq.n	8002790 <HAL_TIM_Base_Start_IT+0x58>
 8002786:	687b      	ldr	r3, [r7, #4]
 8002788:	681b      	ldr	r3, [r3, #0]
 800278a:	4a13      	ldr	r2, [pc, #76]	; (80027d8 <HAL_TIM_Base_Start_IT+0xa0>)
 800278c:	4293      	cmp	r3, r2
 800278e:	d111      	bne.n	80027b4 <HAL_TIM_Base_Start_IT+0x7c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8002790:	687b      	ldr	r3, [r7, #4]
 8002792:	681b      	ldr	r3, [r3, #0]
 8002794:	689b      	ldr	r3, [r3, #8]
 8002796:	f003 0307 	and.w	r3, r3, #7
 800279a:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800279c:	68fb      	ldr	r3, [r7, #12]
 800279e:	2b06      	cmp	r3, #6
 80027a0:	d010      	beq.n	80027c4 <HAL_TIM_Base_Start_IT+0x8c>
    {
      __HAL_TIM_ENABLE(htim);
 80027a2:	687b      	ldr	r3, [r7, #4]
 80027a4:	681b      	ldr	r3, [r3, #0]
 80027a6:	681a      	ldr	r2, [r3, #0]
 80027a8:	687b      	ldr	r3, [r7, #4]
 80027aa:	681b      	ldr	r3, [r3, #0]
 80027ac:	f042 0201 	orr.w	r2, r2, #1
 80027b0:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80027b2:	e007      	b.n	80027c4 <HAL_TIM_Base_Start_IT+0x8c>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80027b4:	687b      	ldr	r3, [r7, #4]
 80027b6:	681b      	ldr	r3, [r3, #0]
 80027b8:	681a      	ldr	r2, [r3, #0]
 80027ba:	687b      	ldr	r3, [r7, #4]
 80027bc:	681b      	ldr	r3, [r3, #0]
 80027be:	f042 0201 	orr.w	r2, r2, #1
 80027c2:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80027c4:	2300      	movs	r3, #0
}
 80027c6:	4618      	mov	r0, r3
 80027c8:	3714      	adds	r7, #20
 80027ca:	46bd      	mov	sp, r7
 80027cc:	bc80      	pop	{r7}
 80027ce:	4770      	bx	lr
 80027d0:	40012c00 	.word	0x40012c00
 80027d4:	40000400 	.word	0x40000400
 80027d8:	40000800 	.word	0x40000800

080027dc <HAL_TIM_Base_Stop_IT>:
  * @brief  Stops the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Stop_IT(TIM_HandleTypeDef *htim)
{
 80027dc:	b480      	push	{r7}
 80027de:	b083      	sub	sp, #12
 80027e0:	af00      	add	r7, sp, #0
 80027e2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Disable the TIM Update interrupt */
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_UPDATE);
 80027e4:	687b      	ldr	r3, [r7, #4]
 80027e6:	681b      	ldr	r3, [r3, #0]
 80027e8:	68da      	ldr	r2, [r3, #12]
 80027ea:	687b      	ldr	r3, [r7, #4]
 80027ec:	681b      	ldr	r3, [r3, #0]
 80027ee:	f022 0201 	bic.w	r2, r2, #1
 80027f2:	60da      	str	r2, [r3, #12]

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 80027f4:	687b      	ldr	r3, [r7, #4]
 80027f6:	681b      	ldr	r3, [r3, #0]
 80027f8:	6a1a      	ldr	r2, [r3, #32]
 80027fa:	f241 1311 	movw	r3, #4369	; 0x1111
 80027fe:	4013      	ands	r3, r2
 8002800:	2b00      	cmp	r3, #0
 8002802:	d10f      	bne.n	8002824 <HAL_TIM_Base_Stop_IT+0x48>
 8002804:	687b      	ldr	r3, [r7, #4]
 8002806:	681b      	ldr	r3, [r3, #0]
 8002808:	6a1a      	ldr	r2, [r3, #32]
 800280a:	f240 4344 	movw	r3, #1092	; 0x444
 800280e:	4013      	ands	r3, r2
 8002810:	2b00      	cmp	r3, #0
 8002812:	d107      	bne.n	8002824 <HAL_TIM_Base_Stop_IT+0x48>
 8002814:	687b      	ldr	r3, [r7, #4]
 8002816:	681b      	ldr	r3, [r3, #0]
 8002818:	681a      	ldr	r2, [r3, #0]
 800281a:	687b      	ldr	r3, [r7, #4]
 800281c:	681b      	ldr	r3, [r3, #0]
 800281e:	f022 0201 	bic.w	r2, r2, #1
 8002822:	601a      	str	r2, [r3, #0]

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_READY;
 8002824:	687b      	ldr	r3, [r7, #4]
 8002826:	2201      	movs	r2, #1
 8002828:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Return function status */
  return HAL_OK;
 800282c:	2300      	movs	r3, #0
}
 800282e:	4618      	mov	r0, r3
 8002830:	370c      	adds	r7, #12
 8002832:	46bd      	mov	sp, r7
 8002834:	bc80      	pop	{r7}
 8002836:	4770      	bx	lr

08002838 <HAL_TIM_OnePulse_Init>:
  *            @arg TIM_OPMODE_SINGLE: Only one pulse will be generated.
  *            @arg TIM_OPMODE_REPETITIVE: Repetitive pulses will be generated.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OnePulse_Init(TIM_HandleTypeDef *htim, uint32_t OnePulseMode)
{
 8002838:	b580      	push	{r7, lr}
 800283a:	b082      	sub	sp, #8
 800283c:	af00      	add	r7, sp, #0
 800283e:	6078      	str	r0, [r7, #4]
 8002840:	6039      	str	r1, [r7, #0]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002842:	687b      	ldr	r3, [r7, #4]
 8002844:	2b00      	cmp	r3, #0
 8002846:	d101      	bne.n	800284c <HAL_TIM_OnePulse_Init+0x14>
  {
    return HAL_ERROR;
 8002848:	2301      	movs	r3, #1
 800284a:	e041      	b.n	80028d0 <HAL_TIM_OnePulse_Init+0x98>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_OPM_MODE(OnePulseMode));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800284c:	687b      	ldr	r3, [r7, #4]
 800284e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002852:	b2db      	uxtb	r3, r3
 8002854:	2b00      	cmp	r3, #0
 8002856:	d106      	bne.n	8002866 <HAL_TIM_OnePulse_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002858:	687b      	ldr	r3, [r7, #4]
 800285a:	2200      	movs	r2, #0
 800285c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->OnePulse_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_OnePulse_MspInit(htim);
 8002860:	6878      	ldr	r0, [r7, #4]
 8002862:	f000 f839 	bl	80028d8 <HAL_TIM_OnePulse_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002866:	687b      	ldr	r3, [r7, #4]
 8002868:	2202      	movs	r2, #2
 800286a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Configure the Time base in the One Pulse Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800286e:	687b      	ldr	r3, [r7, #4]
 8002870:	681a      	ldr	r2, [r3, #0]
 8002872:	687b      	ldr	r3, [r7, #4]
 8002874:	3304      	adds	r3, #4
 8002876:	4619      	mov	r1, r3
 8002878:	4610      	mov	r0, r2
 800287a:	f000 fa69 	bl	8002d50 <TIM_Base_SetConfig>

  /* Reset the OPM Bit */
  htim->Instance->CR1 &= ~TIM_CR1_OPM;
 800287e:	687b      	ldr	r3, [r7, #4]
 8002880:	681b      	ldr	r3, [r3, #0]
 8002882:	681a      	ldr	r2, [r3, #0]
 8002884:	687b      	ldr	r3, [r7, #4]
 8002886:	681b      	ldr	r3, [r3, #0]
 8002888:	f022 0208 	bic.w	r2, r2, #8
 800288c:	601a      	str	r2, [r3, #0]

  /* Configure the OPM Mode */
  htim->Instance->CR1 |= OnePulseMode;
 800288e:	687b      	ldr	r3, [r7, #4]
 8002890:	681b      	ldr	r3, [r3, #0]
 8002892:	6819      	ldr	r1, [r3, #0]
 8002894:	687b      	ldr	r3, [r7, #4]
 8002896:	681b      	ldr	r3, [r3, #0]
 8002898:	683a      	ldr	r2, [r7, #0]
 800289a:	430a      	orrs	r2, r1
 800289c:	601a      	str	r2, [r3, #0]

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800289e:	687b      	ldr	r3, [r7, #4]
 80028a0:	2201      	movs	r2, #1
 80028a2:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 80028a6:	687b      	ldr	r3, [r7, #4]
 80028a8:	2201      	movs	r2, #1
 80028aa:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 80028ae:	687b      	ldr	r3, [r7, #4]
 80028b0:	2201      	movs	r2, #1
 80028b2:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 80028b6:	687b      	ldr	r3, [r7, #4]
 80028b8:	2201      	movs	r2, #1
 80028ba:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 80028be:	687b      	ldr	r3, [r7, #4]
 80028c0:	2201      	movs	r2, #1
 80028c2:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80028c6:	687b      	ldr	r3, [r7, #4]
 80028c8:	2201      	movs	r2, #1
 80028ca:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80028ce:	2300      	movs	r3, #0
}
 80028d0:	4618      	mov	r0, r3
 80028d2:	3708      	adds	r7, #8
 80028d4:	46bd      	mov	sp, r7
 80028d6:	bd80      	pop	{r7, pc}

080028d8 <HAL_TIM_OnePulse_MspInit>:
  * @brief  Initializes the TIM One Pulse MSP.
  * @param  htim TIM One Pulse handle
  * @retval None
  */
__weak void HAL_TIM_OnePulse_MspInit(TIM_HandleTypeDef *htim)
{
 80028d8:	b480      	push	{r7}
 80028da:	b083      	sub	sp, #12
 80028dc:	af00      	add	r7, sp, #0
 80028de:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OnePulse_MspInit could be implemented in the user file
   */
}
 80028e0:	bf00      	nop
 80028e2:	370c      	adds	r7, #12
 80028e4:	46bd      	mov	sp, r7
 80028e6:	bc80      	pop	{r7}
 80028e8:	4770      	bx	lr

080028ea <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80028ea:	b580      	push	{r7, lr}
 80028ec:	b082      	sub	sp, #8
 80028ee:	af00      	add	r7, sp, #0
 80028f0:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 80028f2:	687b      	ldr	r3, [r7, #4]
 80028f4:	681b      	ldr	r3, [r3, #0]
 80028f6:	691b      	ldr	r3, [r3, #16]
 80028f8:	f003 0302 	and.w	r3, r3, #2
 80028fc:	2b02      	cmp	r3, #2
 80028fe:	d122      	bne.n	8002946 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8002900:	687b      	ldr	r3, [r7, #4]
 8002902:	681b      	ldr	r3, [r3, #0]
 8002904:	68db      	ldr	r3, [r3, #12]
 8002906:	f003 0302 	and.w	r3, r3, #2
 800290a:	2b02      	cmp	r3, #2
 800290c:	d11b      	bne.n	8002946 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 800290e:	687b      	ldr	r3, [r7, #4]
 8002910:	681b      	ldr	r3, [r3, #0]
 8002912:	f06f 0202 	mvn.w	r2, #2
 8002916:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8002918:	687b      	ldr	r3, [r7, #4]
 800291a:	2201      	movs	r2, #1
 800291c:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800291e:	687b      	ldr	r3, [r7, #4]
 8002920:	681b      	ldr	r3, [r3, #0]
 8002922:	699b      	ldr	r3, [r3, #24]
 8002924:	f003 0303 	and.w	r3, r3, #3
 8002928:	2b00      	cmp	r3, #0
 800292a:	d003      	beq.n	8002934 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800292c:	6878      	ldr	r0, [r7, #4]
 800292e:	f000 f9f3 	bl	8002d18 <HAL_TIM_IC_CaptureCallback>
 8002932:	e005      	b.n	8002940 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8002934:	6878      	ldr	r0, [r7, #4]
 8002936:	f000 f9e6 	bl	8002d06 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800293a:	6878      	ldr	r0, [r7, #4]
 800293c:	f000 f9f5 	bl	8002d2a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002940:	687b      	ldr	r3, [r7, #4]
 8002942:	2200      	movs	r2, #0
 8002944:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8002946:	687b      	ldr	r3, [r7, #4]
 8002948:	681b      	ldr	r3, [r3, #0]
 800294a:	691b      	ldr	r3, [r3, #16]
 800294c:	f003 0304 	and.w	r3, r3, #4
 8002950:	2b04      	cmp	r3, #4
 8002952:	d122      	bne.n	800299a <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8002954:	687b      	ldr	r3, [r7, #4]
 8002956:	681b      	ldr	r3, [r3, #0]
 8002958:	68db      	ldr	r3, [r3, #12]
 800295a:	f003 0304 	and.w	r3, r3, #4
 800295e:	2b04      	cmp	r3, #4
 8002960:	d11b      	bne.n	800299a <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8002962:	687b      	ldr	r3, [r7, #4]
 8002964:	681b      	ldr	r3, [r3, #0]
 8002966:	f06f 0204 	mvn.w	r2, #4
 800296a:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800296c:	687b      	ldr	r3, [r7, #4]
 800296e:	2202      	movs	r2, #2
 8002970:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8002972:	687b      	ldr	r3, [r7, #4]
 8002974:	681b      	ldr	r3, [r3, #0]
 8002976:	699b      	ldr	r3, [r3, #24]
 8002978:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800297c:	2b00      	cmp	r3, #0
 800297e:	d003      	beq.n	8002988 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002980:	6878      	ldr	r0, [r7, #4]
 8002982:	f000 f9c9 	bl	8002d18 <HAL_TIM_IC_CaptureCallback>
 8002986:	e005      	b.n	8002994 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002988:	6878      	ldr	r0, [r7, #4]
 800298a:	f000 f9bc 	bl	8002d06 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800298e:	6878      	ldr	r0, [r7, #4]
 8002990:	f000 f9cb 	bl	8002d2a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002994:	687b      	ldr	r3, [r7, #4]
 8002996:	2200      	movs	r2, #0
 8002998:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 800299a:	687b      	ldr	r3, [r7, #4]
 800299c:	681b      	ldr	r3, [r3, #0]
 800299e:	691b      	ldr	r3, [r3, #16]
 80029a0:	f003 0308 	and.w	r3, r3, #8
 80029a4:	2b08      	cmp	r3, #8
 80029a6:	d122      	bne.n	80029ee <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 80029a8:	687b      	ldr	r3, [r7, #4]
 80029aa:	681b      	ldr	r3, [r3, #0]
 80029ac:	68db      	ldr	r3, [r3, #12]
 80029ae:	f003 0308 	and.w	r3, r3, #8
 80029b2:	2b08      	cmp	r3, #8
 80029b4:	d11b      	bne.n	80029ee <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 80029b6:	687b      	ldr	r3, [r7, #4]
 80029b8:	681b      	ldr	r3, [r3, #0]
 80029ba:	f06f 0208 	mvn.w	r2, #8
 80029be:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80029c0:	687b      	ldr	r3, [r7, #4]
 80029c2:	2204      	movs	r2, #4
 80029c4:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80029c6:	687b      	ldr	r3, [r7, #4]
 80029c8:	681b      	ldr	r3, [r3, #0]
 80029ca:	69db      	ldr	r3, [r3, #28]
 80029cc:	f003 0303 	and.w	r3, r3, #3
 80029d0:	2b00      	cmp	r3, #0
 80029d2:	d003      	beq.n	80029dc <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80029d4:	6878      	ldr	r0, [r7, #4]
 80029d6:	f000 f99f 	bl	8002d18 <HAL_TIM_IC_CaptureCallback>
 80029da:	e005      	b.n	80029e8 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80029dc:	6878      	ldr	r0, [r7, #4]
 80029de:	f000 f992 	bl	8002d06 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80029e2:	6878      	ldr	r0, [r7, #4]
 80029e4:	f000 f9a1 	bl	8002d2a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80029e8:	687b      	ldr	r3, [r7, #4]
 80029ea:	2200      	movs	r2, #0
 80029ec:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 80029ee:	687b      	ldr	r3, [r7, #4]
 80029f0:	681b      	ldr	r3, [r3, #0]
 80029f2:	691b      	ldr	r3, [r3, #16]
 80029f4:	f003 0310 	and.w	r3, r3, #16
 80029f8:	2b10      	cmp	r3, #16
 80029fa:	d122      	bne.n	8002a42 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 80029fc:	687b      	ldr	r3, [r7, #4]
 80029fe:	681b      	ldr	r3, [r3, #0]
 8002a00:	68db      	ldr	r3, [r3, #12]
 8002a02:	f003 0310 	and.w	r3, r3, #16
 8002a06:	2b10      	cmp	r3, #16
 8002a08:	d11b      	bne.n	8002a42 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8002a0a:	687b      	ldr	r3, [r7, #4]
 8002a0c:	681b      	ldr	r3, [r3, #0]
 8002a0e:	f06f 0210 	mvn.w	r2, #16
 8002a12:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8002a14:	687b      	ldr	r3, [r7, #4]
 8002a16:	2208      	movs	r2, #8
 8002a18:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8002a1a:	687b      	ldr	r3, [r7, #4]
 8002a1c:	681b      	ldr	r3, [r3, #0]
 8002a1e:	69db      	ldr	r3, [r3, #28]
 8002a20:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002a24:	2b00      	cmp	r3, #0
 8002a26:	d003      	beq.n	8002a30 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002a28:	6878      	ldr	r0, [r7, #4]
 8002a2a:	f000 f975 	bl	8002d18 <HAL_TIM_IC_CaptureCallback>
 8002a2e:	e005      	b.n	8002a3c <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002a30:	6878      	ldr	r0, [r7, #4]
 8002a32:	f000 f968 	bl	8002d06 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002a36:	6878      	ldr	r0, [r7, #4]
 8002a38:	f000 f977 	bl	8002d2a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002a3c:	687b      	ldr	r3, [r7, #4]
 8002a3e:	2200      	movs	r2, #0
 8002a40:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8002a42:	687b      	ldr	r3, [r7, #4]
 8002a44:	681b      	ldr	r3, [r3, #0]
 8002a46:	691b      	ldr	r3, [r3, #16]
 8002a48:	f003 0301 	and.w	r3, r3, #1
 8002a4c:	2b01      	cmp	r3, #1
 8002a4e:	d10e      	bne.n	8002a6e <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8002a50:	687b      	ldr	r3, [r7, #4]
 8002a52:	681b      	ldr	r3, [r3, #0]
 8002a54:	68db      	ldr	r3, [r3, #12]
 8002a56:	f003 0301 	and.w	r3, r3, #1
 8002a5a:	2b01      	cmp	r3, #1
 8002a5c:	d107      	bne.n	8002a6e <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8002a5e:	687b      	ldr	r3, [r7, #4]
 8002a60:	681b      	ldr	r3, [r3, #0]
 8002a62:	f06f 0201 	mvn.w	r2, #1
 8002a66:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8002a68:	6878      	ldr	r0, [r7, #4]
 8002a6a:	f7fe f877 	bl	8000b5c <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8002a6e:	687b      	ldr	r3, [r7, #4]
 8002a70:	681b      	ldr	r3, [r3, #0]
 8002a72:	691b      	ldr	r3, [r3, #16]
 8002a74:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002a78:	2b80      	cmp	r3, #128	; 0x80
 8002a7a:	d10e      	bne.n	8002a9a <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8002a7c:	687b      	ldr	r3, [r7, #4]
 8002a7e:	681b      	ldr	r3, [r3, #0]
 8002a80:	68db      	ldr	r3, [r3, #12]
 8002a82:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002a86:	2b80      	cmp	r3, #128	; 0x80
 8002a88:	d107      	bne.n	8002a9a <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8002a8a:	687b      	ldr	r3, [r7, #4]
 8002a8c:	681b      	ldr	r3, [r3, #0]
 8002a8e:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8002a92:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8002a94:	6878      	ldr	r0, [r7, #4]
 8002a96:	f000 fb48 	bl	800312a <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8002a9a:	687b      	ldr	r3, [r7, #4]
 8002a9c:	681b      	ldr	r3, [r3, #0]
 8002a9e:	691b      	ldr	r3, [r3, #16]
 8002aa0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002aa4:	2b40      	cmp	r3, #64	; 0x40
 8002aa6:	d10e      	bne.n	8002ac6 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8002aa8:	687b      	ldr	r3, [r7, #4]
 8002aaa:	681b      	ldr	r3, [r3, #0]
 8002aac:	68db      	ldr	r3, [r3, #12]
 8002aae:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002ab2:	2b40      	cmp	r3, #64	; 0x40
 8002ab4:	d107      	bne.n	8002ac6 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8002ab6:	687b      	ldr	r3, [r7, #4]
 8002ab8:	681b      	ldr	r3, [r3, #0]
 8002aba:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8002abe:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8002ac0:	6878      	ldr	r0, [r7, #4]
 8002ac2:	f000 f93b 	bl	8002d3c <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8002ac6:	687b      	ldr	r3, [r7, #4]
 8002ac8:	681b      	ldr	r3, [r3, #0]
 8002aca:	691b      	ldr	r3, [r3, #16]
 8002acc:	f003 0320 	and.w	r3, r3, #32
 8002ad0:	2b20      	cmp	r3, #32
 8002ad2:	d10e      	bne.n	8002af2 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8002ad4:	687b      	ldr	r3, [r7, #4]
 8002ad6:	681b      	ldr	r3, [r3, #0]
 8002ad8:	68db      	ldr	r3, [r3, #12]
 8002ada:	f003 0320 	and.w	r3, r3, #32
 8002ade:	2b20      	cmp	r3, #32
 8002ae0:	d107      	bne.n	8002af2 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8002ae2:	687b      	ldr	r3, [r7, #4]
 8002ae4:	681b      	ldr	r3, [r3, #0]
 8002ae6:	f06f 0220 	mvn.w	r2, #32
 8002aea:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8002aec:	6878      	ldr	r0, [r7, #4]
 8002aee:	f000 fb13 	bl	8003118 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8002af2:	bf00      	nop
 8002af4:	3708      	adds	r7, #8
 8002af6:	46bd      	mov	sp, r7
 8002af8:	bd80      	pop	{r7, pc}

08002afa <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8002afa:	b580      	push	{r7, lr}
 8002afc:	b084      	sub	sp, #16
 8002afe:	af00      	add	r7, sp, #0
 8002b00:	6078      	str	r0, [r7, #4]
 8002b02:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8002b04:	687b      	ldr	r3, [r7, #4]
 8002b06:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002b0a:	2b01      	cmp	r3, #1
 8002b0c:	d101      	bne.n	8002b12 <HAL_TIM_ConfigClockSource+0x18>
 8002b0e:	2302      	movs	r3, #2
 8002b10:	e0b3      	b.n	8002c7a <HAL_TIM_ConfigClockSource+0x180>
 8002b12:	687b      	ldr	r3, [r7, #4]
 8002b14:	2201      	movs	r2, #1
 8002b16:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8002b1a:	687b      	ldr	r3, [r7, #4]
 8002b1c:	2202      	movs	r2, #2
 8002b1e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8002b22:	687b      	ldr	r3, [r7, #4]
 8002b24:	681b      	ldr	r3, [r3, #0]
 8002b26:	689b      	ldr	r3, [r3, #8]
 8002b28:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8002b2a:	68fb      	ldr	r3, [r7, #12]
 8002b2c:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8002b30:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8002b32:	68fb      	ldr	r3, [r7, #12]
 8002b34:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8002b38:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 8002b3a:	687b      	ldr	r3, [r7, #4]
 8002b3c:	681b      	ldr	r3, [r3, #0]
 8002b3e:	68fa      	ldr	r2, [r7, #12]
 8002b40:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8002b42:	683b      	ldr	r3, [r7, #0]
 8002b44:	681b      	ldr	r3, [r3, #0]
 8002b46:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002b4a:	d03e      	beq.n	8002bca <HAL_TIM_ConfigClockSource+0xd0>
 8002b4c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002b50:	f200 8087 	bhi.w	8002c62 <HAL_TIM_ConfigClockSource+0x168>
 8002b54:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002b58:	f000 8085 	beq.w	8002c66 <HAL_TIM_ConfigClockSource+0x16c>
 8002b5c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002b60:	d87f      	bhi.n	8002c62 <HAL_TIM_ConfigClockSource+0x168>
 8002b62:	2b70      	cmp	r3, #112	; 0x70
 8002b64:	d01a      	beq.n	8002b9c <HAL_TIM_ConfigClockSource+0xa2>
 8002b66:	2b70      	cmp	r3, #112	; 0x70
 8002b68:	d87b      	bhi.n	8002c62 <HAL_TIM_ConfigClockSource+0x168>
 8002b6a:	2b60      	cmp	r3, #96	; 0x60
 8002b6c:	d050      	beq.n	8002c10 <HAL_TIM_ConfigClockSource+0x116>
 8002b6e:	2b60      	cmp	r3, #96	; 0x60
 8002b70:	d877      	bhi.n	8002c62 <HAL_TIM_ConfigClockSource+0x168>
 8002b72:	2b50      	cmp	r3, #80	; 0x50
 8002b74:	d03c      	beq.n	8002bf0 <HAL_TIM_ConfigClockSource+0xf6>
 8002b76:	2b50      	cmp	r3, #80	; 0x50
 8002b78:	d873      	bhi.n	8002c62 <HAL_TIM_ConfigClockSource+0x168>
 8002b7a:	2b40      	cmp	r3, #64	; 0x40
 8002b7c:	d058      	beq.n	8002c30 <HAL_TIM_ConfigClockSource+0x136>
 8002b7e:	2b40      	cmp	r3, #64	; 0x40
 8002b80:	d86f      	bhi.n	8002c62 <HAL_TIM_ConfigClockSource+0x168>
 8002b82:	2b30      	cmp	r3, #48	; 0x30
 8002b84:	d064      	beq.n	8002c50 <HAL_TIM_ConfigClockSource+0x156>
 8002b86:	2b30      	cmp	r3, #48	; 0x30
 8002b88:	d86b      	bhi.n	8002c62 <HAL_TIM_ConfigClockSource+0x168>
 8002b8a:	2b20      	cmp	r3, #32
 8002b8c:	d060      	beq.n	8002c50 <HAL_TIM_ConfigClockSource+0x156>
 8002b8e:	2b20      	cmp	r3, #32
 8002b90:	d867      	bhi.n	8002c62 <HAL_TIM_ConfigClockSource+0x168>
 8002b92:	2b00      	cmp	r3, #0
 8002b94:	d05c      	beq.n	8002c50 <HAL_TIM_ConfigClockSource+0x156>
 8002b96:	2b10      	cmp	r3, #16
 8002b98:	d05a      	beq.n	8002c50 <HAL_TIM_ConfigClockSource+0x156>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
        break;
      }

    default:
      break;
 8002b9a:	e062      	b.n	8002c62 <HAL_TIM_ConfigClockSource+0x168>
      TIM_ETR_SetConfig(htim->Instance,
 8002b9c:	687b      	ldr	r3, [r7, #4]
 8002b9e:	6818      	ldr	r0, [r3, #0]
 8002ba0:	683b      	ldr	r3, [r7, #0]
 8002ba2:	6899      	ldr	r1, [r3, #8]
 8002ba4:	683b      	ldr	r3, [r7, #0]
 8002ba6:	685a      	ldr	r2, [r3, #4]
 8002ba8:	683b      	ldr	r3, [r7, #0]
 8002baa:	68db      	ldr	r3, [r3, #12]
 8002bac:	f000 fa37 	bl	800301e <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 8002bb0:	687b      	ldr	r3, [r7, #4]
 8002bb2:	681b      	ldr	r3, [r3, #0]
 8002bb4:	689b      	ldr	r3, [r3, #8]
 8002bb6:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8002bb8:	68fb      	ldr	r3, [r7, #12]
 8002bba:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8002bbe:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 8002bc0:	687b      	ldr	r3, [r7, #4]
 8002bc2:	681b      	ldr	r3, [r3, #0]
 8002bc4:	68fa      	ldr	r2, [r7, #12]
 8002bc6:	609a      	str	r2, [r3, #8]
      break;
 8002bc8:	e04e      	b.n	8002c68 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_ETR_SetConfig(htim->Instance,
 8002bca:	687b      	ldr	r3, [r7, #4]
 8002bcc:	6818      	ldr	r0, [r3, #0]
 8002bce:	683b      	ldr	r3, [r7, #0]
 8002bd0:	6899      	ldr	r1, [r3, #8]
 8002bd2:	683b      	ldr	r3, [r7, #0]
 8002bd4:	685a      	ldr	r2, [r3, #4]
 8002bd6:	683b      	ldr	r3, [r7, #0]
 8002bd8:	68db      	ldr	r3, [r3, #12]
 8002bda:	f000 fa20 	bl	800301e <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8002bde:	687b      	ldr	r3, [r7, #4]
 8002be0:	681b      	ldr	r3, [r3, #0]
 8002be2:	689a      	ldr	r2, [r3, #8]
 8002be4:	687b      	ldr	r3, [r7, #4]
 8002be6:	681b      	ldr	r3, [r3, #0]
 8002be8:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8002bec:	609a      	str	r2, [r3, #8]
      break;
 8002bee:	e03b      	b.n	8002c68 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8002bf0:	687b      	ldr	r3, [r7, #4]
 8002bf2:	6818      	ldr	r0, [r3, #0]
 8002bf4:	683b      	ldr	r3, [r7, #0]
 8002bf6:	6859      	ldr	r1, [r3, #4]
 8002bf8:	683b      	ldr	r3, [r7, #0]
 8002bfa:	68db      	ldr	r3, [r3, #12]
 8002bfc:	461a      	mov	r2, r3
 8002bfe:	f000 f997 	bl	8002f30 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8002c02:	687b      	ldr	r3, [r7, #4]
 8002c04:	681b      	ldr	r3, [r3, #0]
 8002c06:	2150      	movs	r1, #80	; 0x50
 8002c08:	4618      	mov	r0, r3
 8002c0a:	f000 f9ee 	bl	8002fea <TIM_ITRx_SetConfig>
      break;
 8002c0e:	e02b      	b.n	8002c68 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI2_ConfigInputStage(htim->Instance,
 8002c10:	687b      	ldr	r3, [r7, #4]
 8002c12:	6818      	ldr	r0, [r3, #0]
 8002c14:	683b      	ldr	r3, [r7, #0]
 8002c16:	6859      	ldr	r1, [r3, #4]
 8002c18:	683b      	ldr	r3, [r7, #0]
 8002c1a:	68db      	ldr	r3, [r3, #12]
 8002c1c:	461a      	mov	r2, r3
 8002c1e:	f000 f9b5 	bl	8002f8c <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8002c22:	687b      	ldr	r3, [r7, #4]
 8002c24:	681b      	ldr	r3, [r3, #0]
 8002c26:	2160      	movs	r1, #96	; 0x60
 8002c28:	4618      	mov	r0, r3
 8002c2a:	f000 f9de 	bl	8002fea <TIM_ITRx_SetConfig>
      break;
 8002c2e:	e01b      	b.n	8002c68 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8002c30:	687b      	ldr	r3, [r7, #4]
 8002c32:	6818      	ldr	r0, [r3, #0]
 8002c34:	683b      	ldr	r3, [r7, #0]
 8002c36:	6859      	ldr	r1, [r3, #4]
 8002c38:	683b      	ldr	r3, [r7, #0]
 8002c3a:	68db      	ldr	r3, [r3, #12]
 8002c3c:	461a      	mov	r2, r3
 8002c3e:	f000 f977 	bl	8002f30 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8002c42:	687b      	ldr	r3, [r7, #4]
 8002c44:	681b      	ldr	r3, [r3, #0]
 8002c46:	2140      	movs	r1, #64	; 0x40
 8002c48:	4618      	mov	r0, r3
 8002c4a:	f000 f9ce 	bl	8002fea <TIM_ITRx_SetConfig>
      break;
 8002c4e:	e00b      	b.n	8002c68 <HAL_TIM_ConfigClockSource+0x16e>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8002c50:	687b      	ldr	r3, [r7, #4]
 8002c52:	681a      	ldr	r2, [r3, #0]
 8002c54:	683b      	ldr	r3, [r7, #0]
 8002c56:	681b      	ldr	r3, [r3, #0]
 8002c58:	4619      	mov	r1, r3
 8002c5a:	4610      	mov	r0, r2
 8002c5c:	f000 f9c5 	bl	8002fea <TIM_ITRx_SetConfig>
        break;
 8002c60:	e002      	b.n	8002c68 <HAL_TIM_ConfigClockSource+0x16e>
      break;
 8002c62:	bf00      	nop
 8002c64:	e000      	b.n	8002c68 <HAL_TIM_ConfigClockSource+0x16e>
      break;
 8002c66:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8002c68:	687b      	ldr	r3, [r7, #4]
 8002c6a:	2201      	movs	r2, #1
 8002c6c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8002c70:	687b      	ldr	r3, [r7, #4]
 8002c72:	2200      	movs	r2, #0
 8002c74:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8002c78:	2300      	movs	r3, #0
}
 8002c7a:	4618      	mov	r0, r3
 8002c7c:	3710      	adds	r7, #16
 8002c7e:	46bd      	mov	sp, r7
 8002c80:	bd80      	pop	{r7, pc}

08002c82 <HAL_TIM_SlaveConfigSynchro>:
  *         timer input or external trigger input) and the Slave mode
  *         (Disable, Reset, Gated, Trigger, External clock mode 1).
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_SlaveConfigSynchro(TIM_HandleTypeDef *htim, TIM_SlaveConfigTypeDef *sSlaveConfig)
{
 8002c82:	b580      	push	{r7, lr}
 8002c84:	b082      	sub	sp, #8
 8002c86:	af00      	add	r7, sp, #0
 8002c88:	6078      	str	r0, [r7, #4]
 8002c8a:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_SLAVE_INSTANCE(htim->Instance));
  assert_param(IS_TIM_SLAVE_MODE(sSlaveConfig->SlaveMode));
  assert_param(IS_TIM_TRIGGER_SELECTION(sSlaveConfig->InputTrigger));

  __HAL_LOCK(htim);
 8002c8c:	687b      	ldr	r3, [r7, #4]
 8002c8e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002c92:	2b01      	cmp	r3, #1
 8002c94:	d101      	bne.n	8002c9a <HAL_TIM_SlaveConfigSynchro+0x18>
 8002c96:	2302      	movs	r3, #2
 8002c98:	e031      	b.n	8002cfe <HAL_TIM_SlaveConfigSynchro+0x7c>
 8002c9a:	687b      	ldr	r3, [r7, #4]
 8002c9c:	2201      	movs	r2, #1
 8002c9e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8002ca2:	687b      	ldr	r3, [r7, #4]
 8002ca4:	2202      	movs	r2, #2
 8002ca6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  if (TIM_SlaveTimer_SetConfig(htim, sSlaveConfig) != HAL_OK)
 8002caa:	6839      	ldr	r1, [r7, #0]
 8002cac:	6878      	ldr	r0, [r7, #4]
 8002cae:	f000 f8b1 	bl	8002e14 <TIM_SlaveTimer_SetConfig>
 8002cb2:	4603      	mov	r3, r0
 8002cb4:	2b00      	cmp	r3, #0
 8002cb6:	d009      	beq.n	8002ccc <HAL_TIM_SlaveConfigSynchro+0x4a>
  {
    htim->State = HAL_TIM_STATE_READY;
 8002cb8:	687b      	ldr	r3, [r7, #4]
 8002cba:	2201      	movs	r2, #1
 8002cbc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    __HAL_UNLOCK(htim);
 8002cc0:	687b      	ldr	r3, [r7, #4]
 8002cc2:	2200      	movs	r2, #0
 8002cc4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    return HAL_ERROR;
 8002cc8:	2301      	movs	r3, #1
 8002cca:	e018      	b.n	8002cfe <HAL_TIM_SlaveConfigSynchro+0x7c>
  }

  /* Disable Trigger Interrupt */
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_TRIGGER);
 8002ccc:	687b      	ldr	r3, [r7, #4]
 8002cce:	681b      	ldr	r3, [r3, #0]
 8002cd0:	68da      	ldr	r2, [r3, #12]
 8002cd2:	687b      	ldr	r3, [r7, #4]
 8002cd4:	681b      	ldr	r3, [r3, #0]
 8002cd6:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8002cda:	60da      	str	r2, [r3, #12]

  /* Disable Trigger DMA request */
  __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_TRIGGER);
 8002cdc:	687b      	ldr	r3, [r7, #4]
 8002cde:	681b      	ldr	r3, [r3, #0]
 8002ce0:	68da      	ldr	r2, [r3, #12]
 8002ce2:	687b      	ldr	r3, [r7, #4]
 8002ce4:	681b      	ldr	r3, [r3, #0]
 8002ce6:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8002cea:	60da      	str	r2, [r3, #12]

  htim->State = HAL_TIM_STATE_READY;
 8002cec:	687b      	ldr	r3, [r7, #4]
 8002cee:	2201      	movs	r2, #1
 8002cf0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8002cf4:	687b      	ldr	r3, [r7, #4]
 8002cf6:	2200      	movs	r2, #0
 8002cf8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8002cfc:	2300      	movs	r3, #0
}
 8002cfe:	4618      	mov	r0, r3
 8002d00:	3708      	adds	r7, #8
 8002d02:	46bd      	mov	sp, r7
 8002d04:	bd80      	pop	{r7, pc}

08002d06 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8002d06:	b480      	push	{r7}
 8002d08:	b083      	sub	sp, #12
 8002d0a:	af00      	add	r7, sp, #0
 8002d0c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8002d0e:	bf00      	nop
 8002d10:	370c      	adds	r7, #12
 8002d12:	46bd      	mov	sp, r7
 8002d14:	bc80      	pop	{r7}
 8002d16:	4770      	bx	lr

08002d18 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8002d18:	b480      	push	{r7}
 8002d1a:	b083      	sub	sp, #12
 8002d1c:	af00      	add	r7, sp, #0
 8002d1e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8002d20:	bf00      	nop
 8002d22:	370c      	adds	r7, #12
 8002d24:	46bd      	mov	sp, r7
 8002d26:	bc80      	pop	{r7}
 8002d28:	4770      	bx	lr

08002d2a <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8002d2a:	b480      	push	{r7}
 8002d2c:	b083      	sub	sp, #12
 8002d2e:	af00      	add	r7, sp, #0
 8002d30:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8002d32:	bf00      	nop
 8002d34:	370c      	adds	r7, #12
 8002d36:	46bd      	mov	sp, r7
 8002d38:	bc80      	pop	{r7}
 8002d3a:	4770      	bx	lr

08002d3c <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8002d3c:	b480      	push	{r7}
 8002d3e:	b083      	sub	sp, #12
 8002d40:	af00      	add	r7, sp, #0
 8002d42:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8002d44:	bf00      	nop
 8002d46:	370c      	adds	r7, #12
 8002d48:	46bd      	mov	sp, r7
 8002d4a:	bc80      	pop	{r7}
 8002d4c:	4770      	bx	lr
	...

08002d50 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8002d50:	b480      	push	{r7}
 8002d52:	b085      	sub	sp, #20
 8002d54:	af00      	add	r7, sp, #0
 8002d56:	6078      	str	r0, [r7, #4]
 8002d58:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8002d5a:	687b      	ldr	r3, [r7, #4]
 8002d5c:	681b      	ldr	r3, [r3, #0]
 8002d5e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8002d60:	687b      	ldr	r3, [r7, #4]
 8002d62:	4a29      	ldr	r2, [pc, #164]	; (8002e08 <TIM_Base_SetConfig+0xb8>)
 8002d64:	4293      	cmp	r3, r2
 8002d66:	d00b      	beq.n	8002d80 <TIM_Base_SetConfig+0x30>
 8002d68:	687b      	ldr	r3, [r7, #4]
 8002d6a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002d6e:	d007      	beq.n	8002d80 <TIM_Base_SetConfig+0x30>
 8002d70:	687b      	ldr	r3, [r7, #4]
 8002d72:	4a26      	ldr	r2, [pc, #152]	; (8002e0c <TIM_Base_SetConfig+0xbc>)
 8002d74:	4293      	cmp	r3, r2
 8002d76:	d003      	beq.n	8002d80 <TIM_Base_SetConfig+0x30>
 8002d78:	687b      	ldr	r3, [r7, #4]
 8002d7a:	4a25      	ldr	r2, [pc, #148]	; (8002e10 <TIM_Base_SetConfig+0xc0>)
 8002d7c:	4293      	cmp	r3, r2
 8002d7e:	d108      	bne.n	8002d92 <TIM_Base_SetConfig+0x42>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8002d80:	68fb      	ldr	r3, [r7, #12]
 8002d82:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002d86:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8002d88:	683b      	ldr	r3, [r7, #0]
 8002d8a:	685b      	ldr	r3, [r3, #4]
 8002d8c:	68fa      	ldr	r2, [r7, #12]
 8002d8e:	4313      	orrs	r3, r2
 8002d90:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8002d92:	687b      	ldr	r3, [r7, #4]
 8002d94:	4a1c      	ldr	r2, [pc, #112]	; (8002e08 <TIM_Base_SetConfig+0xb8>)
 8002d96:	4293      	cmp	r3, r2
 8002d98:	d00b      	beq.n	8002db2 <TIM_Base_SetConfig+0x62>
 8002d9a:	687b      	ldr	r3, [r7, #4]
 8002d9c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002da0:	d007      	beq.n	8002db2 <TIM_Base_SetConfig+0x62>
 8002da2:	687b      	ldr	r3, [r7, #4]
 8002da4:	4a19      	ldr	r2, [pc, #100]	; (8002e0c <TIM_Base_SetConfig+0xbc>)
 8002da6:	4293      	cmp	r3, r2
 8002da8:	d003      	beq.n	8002db2 <TIM_Base_SetConfig+0x62>
 8002daa:	687b      	ldr	r3, [r7, #4]
 8002dac:	4a18      	ldr	r2, [pc, #96]	; (8002e10 <TIM_Base_SetConfig+0xc0>)
 8002dae:	4293      	cmp	r3, r2
 8002db0:	d108      	bne.n	8002dc4 <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8002db2:	68fb      	ldr	r3, [r7, #12]
 8002db4:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002db8:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8002dba:	683b      	ldr	r3, [r7, #0]
 8002dbc:	68db      	ldr	r3, [r3, #12]
 8002dbe:	68fa      	ldr	r2, [r7, #12]
 8002dc0:	4313      	orrs	r3, r2
 8002dc2:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8002dc4:	68fb      	ldr	r3, [r7, #12]
 8002dc6:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8002dca:	683b      	ldr	r3, [r7, #0]
 8002dcc:	695b      	ldr	r3, [r3, #20]
 8002dce:	4313      	orrs	r3, r2
 8002dd0:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8002dd2:	687b      	ldr	r3, [r7, #4]
 8002dd4:	68fa      	ldr	r2, [r7, #12]
 8002dd6:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8002dd8:	683b      	ldr	r3, [r7, #0]
 8002dda:	689a      	ldr	r2, [r3, #8]
 8002ddc:	687b      	ldr	r3, [r7, #4]
 8002dde:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8002de0:	683b      	ldr	r3, [r7, #0]
 8002de2:	681a      	ldr	r2, [r3, #0]
 8002de4:	687b      	ldr	r3, [r7, #4]
 8002de6:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8002de8:	687b      	ldr	r3, [r7, #4]
 8002dea:	4a07      	ldr	r2, [pc, #28]	; (8002e08 <TIM_Base_SetConfig+0xb8>)
 8002dec:	4293      	cmp	r3, r2
 8002dee:	d103      	bne.n	8002df8 <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8002df0:	683b      	ldr	r3, [r7, #0]
 8002df2:	691a      	ldr	r2, [r3, #16]
 8002df4:	687b      	ldr	r3, [r7, #4]
 8002df6:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8002df8:	687b      	ldr	r3, [r7, #4]
 8002dfa:	2201      	movs	r2, #1
 8002dfc:	615a      	str	r2, [r3, #20]
}
 8002dfe:	bf00      	nop
 8002e00:	3714      	adds	r7, #20
 8002e02:	46bd      	mov	sp, r7
 8002e04:	bc80      	pop	{r7}
 8002e06:	4770      	bx	lr
 8002e08:	40012c00 	.word	0x40012c00
 8002e0c:	40000400 	.word	0x40000400
 8002e10:	40000800 	.word	0x40000800

08002e14 <TIM_SlaveTimer_SetConfig>:
  * @param  sSlaveConfig Slave timer configuration
  * @retval None
  */
static HAL_StatusTypeDef TIM_SlaveTimer_SetConfig(TIM_HandleTypeDef *htim,
                                                  TIM_SlaveConfigTypeDef *sSlaveConfig)
{
 8002e14:	b580      	push	{r7, lr}
 8002e16:	b086      	sub	sp, #24
 8002e18:	af00      	add	r7, sp, #0
 8002e1a:	6078      	str	r0, [r7, #4]
 8002e1c:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8002e1e:	687b      	ldr	r3, [r7, #4]
 8002e20:	681b      	ldr	r3, [r3, #0]
 8002e22:	689b      	ldr	r3, [r3, #8]
 8002e24:	617b      	str	r3, [r7, #20]

  /* Reset the Trigger Selection Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8002e26:	697b      	ldr	r3, [r7, #20]
 8002e28:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002e2c:	617b      	str	r3, [r7, #20]
  /* Set the Input Trigger source */
  tmpsmcr |= sSlaveConfig->InputTrigger;
 8002e2e:	683b      	ldr	r3, [r7, #0]
 8002e30:	685b      	ldr	r3, [r3, #4]
 8002e32:	697a      	ldr	r2, [r7, #20]
 8002e34:	4313      	orrs	r3, r2
 8002e36:	617b      	str	r3, [r7, #20]

  /* Reset the slave mode Bits */
  tmpsmcr &= ~TIM_SMCR_SMS;
 8002e38:	697b      	ldr	r3, [r7, #20]
 8002e3a:	f023 0307 	bic.w	r3, r3, #7
 8002e3e:	617b      	str	r3, [r7, #20]
  /* Set the slave mode */
  tmpsmcr |= sSlaveConfig->SlaveMode;
 8002e40:	683b      	ldr	r3, [r7, #0]
 8002e42:	681b      	ldr	r3, [r3, #0]
 8002e44:	697a      	ldr	r2, [r7, #20]
 8002e46:	4313      	orrs	r3, r2
 8002e48:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 8002e4a:	687b      	ldr	r3, [r7, #4]
 8002e4c:	681b      	ldr	r3, [r3, #0]
 8002e4e:	697a      	ldr	r2, [r7, #20]
 8002e50:	609a      	str	r2, [r3, #8]

  /* Configure the trigger prescaler, filter, and polarity */
  switch (sSlaveConfig->InputTrigger)
 8002e52:	683b      	ldr	r3, [r7, #0]
 8002e54:	685b      	ldr	r3, [r3, #4]
 8002e56:	2b70      	cmp	r3, #112	; 0x70
 8002e58:	d01a      	beq.n	8002e90 <TIM_SlaveTimer_SetConfig+0x7c>
 8002e5a:	2b70      	cmp	r3, #112	; 0x70
 8002e5c:	d860      	bhi.n	8002f20 <TIM_SlaveTimer_SetConfig+0x10c>
 8002e5e:	2b60      	cmp	r3, #96	; 0x60
 8002e60:	d054      	beq.n	8002f0c <TIM_SlaveTimer_SetConfig+0xf8>
 8002e62:	2b60      	cmp	r3, #96	; 0x60
 8002e64:	d85c      	bhi.n	8002f20 <TIM_SlaveTimer_SetConfig+0x10c>
 8002e66:	2b50      	cmp	r3, #80	; 0x50
 8002e68:	d046      	beq.n	8002ef8 <TIM_SlaveTimer_SetConfig+0xe4>
 8002e6a:	2b50      	cmp	r3, #80	; 0x50
 8002e6c:	d858      	bhi.n	8002f20 <TIM_SlaveTimer_SetConfig+0x10c>
 8002e6e:	2b40      	cmp	r3, #64	; 0x40
 8002e70:	d019      	beq.n	8002ea6 <TIM_SlaveTimer_SetConfig+0x92>
 8002e72:	2b40      	cmp	r3, #64	; 0x40
 8002e74:	d854      	bhi.n	8002f20 <TIM_SlaveTimer_SetConfig+0x10c>
 8002e76:	2b30      	cmp	r3, #48	; 0x30
 8002e78:	d054      	beq.n	8002f24 <TIM_SlaveTimer_SetConfig+0x110>
 8002e7a:	2b30      	cmp	r3, #48	; 0x30
 8002e7c:	d850      	bhi.n	8002f20 <TIM_SlaveTimer_SetConfig+0x10c>
 8002e7e:	2b20      	cmp	r3, #32
 8002e80:	d050      	beq.n	8002f24 <TIM_SlaveTimer_SetConfig+0x110>
 8002e82:	2b20      	cmp	r3, #32
 8002e84:	d84c      	bhi.n	8002f20 <TIM_SlaveTimer_SetConfig+0x10c>
 8002e86:	2b00      	cmp	r3, #0
 8002e88:	d04c      	beq.n	8002f24 <TIM_SlaveTimer_SetConfig+0x110>
 8002e8a:	2b10      	cmp	r3, #16
 8002e8c:	d04a      	beq.n	8002f24 <TIM_SlaveTimer_SetConfig+0x110>
        assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));
        break;
      }

    default:
      break;
 8002e8e:	e047      	b.n	8002f20 <TIM_SlaveTimer_SetConfig+0x10c>
      TIM_ETR_SetConfig(htim->Instance,
 8002e90:	687b      	ldr	r3, [r7, #4]
 8002e92:	6818      	ldr	r0, [r3, #0]
 8002e94:	683b      	ldr	r3, [r7, #0]
 8002e96:	68d9      	ldr	r1, [r3, #12]
 8002e98:	683b      	ldr	r3, [r7, #0]
 8002e9a:	689a      	ldr	r2, [r3, #8]
 8002e9c:	683b      	ldr	r3, [r7, #0]
 8002e9e:	691b      	ldr	r3, [r3, #16]
 8002ea0:	f000 f8bd 	bl	800301e <TIM_ETR_SetConfig>
      break;
 8002ea4:	e03f      	b.n	8002f26 <TIM_SlaveTimer_SetConfig+0x112>
      if (sSlaveConfig->SlaveMode == TIM_SLAVEMODE_GATED)
 8002ea6:	683b      	ldr	r3, [r7, #0]
 8002ea8:	681b      	ldr	r3, [r3, #0]
 8002eaa:	2b05      	cmp	r3, #5
 8002eac:	d101      	bne.n	8002eb2 <TIM_SlaveTimer_SetConfig+0x9e>
        return HAL_ERROR;
 8002eae:	2301      	movs	r3, #1
 8002eb0:	e03a      	b.n	8002f28 <TIM_SlaveTimer_SetConfig+0x114>
      tmpccer = htim->Instance->CCER;
 8002eb2:	687b      	ldr	r3, [r7, #4]
 8002eb4:	681b      	ldr	r3, [r3, #0]
 8002eb6:	6a1b      	ldr	r3, [r3, #32]
 8002eb8:	613b      	str	r3, [r7, #16]
      htim->Instance->CCER &= ~TIM_CCER_CC1E;
 8002eba:	687b      	ldr	r3, [r7, #4]
 8002ebc:	681b      	ldr	r3, [r3, #0]
 8002ebe:	6a1a      	ldr	r2, [r3, #32]
 8002ec0:	687b      	ldr	r3, [r7, #4]
 8002ec2:	681b      	ldr	r3, [r3, #0]
 8002ec4:	f022 0201 	bic.w	r2, r2, #1
 8002ec8:	621a      	str	r2, [r3, #32]
      tmpccmr1 = htim->Instance->CCMR1;
 8002eca:	687b      	ldr	r3, [r7, #4]
 8002ecc:	681b      	ldr	r3, [r3, #0]
 8002ece:	699b      	ldr	r3, [r3, #24]
 8002ed0:	60fb      	str	r3, [r7, #12]
      tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8002ed2:	68fb      	ldr	r3, [r7, #12]
 8002ed4:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8002ed8:	60fb      	str	r3, [r7, #12]
      tmpccmr1 |= ((sSlaveConfig->TriggerFilter) << 4U);
 8002eda:	683b      	ldr	r3, [r7, #0]
 8002edc:	691b      	ldr	r3, [r3, #16]
 8002ede:	011b      	lsls	r3, r3, #4
 8002ee0:	68fa      	ldr	r2, [r7, #12]
 8002ee2:	4313      	orrs	r3, r2
 8002ee4:	60fb      	str	r3, [r7, #12]
      htim->Instance->CCMR1 = tmpccmr1;
 8002ee6:	687b      	ldr	r3, [r7, #4]
 8002ee8:	681b      	ldr	r3, [r3, #0]
 8002eea:	68fa      	ldr	r2, [r7, #12]
 8002eec:	619a      	str	r2, [r3, #24]
      htim->Instance->CCER = tmpccer;
 8002eee:	687b      	ldr	r3, [r7, #4]
 8002ef0:	681b      	ldr	r3, [r3, #0]
 8002ef2:	693a      	ldr	r2, [r7, #16]
 8002ef4:	621a      	str	r2, [r3, #32]
      break;
 8002ef6:	e016      	b.n	8002f26 <TIM_SlaveTimer_SetConfig+0x112>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8002ef8:	687b      	ldr	r3, [r7, #4]
 8002efa:	6818      	ldr	r0, [r3, #0]
 8002efc:	683b      	ldr	r3, [r7, #0]
 8002efe:	6899      	ldr	r1, [r3, #8]
 8002f00:	683b      	ldr	r3, [r7, #0]
 8002f02:	691b      	ldr	r3, [r3, #16]
 8002f04:	461a      	mov	r2, r3
 8002f06:	f000 f813 	bl	8002f30 <TIM_TI1_ConfigInputStage>
      break;
 8002f0a:	e00c      	b.n	8002f26 <TIM_SlaveTimer_SetConfig+0x112>
      TIM_TI2_ConfigInputStage(htim->Instance,
 8002f0c:	687b      	ldr	r3, [r7, #4]
 8002f0e:	6818      	ldr	r0, [r3, #0]
 8002f10:	683b      	ldr	r3, [r7, #0]
 8002f12:	6899      	ldr	r1, [r3, #8]
 8002f14:	683b      	ldr	r3, [r7, #0]
 8002f16:	691b      	ldr	r3, [r3, #16]
 8002f18:	461a      	mov	r2, r3
 8002f1a:	f000 f837 	bl	8002f8c <TIM_TI2_ConfigInputStage>
      break;
 8002f1e:	e002      	b.n	8002f26 <TIM_SlaveTimer_SetConfig+0x112>
      break;
 8002f20:	bf00      	nop
 8002f22:	e000      	b.n	8002f26 <TIM_SlaveTimer_SetConfig+0x112>
        break;
 8002f24:	bf00      	nop
  }
  return HAL_OK;
 8002f26:	2300      	movs	r3, #0
}
 8002f28:	4618      	mov	r0, r3
 8002f2a:	3718      	adds	r7, #24
 8002f2c:	46bd      	mov	sp, r7
 8002f2e:	bd80      	pop	{r7, pc}

08002f30 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8002f30:	b480      	push	{r7}
 8002f32:	b087      	sub	sp, #28
 8002f34:	af00      	add	r7, sp, #0
 8002f36:	60f8      	str	r0, [r7, #12]
 8002f38:	60b9      	str	r1, [r7, #8]
 8002f3a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8002f3c:	68fb      	ldr	r3, [r7, #12]
 8002f3e:	6a1b      	ldr	r3, [r3, #32]
 8002f40:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8002f42:	68fb      	ldr	r3, [r7, #12]
 8002f44:	6a1b      	ldr	r3, [r3, #32]
 8002f46:	f023 0201 	bic.w	r2, r3, #1
 8002f4a:	68fb      	ldr	r3, [r7, #12]
 8002f4c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8002f4e:	68fb      	ldr	r3, [r7, #12]
 8002f50:	699b      	ldr	r3, [r3, #24]
 8002f52:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8002f54:	693b      	ldr	r3, [r7, #16]
 8002f56:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8002f5a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8002f5c:	687b      	ldr	r3, [r7, #4]
 8002f5e:	011b      	lsls	r3, r3, #4
 8002f60:	693a      	ldr	r2, [r7, #16]
 8002f62:	4313      	orrs	r3, r2
 8002f64:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8002f66:	697b      	ldr	r3, [r7, #20]
 8002f68:	f023 030a 	bic.w	r3, r3, #10
 8002f6c:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8002f6e:	697a      	ldr	r2, [r7, #20]
 8002f70:	68bb      	ldr	r3, [r7, #8]
 8002f72:	4313      	orrs	r3, r2
 8002f74:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8002f76:	68fb      	ldr	r3, [r7, #12]
 8002f78:	693a      	ldr	r2, [r7, #16]
 8002f7a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8002f7c:	68fb      	ldr	r3, [r7, #12]
 8002f7e:	697a      	ldr	r2, [r7, #20]
 8002f80:	621a      	str	r2, [r3, #32]
}
 8002f82:	bf00      	nop
 8002f84:	371c      	adds	r7, #28
 8002f86:	46bd      	mov	sp, r7
 8002f88:	bc80      	pop	{r7}
 8002f8a:	4770      	bx	lr

08002f8c <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8002f8c:	b480      	push	{r7}
 8002f8e:	b087      	sub	sp, #28
 8002f90:	af00      	add	r7, sp, #0
 8002f92:	60f8      	str	r0, [r7, #12]
 8002f94:	60b9      	str	r1, [r7, #8]
 8002f96:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8002f98:	68fb      	ldr	r3, [r7, #12]
 8002f9a:	6a1b      	ldr	r3, [r3, #32]
 8002f9c:	f023 0210 	bic.w	r2, r3, #16
 8002fa0:	68fb      	ldr	r3, [r7, #12]
 8002fa2:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8002fa4:	68fb      	ldr	r3, [r7, #12]
 8002fa6:	699b      	ldr	r3, [r3, #24]
 8002fa8:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8002faa:	68fb      	ldr	r3, [r7, #12]
 8002fac:	6a1b      	ldr	r3, [r3, #32]
 8002fae:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8002fb0:	697b      	ldr	r3, [r7, #20]
 8002fb2:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8002fb6:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8002fb8:	687b      	ldr	r3, [r7, #4]
 8002fba:	031b      	lsls	r3, r3, #12
 8002fbc:	697a      	ldr	r2, [r7, #20]
 8002fbe:	4313      	orrs	r3, r2
 8002fc0:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8002fc2:	693b      	ldr	r3, [r7, #16]
 8002fc4:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8002fc8:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8002fca:	68bb      	ldr	r3, [r7, #8]
 8002fcc:	011b      	lsls	r3, r3, #4
 8002fce:	693a      	ldr	r2, [r7, #16]
 8002fd0:	4313      	orrs	r3, r2
 8002fd2:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8002fd4:	68fb      	ldr	r3, [r7, #12]
 8002fd6:	697a      	ldr	r2, [r7, #20]
 8002fd8:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8002fda:	68fb      	ldr	r3, [r7, #12]
 8002fdc:	693a      	ldr	r2, [r7, #16]
 8002fde:	621a      	str	r2, [r3, #32]
}
 8002fe0:	bf00      	nop
 8002fe2:	371c      	adds	r7, #28
 8002fe4:	46bd      	mov	sp, r7
 8002fe6:	bc80      	pop	{r7}
 8002fe8:	4770      	bx	lr

08002fea <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8002fea:	b480      	push	{r7}
 8002fec:	b085      	sub	sp, #20
 8002fee:	af00      	add	r7, sp, #0
 8002ff0:	6078      	str	r0, [r7, #4]
 8002ff2:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8002ff4:	687b      	ldr	r3, [r7, #4]
 8002ff6:	689b      	ldr	r3, [r3, #8]
 8002ff8:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8002ffa:	68fb      	ldr	r3, [r7, #12]
 8002ffc:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003000:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8003002:	683a      	ldr	r2, [r7, #0]
 8003004:	68fb      	ldr	r3, [r7, #12]
 8003006:	4313      	orrs	r3, r2
 8003008:	f043 0307 	orr.w	r3, r3, #7
 800300c:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800300e:	687b      	ldr	r3, [r7, #4]
 8003010:	68fa      	ldr	r2, [r7, #12]
 8003012:	609a      	str	r2, [r3, #8]
}
 8003014:	bf00      	nop
 8003016:	3714      	adds	r7, #20
 8003018:	46bd      	mov	sp, r7
 800301a:	bc80      	pop	{r7}
 800301c:	4770      	bx	lr

0800301e <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800301e:	b480      	push	{r7}
 8003020:	b087      	sub	sp, #28
 8003022:	af00      	add	r7, sp, #0
 8003024:	60f8      	str	r0, [r7, #12]
 8003026:	60b9      	str	r1, [r7, #8]
 8003028:	607a      	str	r2, [r7, #4]
 800302a:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800302c:	68fb      	ldr	r3, [r7, #12]
 800302e:	689b      	ldr	r3, [r3, #8]
 8003030:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003032:	697b      	ldr	r3, [r7, #20]
 8003034:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8003038:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800303a:	683b      	ldr	r3, [r7, #0]
 800303c:	021a      	lsls	r2, r3, #8
 800303e:	687b      	ldr	r3, [r7, #4]
 8003040:	431a      	orrs	r2, r3
 8003042:	68bb      	ldr	r3, [r7, #8]
 8003044:	4313      	orrs	r3, r2
 8003046:	697a      	ldr	r2, [r7, #20]
 8003048:	4313      	orrs	r3, r2
 800304a:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800304c:	68fb      	ldr	r3, [r7, #12]
 800304e:	697a      	ldr	r2, [r7, #20]
 8003050:	609a      	str	r2, [r3, #8]
}
 8003052:	bf00      	nop
 8003054:	371c      	adds	r7, #28
 8003056:	46bd      	mov	sp, r7
 8003058:	bc80      	pop	{r7}
 800305a:	4770      	bx	lr

0800305c <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 800305c:	b480      	push	{r7}
 800305e:	b085      	sub	sp, #20
 8003060:	af00      	add	r7, sp, #0
 8003062:	6078      	str	r0, [r7, #4]
 8003064:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8003066:	687b      	ldr	r3, [r7, #4]
 8003068:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800306c:	2b01      	cmp	r3, #1
 800306e:	d101      	bne.n	8003074 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8003070:	2302      	movs	r3, #2
 8003072:	e046      	b.n	8003102 <HAL_TIMEx_MasterConfigSynchronization+0xa6>
 8003074:	687b      	ldr	r3, [r7, #4]
 8003076:	2201      	movs	r2, #1
 8003078:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800307c:	687b      	ldr	r3, [r7, #4]
 800307e:	2202      	movs	r2, #2
 8003080:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8003084:	687b      	ldr	r3, [r7, #4]
 8003086:	681b      	ldr	r3, [r3, #0]
 8003088:	685b      	ldr	r3, [r3, #4]
 800308a:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800308c:	687b      	ldr	r3, [r7, #4]
 800308e:	681b      	ldr	r3, [r3, #0]
 8003090:	689b      	ldr	r3, [r3, #8]
 8003092:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8003094:	68fb      	ldr	r3, [r7, #12]
 8003096:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800309a:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800309c:	683b      	ldr	r3, [r7, #0]
 800309e:	681b      	ldr	r3, [r3, #0]
 80030a0:	68fa      	ldr	r2, [r7, #12]
 80030a2:	4313      	orrs	r3, r2
 80030a4:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80030a6:	687b      	ldr	r3, [r7, #4]
 80030a8:	681b      	ldr	r3, [r3, #0]
 80030aa:	68fa      	ldr	r2, [r7, #12]
 80030ac:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80030ae:	687b      	ldr	r3, [r7, #4]
 80030b0:	681b      	ldr	r3, [r3, #0]
 80030b2:	4a16      	ldr	r2, [pc, #88]	; (800310c <HAL_TIMEx_MasterConfigSynchronization+0xb0>)
 80030b4:	4293      	cmp	r3, r2
 80030b6:	d00e      	beq.n	80030d6 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 80030b8:	687b      	ldr	r3, [r7, #4]
 80030ba:	681b      	ldr	r3, [r3, #0]
 80030bc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80030c0:	d009      	beq.n	80030d6 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 80030c2:	687b      	ldr	r3, [r7, #4]
 80030c4:	681b      	ldr	r3, [r3, #0]
 80030c6:	4a12      	ldr	r2, [pc, #72]	; (8003110 <HAL_TIMEx_MasterConfigSynchronization+0xb4>)
 80030c8:	4293      	cmp	r3, r2
 80030ca:	d004      	beq.n	80030d6 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 80030cc:	687b      	ldr	r3, [r7, #4]
 80030ce:	681b      	ldr	r3, [r3, #0]
 80030d0:	4a10      	ldr	r2, [pc, #64]	; (8003114 <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 80030d2:	4293      	cmp	r3, r2
 80030d4:	d10c      	bne.n	80030f0 <HAL_TIMEx_MasterConfigSynchronization+0x94>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80030d6:	68bb      	ldr	r3, [r7, #8]
 80030d8:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80030dc:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80030de:	683b      	ldr	r3, [r7, #0]
 80030e0:	685b      	ldr	r3, [r3, #4]
 80030e2:	68ba      	ldr	r2, [r7, #8]
 80030e4:	4313      	orrs	r3, r2
 80030e6:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80030e8:	687b      	ldr	r3, [r7, #4]
 80030ea:	681b      	ldr	r3, [r3, #0]
 80030ec:	68ba      	ldr	r2, [r7, #8]
 80030ee:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80030f0:	687b      	ldr	r3, [r7, #4]
 80030f2:	2201      	movs	r2, #1
 80030f4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80030f8:	687b      	ldr	r3, [r7, #4]
 80030fa:	2200      	movs	r2, #0
 80030fc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8003100:	2300      	movs	r3, #0
}
 8003102:	4618      	mov	r0, r3
 8003104:	3714      	adds	r7, #20
 8003106:	46bd      	mov	sp, r7
 8003108:	bc80      	pop	{r7}
 800310a:	4770      	bx	lr
 800310c:	40012c00 	.word	0x40012c00
 8003110:	40000400 	.word	0x40000400
 8003114:	40000800 	.word	0x40000800

08003118 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8003118:	b480      	push	{r7}
 800311a:	b083      	sub	sp, #12
 800311c:	af00      	add	r7, sp, #0
 800311e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8003120:	bf00      	nop
 8003122:	370c      	adds	r7, #12
 8003124:	46bd      	mov	sp, r7
 8003126:	bc80      	pop	{r7}
 8003128:	4770      	bx	lr

0800312a <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800312a:	b480      	push	{r7}
 800312c:	b083      	sub	sp, #12
 800312e:	af00      	add	r7, sp, #0
 8003130:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8003132:	bf00      	nop
 8003134:	370c      	adds	r7, #12
 8003136:	46bd      	mov	sp, r7
 8003138:	bc80      	pop	{r7}
 800313a:	4770      	bx	lr

0800313c <__errno>:
 800313c:	4b01      	ldr	r3, [pc, #4]	; (8003144 <__errno+0x8>)
 800313e:	6818      	ldr	r0, [r3, #0]
 8003140:	4770      	bx	lr
 8003142:	bf00      	nop
 8003144:	20000018 	.word	0x20000018

08003148 <__libc_init_array>:
 8003148:	b570      	push	{r4, r5, r6, lr}
 800314a:	2600      	movs	r6, #0
 800314c:	4d0c      	ldr	r5, [pc, #48]	; (8003180 <__libc_init_array+0x38>)
 800314e:	4c0d      	ldr	r4, [pc, #52]	; (8003184 <__libc_init_array+0x3c>)
 8003150:	1b64      	subs	r4, r4, r5
 8003152:	10a4      	asrs	r4, r4, #2
 8003154:	42a6      	cmp	r6, r4
 8003156:	d109      	bne.n	800316c <__libc_init_array+0x24>
 8003158:	f000 fc9c 	bl	8003a94 <_init>
 800315c:	2600      	movs	r6, #0
 800315e:	4d0a      	ldr	r5, [pc, #40]	; (8003188 <__libc_init_array+0x40>)
 8003160:	4c0a      	ldr	r4, [pc, #40]	; (800318c <__libc_init_array+0x44>)
 8003162:	1b64      	subs	r4, r4, r5
 8003164:	10a4      	asrs	r4, r4, #2
 8003166:	42a6      	cmp	r6, r4
 8003168:	d105      	bne.n	8003176 <__libc_init_array+0x2e>
 800316a:	bd70      	pop	{r4, r5, r6, pc}
 800316c:	f855 3b04 	ldr.w	r3, [r5], #4
 8003170:	4798      	blx	r3
 8003172:	3601      	adds	r6, #1
 8003174:	e7ee      	b.n	8003154 <__libc_init_array+0xc>
 8003176:	f855 3b04 	ldr.w	r3, [r5], #4
 800317a:	4798      	blx	r3
 800317c:	3601      	adds	r6, #1
 800317e:	e7f2      	b.n	8003166 <__libc_init_array+0x1e>
 8003180:	08004778 	.word	0x08004778
 8003184:	08004778 	.word	0x08004778
 8003188:	08004778 	.word	0x08004778
 800318c:	0800477c 	.word	0x0800477c

08003190 <memset>:
 8003190:	4603      	mov	r3, r0
 8003192:	4402      	add	r2, r0
 8003194:	4293      	cmp	r3, r2
 8003196:	d100      	bne.n	800319a <memset+0xa>
 8003198:	4770      	bx	lr
 800319a:	f803 1b01 	strb.w	r1, [r3], #1
 800319e:	e7f9      	b.n	8003194 <memset+0x4>

080031a0 <_vsiprintf_r>:
 80031a0:	b500      	push	{lr}
 80031a2:	b09b      	sub	sp, #108	; 0x6c
 80031a4:	9100      	str	r1, [sp, #0]
 80031a6:	9104      	str	r1, [sp, #16]
 80031a8:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 80031ac:	9105      	str	r1, [sp, #20]
 80031ae:	9102      	str	r1, [sp, #8]
 80031b0:	4905      	ldr	r1, [pc, #20]	; (80031c8 <_vsiprintf_r+0x28>)
 80031b2:	9103      	str	r1, [sp, #12]
 80031b4:	4669      	mov	r1, sp
 80031b6:	f000 f86f 	bl	8003298 <_svfiprintf_r>
 80031ba:	2200      	movs	r2, #0
 80031bc:	9b00      	ldr	r3, [sp, #0]
 80031be:	701a      	strb	r2, [r3, #0]
 80031c0:	b01b      	add	sp, #108	; 0x6c
 80031c2:	f85d fb04 	ldr.w	pc, [sp], #4
 80031c6:	bf00      	nop
 80031c8:	ffff0208 	.word	0xffff0208

080031cc <vsiprintf>:
 80031cc:	4613      	mov	r3, r2
 80031ce:	460a      	mov	r2, r1
 80031d0:	4601      	mov	r1, r0
 80031d2:	4802      	ldr	r0, [pc, #8]	; (80031dc <vsiprintf+0x10>)
 80031d4:	6800      	ldr	r0, [r0, #0]
 80031d6:	f7ff bfe3 	b.w	80031a0 <_vsiprintf_r>
 80031da:	bf00      	nop
 80031dc:	20000018 	.word	0x20000018

080031e0 <__ssputs_r>:
 80031e0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80031e4:	688e      	ldr	r6, [r1, #8]
 80031e6:	4682      	mov	sl, r0
 80031e8:	429e      	cmp	r6, r3
 80031ea:	460c      	mov	r4, r1
 80031ec:	4690      	mov	r8, r2
 80031ee:	461f      	mov	r7, r3
 80031f0:	d838      	bhi.n	8003264 <__ssputs_r+0x84>
 80031f2:	898a      	ldrh	r2, [r1, #12]
 80031f4:	f412 6f90 	tst.w	r2, #1152	; 0x480
 80031f8:	d032      	beq.n	8003260 <__ssputs_r+0x80>
 80031fa:	6825      	ldr	r5, [r4, #0]
 80031fc:	6909      	ldr	r1, [r1, #16]
 80031fe:	3301      	adds	r3, #1
 8003200:	eba5 0901 	sub.w	r9, r5, r1
 8003204:	6965      	ldr	r5, [r4, #20]
 8003206:	444b      	add	r3, r9
 8003208:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800320c:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8003210:	106d      	asrs	r5, r5, #1
 8003212:	429d      	cmp	r5, r3
 8003214:	bf38      	it	cc
 8003216:	461d      	movcc	r5, r3
 8003218:	0553      	lsls	r3, r2, #21
 800321a:	d531      	bpl.n	8003280 <__ssputs_r+0xa0>
 800321c:	4629      	mov	r1, r5
 800321e:	f000 fb6f 	bl	8003900 <_malloc_r>
 8003222:	4606      	mov	r6, r0
 8003224:	b950      	cbnz	r0, 800323c <__ssputs_r+0x5c>
 8003226:	230c      	movs	r3, #12
 8003228:	f04f 30ff 	mov.w	r0, #4294967295
 800322c:	f8ca 3000 	str.w	r3, [sl]
 8003230:	89a3      	ldrh	r3, [r4, #12]
 8003232:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8003236:	81a3      	strh	r3, [r4, #12]
 8003238:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800323c:	464a      	mov	r2, r9
 800323e:	6921      	ldr	r1, [r4, #16]
 8003240:	f000 face 	bl	80037e0 <memcpy>
 8003244:	89a3      	ldrh	r3, [r4, #12]
 8003246:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800324a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800324e:	81a3      	strh	r3, [r4, #12]
 8003250:	6126      	str	r6, [r4, #16]
 8003252:	444e      	add	r6, r9
 8003254:	6026      	str	r6, [r4, #0]
 8003256:	463e      	mov	r6, r7
 8003258:	6165      	str	r5, [r4, #20]
 800325a:	eba5 0509 	sub.w	r5, r5, r9
 800325e:	60a5      	str	r5, [r4, #8]
 8003260:	42be      	cmp	r6, r7
 8003262:	d900      	bls.n	8003266 <__ssputs_r+0x86>
 8003264:	463e      	mov	r6, r7
 8003266:	4632      	mov	r2, r6
 8003268:	4641      	mov	r1, r8
 800326a:	6820      	ldr	r0, [r4, #0]
 800326c:	f000 fac6 	bl	80037fc <memmove>
 8003270:	68a3      	ldr	r3, [r4, #8]
 8003272:	2000      	movs	r0, #0
 8003274:	1b9b      	subs	r3, r3, r6
 8003276:	60a3      	str	r3, [r4, #8]
 8003278:	6823      	ldr	r3, [r4, #0]
 800327a:	4433      	add	r3, r6
 800327c:	6023      	str	r3, [r4, #0]
 800327e:	e7db      	b.n	8003238 <__ssputs_r+0x58>
 8003280:	462a      	mov	r2, r5
 8003282:	f000 fbb1 	bl	80039e8 <_realloc_r>
 8003286:	4606      	mov	r6, r0
 8003288:	2800      	cmp	r0, #0
 800328a:	d1e1      	bne.n	8003250 <__ssputs_r+0x70>
 800328c:	4650      	mov	r0, sl
 800328e:	6921      	ldr	r1, [r4, #16]
 8003290:	f000 face 	bl	8003830 <_free_r>
 8003294:	e7c7      	b.n	8003226 <__ssputs_r+0x46>
	...

08003298 <_svfiprintf_r>:
 8003298:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800329c:	4698      	mov	r8, r3
 800329e:	898b      	ldrh	r3, [r1, #12]
 80032a0:	4607      	mov	r7, r0
 80032a2:	061b      	lsls	r3, r3, #24
 80032a4:	460d      	mov	r5, r1
 80032a6:	4614      	mov	r4, r2
 80032a8:	b09d      	sub	sp, #116	; 0x74
 80032aa:	d50e      	bpl.n	80032ca <_svfiprintf_r+0x32>
 80032ac:	690b      	ldr	r3, [r1, #16]
 80032ae:	b963      	cbnz	r3, 80032ca <_svfiprintf_r+0x32>
 80032b0:	2140      	movs	r1, #64	; 0x40
 80032b2:	f000 fb25 	bl	8003900 <_malloc_r>
 80032b6:	6028      	str	r0, [r5, #0]
 80032b8:	6128      	str	r0, [r5, #16]
 80032ba:	b920      	cbnz	r0, 80032c6 <_svfiprintf_r+0x2e>
 80032bc:	230c      	movs	r3, #12
 80032be:	603b      	str	r3, [r7, #0]
 80032c0:	f04f 30ff 	mov.w	r0, #4294967295
 80032c4:	e0d1      	b.n	800346a <_svfiprintf_r+0x1d2>
 80032c6:	2340      	movs	r3, #64	; 0x40
 80032c8:	616b      	str	r3, [r5, #20]
 80032ca:	2300      	movs	r3, #0
 80032cc:	9309      	str	r3, [sp, #36]	; 0x24
 80032ce:	2320      	movs	r3, #32
 80032d0:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80032d4:	2330      	movs	r3, #48	; 0x30
 80032d6:	f04f 0901 	mov.w	r9, #1
 80032da:	f8cd 800c 	str.w	r8, [sp, #12]
 80032de:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 8003484 <_svfiprintf_r+0x1ec>
 80032e2:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80032e6:	4623      	mov	r3, r4
 80032e8:	469a      	mov	sl, r3
 80032ea:	f813 2b01 	ldrb.w	r2, [r3], #1
 80032ee:	b10a      	cbz	r2, 80032f4 <_svfiprintf_r+0x5c>
 80032f0:	2a25      	cmp	r2, #37	; 0x25
 80032f2:	d1f9      	bne.n	80032e8 <_svfiprintf_r+0x50>
 80032f4:	ebba 0b04 	subs.w	fp, sl, r4
 80032f8:	d00b      	beq.n	8003312 <_svfiprintf_r+0x7a>
 80032fa:	465b      	mov	r3, fp
 80032fc:	4622      	mov	r2, r4
 80032fe:	4629      	mov	r1, r5
 8003300:	4638      	mov	r0, r7
 8003302:	f7ff ff6d 	bl	80031e0 <__ssputs_r>
 8003306:	3001      	adds	r0, #1
 8003308:	f000 80aa 	beq.w	8003460 <_svfiprintf_r+0x1c8>
 800330c:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800330e:	445a      	add	r2, fp
 8003310:	9209      	str	r2, [sp, #36]	; 0x24
 8003312:	f89a 3000 	ldrb.w	r3, [sl]
 8003316:	2b00      	cmp	r3, #0
 8003318:	f000 80a2 	beq.w	8003460 <_svfiprintf_r+0x1c8>
 800331c:	2300      	movs	r3, #0
 800331e:	f04f 32ff 	mov.w	r2, #4294967295
 8003322:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8003326:	f10a 0a01 	add.w	sl, sl, #1
 800332a:	9304      	str	r3, [sp, #16]
 800332c:	9307      	str	r3, [sp, #28]
 800332e:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8003332:	931a      	str	r3, [sp, #104]	; 0x68
 8003334:	4654      	mov	r4, sl
 8003336:	2205      	movs	r2, #5
 8003338:	f814 1b01 	ldrb.w	r1, [r4], #1
 800333c:	4851      	ldr	r0, [pc, #324]	; (8003484 <_svfiprintf_r+0x1ec>)
 800333e:	f000 fa41 	bl	80037c4 <memchr>
 8003342:	9a04      	ldr	r2, [sp, #16]
 8003344:	b9d8      	cbnz	r0, 800337e <_svfiprintf_r+0xe6>
 8003346:	06d0      	lsls	r0, r2, #27
 8003348:	bf44      	itt	mi
 800334a:	2320      	movmi	r3, #32
 800334c:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8003350:	0711      	lsls	r1, r2, #28
 8003352:	bf44      	itt	mi
 8003354:	232b      	movmi	r3, #43	; 0x2b
 8003356:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800335a:	f89a 3000 	ldrb.w	r3, [sl]
 800335e:	2b2a      	cmp	r3, #42	; 0x2a
 8003360:	d015      	beq.n	800338e <_svfiprintf_r+0xf6>
 8003362:	4654      	mov	r4, sl
 8003364:	2000      	movs	r0, #0
 8003366:	f04f 0c0a 	mov.w	ip, #10
 800336a:	9a07      	ldr	r2, [sp, #28]
 800336c:	4621      	mov	r1, r4
 800336e:	f811 3b01 	ldrb.w	r3, [r1], #1
 8003372:	3b30      	subs	r3, #48	; 0x30
 8003374:	2b09      	cmp	r3, #9
 8003376:	d94e      	bls.n	8003416 <_svfiprintf_r+0x17e>
 8003378:	b1b0      	cbz	r0, 80033a8 <_svfiprintf_r+0x110>
 800337a:	9207      	str	r2, [sp, #28]
 800337c:	e014      	b.n	80033a8 <_svfiprintf_r+0x110>
 800337e:	eba0 0308 	sub.w	r3, r0, r8
 8003382:	fa09 f303 	lsl.w	r3, r9, r3
 8003386:	4313      	orrs	r3, r2
 8003388:	46a2      	mov	sl, r4
 800338a:	9304      	str	r3, [sp, #16]
 800338c:	e7d2      	b.n	8003334 <_svfiprintf_r+0x9c>
 800338e:	9b03      	ldr	r3, [sp, #12]
 8003390:	1d19      	adds	r1, r3, #4
 8003392:	681b      	ldr	r3, [r3, #0]
 8003394:	9103      	str	r1, [sp, #12]
 8003396:	2b00      	cmp	r3, #0
 8003398:	bfbb      	ittet	lt
 800339a:	425b      	neglt	r3, r3
 800339c:	f042 0202 	orrlt.w	r2, r2, #2
 80033a0:	9307      	strge	r3, [sp, #28]
 80033a2:	9307      	strlt	r3, [sp, #28]
 80033a4:	bfb8      	it	lt
 80033a6:	9204      	strlt	r2, [sp, #16]
 80033a8:	7823      	ldrb	r3, [r4, #0]
 80033aa:	2b2e      	cmp	r3, #46	; 0x2e
 80033ac:	d10c      	bne.n	80033c8 <_svfiprintf_r+0x130>
 80033ae:	7863      	ldrb	r3, [r4, #1]
 80033b0:	2b2a      	cmp	r3, #42	; 0x2a
 80033b2:	d135      	bne.n	8003420 <_svfiprintf_r+0x188>
 80033b4:	9b03      	ldr	r3, [sp, #12]
 80033b6:	3402      	adds	r4, #2
 80033b8:	1d1a      	adds	r2, r3, #4
 80033ba:	681b      	ldr	r3, [r3, #0]
 80033bc:	9203      	str	r2, [sp, #12]
 80033be:	2b00      	cmp	r3, #0
 80033c0:	bfb8      	it	lt
 80033c2:	f04f 33ff 	movlt.w	r3, #4294967295
 80033c6:	9305      	str	r3, [sp, #20]
 80033c8:	f8df a0bc 	ldr.w	sl, [pc, #188]	; 8003488 <_svfiprintf_r+0x1f0>
 80033cc:	2203      	movs	r2, #3
 80033ce:	4650      	mov	r0, sl
 80033d0:	7821      	ldrb	r1, [r4, #0]
 80033d2:	f000 f9f7 	bl	80037c4 <memchr>
 80033d6:	b140      	cbz	r0, 80033ea <_svfiprintf_r+0x152>
 80033d8:	2340      	movs	r3, #64	; 0x40
 80033da:	eba0 000a 	sub.w	r0, r0, sl
 80033de:	fa03 f000 	lsl.w	r0, r3, r0
 80033e2:	9b04      	ldr	r3, [sp, #16]
 80033e4:	3401      	adds	r4, #1
 80033e6:	4303      	orrs	r3, r0
 80033e8:	9304      	str	r3, [sp, #16]
 80033ea:	f814 1b01 	ldrb.w	r1, [r4], #1
 80033ee:	2206      	movs	r2, #6
 80033f0:	4826      	ldr	r0, [pc, #152]	; (800348c <_svfiprintf_r+0x1f4>)
 80033f2:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80033f6:	f000 f9e5 	bl	80037c4 <memchr>
 80033fa:	2800      	cmp	r0, #0
 80033fc:	d038      	beq.n	8003470 <_svfiprintf_r+0x1d8>
 80033fe:	4b24      	ldr	r3, [pc, #144]	; (8003490 <_svfiprintf_r+0x1f8>)
 8003400:	bb1b      	cbnz	r3, 800344a <_svfiprintf_r+0x1b2>
 8003402:	9b03      	ldr	r3, [sp, #12]
 8003404:	3307      	adds	r3, #7
 8003406:	f023 0307 	bic.w	r3, r3, #7
 800340a:	3308      	adds	r3, #8
 800340c:	9303      	str	r3, [sp, #12]
 800340e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8003410:	4433      	add	r3, r6
 8003412:	9309      	str	r3, [sp, #36]	; 0x24
 8003414:	e767      	b.n	80032e6 <_svfiprintf_r+0x4e>
 8003416:	460c      	mov	r4, r1
 8003418:	2001      	movs	r0, #1
 800341a:	fb0c 3202 	mla	r2, ip, r2, r3
 800341e:	e7a5      	b.n	800336c <_svfiprintf_r+0xd4>
 8003420:	2300      	movs	r3, #0
 8003422:	f04f 0c0a 	mov.w	ip, #10
 8003426:	4619      	mov	r1, r3
 8003428:	3401      	adds	r4, #1
 800342a:	9305      	str	r3, [sp, #20]
 800342c:	4620      	mov	r0, r4
 800342e:	f810 2b01 	ldrb.w	r2, [r0], #1
 8003432:	3a30      	subs	r2, #48	; 0x30
 8003434:	2a09      	cmp	r2, #9
 8003436:	d903      	bls.n	8003440 <_svfiprintf_r+0x1a8>
 8003438:	2b00      	cmp	r3, #0
 800343a:	d0c5      	beq.n	80033c8 <_svfiprintf_r+0x130>
 800343c:	9105      	str	r1, [sp, #20]
 800343e:	e7c3      	b.n	80033c8 <_svfiprintf_r+0x130>
 8003440:	4604      	mov	r4, r0
 8003442:	2301      	movs	r3, #1
 8003444:	fb0c 2101 	mla	r1, ip, r1, r2
 8003448:	e7f0      	b.n	800342c <_svfiprintf_r+0x194>
 800344a:	ab03      	add	r3, sp, #12
 800344c:	9300      	str	r3, [sp, #0]
 800344e:	462a      	mov	r2, r5
 8003450:	4638      	mov	r0, r7
 8003452:	4b10      	ldr	r3, [pc, #64]	; (8003494 <_svfiprintf_r+0x1fc>)
 8003454:	a904      	add	r1, sp, #16
 8003456:	f3af 8000 	nop.w
 800345a:	1c42      	adds	r2, r0, #1
 800345c:	4606      	mov	r6, r0
 800345e:	d1d6      	bne.n	800340e <_svfiprintf_r+0x176>
 8003460:	89ab      	ldrh	r3, [r5, #12]
 8003462:	065b      	lsls	r3, r3, #25
 8003464:	f53f af2c 	bmi.w	80032c0 <_svfiprintf_r+0x28>
 8003468:	9809      	ldr	r0, [sp, #36]	; 0x24
 800346a:	b01d      	add	sp, #116	; 0x74
 800346c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8003470:	ab03      	add	r3, sp, #12
 8003472:	9300      	str	r3, [sp, #0]
 8003474:	462a      	mov	r2, r5
 8003476:	4638      	mov	r0, r7
 8003478:	4b06      	ldr	r3, [pc, #24]	; (8003494 <_svfiprintf_r+0x1fc>)
 800347a:	a904      	add	r1, sp, #16
 800347c:	f000 f87c 	bl	8003578 <_printf_i>
 8003480:	e7eb      	b.n	800345a <_svfiprintf_r+0x1c2>
 8003482:	bf00      	nop
 8003484:	08004744 	.word	0x08004744
 8003488:	0800474a 	.word	0x0800474a
 800348c:	0800474e 	.word	0x0800474e
 8003490:	00000000 	.word	0x00000000
 8003494:	080031e1 	.word	0x080031e1

08003498 <_printf_common>:
 8003498:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800349c:	4616      	mov	r6, r2
 800349e:	4699      	mov	r9, r3
 80034a0:	688a      	ldr	r2, [r1, #8]
 80034a2:	690b      	ldr	r3, [r1, #16]
 80034a4:	4607      	mov	r7, r0
 80034a6:	4293      	cmp	r3, r2
 80034a8:	bfb8      	it	lt
 80034aa:	4613      	movlt	r3, r2
 80034ac:	6033      	str	r3, [r6, #0]
 80034ae:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 80034b2:	460c      	mov	r4, r1
 80034b4:	f8dd 8020 	ldr.w	r8, [sp, #32]
 80034b8:	b10a      	cbz	r2, 80034be <_printf_common+0x26>
 80034ba:	3301      	adds	r3, #1
 80034bc:	6033      	str	r3, [r6, #0]
 80034be:	6823      	ldr	r3, [r4, #0]
 80034c0:	0699      	lsls	r1, r3, #26
 80034c2:	bf42      	ittt	mi
 80034c4:	6833      	ldrmi	r3, [r6, #0]
 80034c6:	3302      	addmi	r3, #2
 80034c8:	6033      	strmi	r3, [r6, #0]
 80034ca:	6825      	ldr	r5, [r4, #0]
 80034cc:	f015 0506 	ands.w	r5, r5, #6
 80034d0:	d106      	bne.n	80034e0 <_printf_common+0x48>
 80034d2:	f104 0a19 	add.w	sl, r4, #25
 80034d6:	68e3      	ldr	r3, [r4, #12]
 80034d8:	6832      	ldr	r2, [r6, #0]
 80034da:	1a9b      	subs	r3, r3, r2
 80034dc:	42ab      	cmp	r3, r5
 80034de:	dc28      	bgt.n	8003532 <_printf_common+0x9a>
 80034e0:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 80034e4:	1e13      	subs	r3, r2, #0
 80034e6:	6822      	ldr	r2, [r4, #0]
 80034e8:	bf18      	it	ne
 80034ea:	2301      	movne	r3, #1
 80034ec:	0692      	lsls	r2, r2, #26
 80034ee:	d42d      	bmi.n	800354c <_printf_common+0xb4>
 80034f0:	4649      	mov	r1, r9
 80034f2:	4638      	mov	r0, r7
 80034f4:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80034f8:	47c0      	blx	r8
 80034fa:	3001      	adds	r0, #1
 80034fc:	d020      	beq.n	8003540 <_printf_common+0xa8>
 80034fe:	6823      	ldr	r3, [r4, #0]
 8003500:	68e5      	ldr	r5, [r4, #12]
 8003502:	f003 0306 	and.w	r3, r3, #6
 8003506:	2b04      	cmp	r3, #4
 8003508:	bf18      	it	ne
 800350a:	2500      	movne	r5, #0
 800350c:	6832      	ldr	r2, [r6, #0]
 800350e:	f04f 0600 	mov.w	r6, #0
 8003512:	68a3      	ldr	r3, [r4, #8]
 8003514:	bf08      	it	eq
 8003516:	1aad      	subeq	r5, r5, r2
 8003518:	6922      	ldr	r2, [r4, #16]
 800351a:	bf08      	it	eq
 800351c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8003520:	4293      	cmp	r3, r2
 8003522:	bfc4      	itt	gt
 8003524:	1a9b      	subgt	r3, r3, r2
 8003526:	18ed      	addgt	r5, r5, r3
 8003528:	341a      	adds	r4, #26
 800352a:	42b5      	cmp	r5, r6
 800352c:	d11a      	bne.n	8003564 <_printf_common+0xcc>
 800352e:	2000      	movs	r0, #0
 8003530:	e008      	b.n	8003544 <_printf_common+0xac>
 8003532:	2301      	movs	r3, #1
 8003534:	4652      	mov	r2, sl
 8003536:	4649      	mov	r1, r9
 8003538:	4638      	mov	r0, r7
 800353a:	47c0      	blx	r8
 800353c:	3001      	adds	r0, #1
 800353e:	d103      	bne.n	8003548 <_printf_common+0xb0>
 8003540:	f04f 30ff 	mov.w	r0, #4294967295
 8003544:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003548:	3501      	adds	r5, #1
 800354a:	e7c4      	b.n	80034d6 <_printf_common+0x3e>
 800354c:	2030      	movs	r0, #48	; 0x30
 800354e:	18e1      	adds	r1, r4, r3
 8003550:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8003554:	1c5a      	adds	r2, r3, #1
 8003556:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800355a:	4422      	add	r2, r4
 800355c:	3302      	adds	r3, #2
 800355e:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8003562:	e7c5      	b.n	80034f0 <_printf_common+0x58>
 8003564:	2301      	movs	r3, #1
 8003566:	4622      	mov	r2, r4
 8003568:	4649      	mov	r1, r9
 800356a:	4638      	mov	r0, r7
 800356c:	47c0      	blx	r8
 800356e:	3001      	adds	r0, #1
 8003570:	d0e6      	beq.n	8003540 <_printf_common+0xa8>
 8003572:	3601      	adds	r6, #1
 8003574:	e7d9      	b.n	800352a <_printf_common+0x92>
	...

08003578 <_printf_i>:
 8003578:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800357c:	7e0f      	ldrb	r7, [r1, #24]
 800357e:	4691      	mov	r9, r2
 8003580:	2f78      	cmp	r7, #120	; 0x78
 8003582:	4680      	mov	r8, r0
 8003584:	460c      	mov	r4, r1
 8003586:	469a      	mov	sl, r3
 8003588:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 800358a:	f101 0243 	add.w	r2, r1, #67	; 0x43
 800358e:	d807      	bhi.n	80035a0 <_printf_i+0x28>
 8003590:	2f62      	cmp	r7, #98	; 0x62
 8003592:	d80a      	bhi.n	80035aa <_printf_i+0x32>
 8003594:	2f00      	cmp	r7, #0
 8003596:	f000 80d9 	beq.w	800374c <_printf_i+0x1d4>
 800359a:	2f58      	cmp	r7, #88	; 0x58
 800359c:	f000 80a4 	beq.w	80036e8 <_printf_i+0x170>
 80035a0:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80035a4:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 80035a8:	e03a      	b.n	8003620 <_printf_i+0xa8>
 80035aa:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 80035ae:	2b15      	cmp	r3, #21
 80035b0:	d8f6      	bhi.n	80035a0 <_printf_i+0x28>
 80035b2:	a101      	add	r1, pc, #4	; (adr r1, 80035b8 <_printf_i+0x40>)
 80035b4:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 80035b8:	08003611 	.word	0x08003611
 80035bc:	08003625 	.word	0x08003625
 80035c0:	080035a1 	.word	0x080035a1
 80035c4:	080035a1 	.word	0x080035a1
 80035c8:	080035a1 	.word	0x080035a1
 80035cc:	080035a1 	.word	0x080035a1
 80035d0:	08003625 	.word	0x08003625
 80035d4:	080035a1 	.word	0x080035a1
 80035d8:	080035a1 	.word	0x080035a1
 80035dc:	080035a1 	.word	0x080035a1
 80035e0:	080035a1 	.word	0x080035a1
 80035e4:	08003733 	.word	0x08003733
 80035e8:	08003655 	.word	0x08003655
 80035ec:	08003715 	.word	0x08003715
 80035f0:	080035a1 	.word	0x080035a1
 80035f4:	080035a1 	.word	0x080035a1
 80035f8:	08003755 	.word	0x08003755
 80035fc:	080035a1 	.word	0x080035a1
 8003600:	08003655 	.word	0x08003655
 8003604:	080035a1 	.word	0x080035a1
 8003608:	080035a1 	.word	0x080035a1
 800360c:	0800371d 	.word	0x0800371d
 8003610:	682b      	ldr	r3, [r5, #0]
 8003612:	1d1a      	adds	r2, r3, #4
 8003614:	681b      	ldr	r3, [r3, #0]
 8003616:	602a      	str	r2, [r5, #0]
 8003618:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800361c:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8003620:	2301      	movs	r3, #1
 8003622:	e0a4      	b.n	800376e <_printf_i+0x1f6>
 8003624:	6820      	ldr	r0, [r4, #0]
 8003626:	6829      	ldr	r1, [r5, #0]
 8003628:	0606      	lsls	r6, r0, #24
 800362a:	f101 0304 	add.w	r3, r1, #4
 800362e:	d50a      	bpl.n	8003646 <_printf_i+0xce>
 8003630:	680e      	ldr	r6, [r1, #0]
 8003632:	602b      	str	r3, [r5, #0]
 8003634:	2e00      	cmp	r6, #0
 8003636:	da03      	bge.n	8003640 <_printf_i+0xc8>
 8003638:	232d      	movs	r3, #45	; 0x2d
 800363a:	4276      	negs	r6, r6
 800363c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8003640:	230a      	movs	r3, #10
 8003642:	485e      	ldr	r0, [pc, #376]	; (80037bc <_printf_i+0x244>)
 8003644:	e019      	b.n	800367a <_printf_i+0x102>
 8003646:	680e      	ldr	r6, [r1, #0]
 8003648:	f010 0f40 	tst.w	r0, #64	; 0x40
 800364c:	602b      	str	r3, [r5, #0]
 800364e:	bf18      	it	ne
 8003650:	b236      	sxthne	r6, r6
 8003652:	e7ef      	b.n	8003634 <_printf_i+0xbc>
 8003654:	682b      	ldr	r3, [r5, #0]
 8003656:	6820      	ldr	r0, [r4, #0]
 8003658:	1d19      	adds	r1, r3, #4
 800365a:	6029      	str	r1, [r5, #0]
 800365c:	0601      	lsls	r1, r0, #24
 800365e:	d501      	bpl.n	8003664 <_printf_i+0xec>
 8003660:	681e      	ldr	r6, [r3, #0]
 8003662:	e002      	b.n	800366a <_printf_i+0xf2>
 8003664:	0646      	lsls	r6, r0, #25
 8003666:	d5fb      	bpl.n	8003660 <_printf_i+0xe8>
 8003668:	881e      	ldrh	r6, [r3, #0]
 800366a:	2f6f      	cmp	r7, #111	; 0x6f
 800366c:	bf0c      	ite	eq
 800366e:	2308      	moveq	r3, #8
 8003670:	230a      	movne	r3, #10
 8003672:	4852      	ldr	r0, [pc, #328]	; (80037bc <_printf_i+0x244>)
 8003674:	2100      	movs	r1, #0
 8003676:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800367a:	6865      	ldr	r5, [r4, #4]
 800367c:	2d00      	cmp	r5, #0
 800367e:	bfa8      	it	ge
 8003680:	6821      	ldrge	r1, [r4, #0]
 8003682:	60a5      	str	r5, [r4, #8]
 8003684:	bfa4      	itt	ge
 8003686:	f021 0104 	bicge.w	r1, r1, #4
 800368a:	6021      	strge	r1, [r4, #0]
 800368c:	b90e      	cbnz	r6, 8003692 <_printf_i+0x11a>
 800368e:	2d00      	cmp	r5, #0
 8003690:	d04d      	beq.n	800372e <_printf_i+0x1b6>
 8003692:	4615      	mov	r5, r2
 8003694:	fbb6 f1f3 	udiv	r1, r6, r3
 8003698:	fb03 6711 	mls	r7, r3, r1, r6
 800369c:	5dc7      	ldrb	r7, [r0, r7]
 800369e:	f805 7d01 	strb.w	r7, [r5, #-1]!
 80036a2:	4637      	mov	r7, r6
 80036a4:	42bb      	cmp	r3, r7
 80036a6:	460e      	mov	r6, r1
 80036a8:	d9f4      	bls.n	8003694 <_printf_i+0x11c>
 80036aa:	2b08      	cmp	r3, #8
 80036ac:	d10b      	bne.n	80036c6 <_printf_i+0x14e>
 80036ae:	6823      	ldr	r3, [r4, #0]
 80036b0:	07de      	lsls	r6, r3, #31
 80036b2:	d508      	bpl.n	80036c6 <_printf_i+0x14e>
 80036b4:	6923      	ldr	r3, [r4, #16]
 80036b6:	6861      	ldr	r1, [r4, #4]
 80036b8:	4299      	cmp	r1, r3
 80036ba:	bfde      	ittt	le
 80036bc:	2330      	movle	r3, #48	; 0x30
 80036be:	f805 3c01 	strble.w	r3, [r5, #-1]
 80036c2:	f105 35ff 	addle.w	r5, r5, #4294967295
 80036c6:	1b52      	subs	r2, r2, r5
 80036c8:	6122      	str	r2, [r4, #16]
 80036ca:	464b      	mov	r3, r9
 80036cc:	4621      	mov	r1, r4
 80036ce:	4640      	mov	r0, r8
 80036d0:	f8cd a000 	str.w	sl, [sp]
 80036d4:	aa03      	add	r2, sp, #12
 80036d6:	f7ff fedf 	bl	8003498 <_printf_common>
 80036da:	3001      	adds	r0, #1
 80036dc:	d14c      	bne.n	8003778 <_printf_i+0x200>
 80036de:	f04f 30ff 	mov.w	r0, #4294967295
 80036e2:	b004      	add	sp, #16
 80036e4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80036e8:	4834      	ldr	r0, [pc, #208]	; (80037bc <_printf_i+0x244>)
 80036ea:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 80036ee:	6829      	ldr	r1, [r5, #0]
 80036f0:	6823      	ldr	r3, [r4, #0]
 80036f2:	f851 6b04 	ldr.w	r6, [r1], #4
 80036f6:	6029      	str	r1, [r5, #0]
 80036f8:	061d      	lsls	r5, r3, #24
 80036fa:	d514      	bpl.n	8003726 <_printf_i+0x1ae>
 80036fc:	07df      	lsls	r7, r3, #31
 80036fe:	bf44      	itt	mi
 8003700:	f043 0320 	orrmi.w	r3, r3, #32
 8003704:	6023      	strmi	r3, [r4, #0]
 8003706:	b91e      	cbnz	r6, 8003710 <_printf_i+0x198>
 8003708:	6823      	ldr	r3, [r4, #0]
 800370a:	f023 0320 	bic.w	r3, r3, #32
 800370e:	6023      	str	r3, [r4, #0]
 8003710:	2310      	movs	r3, #16
 8003712:	e7af      	b.n	8003674 <_printf_i+0xfc>
 8003714:	6823      	ldr	r3, [r4, #0]
 8003716:	f043 0320 	orr.w	r3, r3, #32
 800371a:	6023      	str	r3, [r4, #0]
 800371c:	2378      	movs	r3, #120	; 0x78
 800371e:	4828      	ldr	r0, [pc, #160]	; (80037c0 <_printf_i+0x248>)
 8003720:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8003724:	e7e3      	b.n	80036ee <_printf_i+0x176>
 8003726:	0659      	lsls	r1, r3, #25
 8003728:	bf48      	it	mi
 800372a:	b2b6      	uxthmi	r6, r6
 800372c:	e7e6      	b.n	80036fc <_printf_i+0x184>
 800372e:	4615      	mov	r5, r2
 8003730:	e7bb      	b.n	80036aa <_printf_i+0x132>
 8003732:	682b      	ldr	r3, [r5, #0]
 8003734:	6826      	ldr	r6, [r4, #0]
 8003736:	1d18      	adds	r0, r3, #4
 8003738:	6961      	ldr	r1, [r4, #20]
 800373a:	6028      	str	r0, [r5, #0]
 800373c:	0635      	lsls	r5, r6, #24
 800373e:	681b      	ldr	r3, [r3, #0]
 8003740:	d501      	bpl.n	8003746 <_printf_i+0x1ce>
 8003742:	6019      	str	r1, [r3, #0]
 8003744:	e002      	b.n	800374c <_printf_i+0x1d4>
 8003746:	0670      	lsls	r0, r6, #25
 8003748:	d5fb      	bpl.n	8003742 <_printf_i+0x1ca>
 800374a:	8019      	strh	r1, [r3, #0]
 800374c:	2300      	movs	r3, #0
 800374e:	4615      	mov	r5, r2
 8003750:	6123      	str	r3, [r4, #16]
 8003752:	e7ba      	b.n	80036ca <_printf_i+0x152>
 8003754:	682b      	ldr	r3, [r5, #0]
 8003756:	2100      	movs	r1, #0
 8003758:	1d1a      	adds	r2, r3, #4
 800375a:	602a      	str	r2, [r5, #0]
 800375c:	681d      	ldr	r5, [r3, #0]
 800375e:	6862      	ldr	r2, [r4, #4]
 8003760:	4628      	mov	r0, r5
 8003762:	f000 f82f 	bl	80037c4 <memchr>
 8003766:	b108      	cbz	r0, 800376c <_printf_i+0x1f4>
 8003768:	1b40      	subs	r0, r0, r5
 800376a:	6060      	str	r0, [r4, #4]
 800376c:	6863      	ldr	r3, [r4, #4]
 800376e:	6123      	str	r3, [r4, #16]
 8003770:	2300      	movs	r3, #0
 8003772:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8003776:	e7a8      	b.n	80036ca <_printf_i+0x152>
 8003778:	462a      	mov	r2, r5
 800377a:	4649      	mov	r1, r9
 800377c:	4640      	mov	r0, r8
 800377e:	6923      	ldr	r3, [r4, #16]
 8003780:	47d0      	blx	sl
 8003782:	3001      	adds	r0, #1
 8003784:	d0ab      	beq.n	80036de <_printf_i+0x166>
 8003786:	6823      	ldr	r3, [r4, #0]
 8003788:	079b      	lsls	r3, r3, #30
 800378a:	d413      	bmi.n	80037b4 <_printf_i+0x23c>
 800378c:	68e0      	ldr	r0, [r4, #12]
 800378e:	9b03      	ldr	r3, [sp, #12]
 8003790:	4298      	cmp	r0, r3
 8003792:	bfb8      	it	lt
 8003794:	4618      	movlt	r0, r3
 8003796:	e7a4      	b.n	80036e2 <_printf_i+0x16a>
 8003798:	2301      	movs	r3, #1
 800379a:	4632      	mov	r2, r6
 800379c:	4649      	mov	r1, r9
 800379e:	4640      	mov	r0, r8
 80037a0:	47d0      	blx	sl
 80037a2:	3001      	adds	r0, #1
 80037a4:	d09b      	beq.n	80036de <_printf_i+0x166>
 80037a6:	3501      	adds	r5, #1
 80037a8:	68e3      	ldr	r3, [r4, #12]
 80037aa:	9903      	ldr	r1, [sp, #12]
 80037ac:	1a5b      	subs	r3, r3, r1
 80037ae:	42ab      	cmp	r3, r5
 80037b0:	dcf2      	bgt.n	8003798 <_printf_i+0x220>
 80037b2:	e7eb      	b.n	800378c <_printf_i+0x214>
 80037b4:	2500      	movs	r5, #0
 80037b6:	f104 0619 	add.w	r6, r4, #25
 80037ba:	e7f5      	b.n	80037a8 <_printf_i+0x230>
 80037bc:	08004755 	.word	0x08004755
 80037c0:	08004766 	.word	0x08004766

080037c4 <memchr>:
 80037c4:	4603      	mov	r3, r0
 80037c6:	b510      	push	{r4, lr}
 80037c8:	b2c9      	uxtb	r1, r1
 80037ca:	4402      	add	r2, r0
 80037cc:	4293      	cmp	r3, r2
 80037ce:	4618      	mov	r0, r3
 80037d0:	d101      	bne.n	80037d6 <memchr+0x12>
 80037d2:	2000      	movs	r0, #0
 80037d4:	e003      	b.n	80037de <memchr+0x1a>
 80037d6:	7804      	ldrb	r4, [r0, #0]
 80037d8:	3301      	adds	r3, #1
 80037da:	428c      	cmp	r4, r1
 80037dc:	d1f6      	bne.n	80037cc <memchr+0x8>
 80037de:	bd10      	pop	{r4, pc}

080037e0 <memcpy>:
 80037e0:	440a      	add	r2, r1
 80037e2:	4291      	cmp	r1, r2
 80037e4:	f100 33ff 	add.w	r3, r0, #4294967295
 80037e8:	d100      	bne.n	80037ec <memcpy+0xc>
 80037ea:	4770      	bx	lr
 80037ec:	b510      	push	{r4, lr}
 80037ee:	f811 4b01 	ldrb.w	r4, [r1], #1
 80037f2:	4291      	cmp	r1, r2
 80037f4:	f803 4f01 	strb.w	r4, [r3, #1]!
 80037f8:	d1f9      	bne.n	80037ee <memcpy+0xe>
 80037fa:	bd10      	pop	{r4, pc}

080037fc <memmove>:
 80037fc:	4288      	cmp	r0, r1
 80037fe:	b510      	push	{r4, lr}
 8003800:	eb01 0402 	add.w	r4, r1, r2
 8003804:	d902      	bls.n	800380c <memmove+0x10>
 8003806:	4284      	cmp	r4, r0
 8003808:	4623      	mov	r3, r4
 800380a:	d807      	bhi.n	800381c <memmove+0x20>
 800380c:	1e43      	subs	r3, r0, #1
 800380e:	42a1      	cmp	r1, r4
 8003810:	d008      	beq.n	8003824 <memmove+0x28>
 8003812:	f811 2b01 	ldrb.w	r2, [r1], #1
 8003816:	f803 2f01 	strb.w	r2, [r3, #1]!
 800381a:	e7f8      	b.n	800380e <memmove+0x12>
 800381c:	4601      	mov	r1, r0
 800381e:	4402      	add	r2, r0
 8003820:	428a      	cmp	r2, r1
 8003822:	d100      	bne.n	8003826 <memmove+0x2a>
 8003824:	bd10      	pop	{r4, pc}
 8003826:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800382a:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800382e:	e7f7      	b.n	8003820 <memmove+0x24>

08003830 <_free_r>:
 8003830:	b538      	push	{r3, r4, r5, lr}
 8003832:	4605      	mov	r5, r0
 8003834:	2900      	cmp	r1, #0
 8003836:	d040      	beq.n	80038ba <_free_r+0x8a>
 8003838:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800383c:	1f0c      	subs	r4, r1, #4
 800383e:	2b00      	cmp	r3, #0
 8003840:	bfb8      	it	lt
 8003842:	18e4      	addlt	r4, r4, r3
 8003844:	f000 f910 	bl	8003a68 <__malloc_lock>
 8003848:	4a1c      	ldr	r2, [pc, #112]	; (80038bc <_free_r+0x8c>)
 800384a:	6813      	ldr	r3, [r2, #0]
 800384c:	b933      	cbnz	r3, 800385c <_free_r+0x2c>
 800384e:	6063      	str	r3, [r4, #4]
 8003850:	6014      	str	r4, [r2, #0]
 8003852:	4628      	mov	r0, r5
 8003854:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8003858:	f000 b90c 	b.w	8003a74 <__malloc_unlock>
 800385c:	42a3      	cmp	r3, r4
 800385e:	d908      	bls.n	8003872 <_free_r+0x42>
 8003860:	6820      	ldr	r0, [r4, #0]
 8003862:	1821      	adds	r1, r4, r0
 8003864:	428b      	cmp	r3, r1
 8003866:	bf01      	itttt	eq
 8003868:	6819      	ldreq	r1, [r3, #0]
 800386a:	685b      	ldreq	r3, [r3, #4]
 800386c:	1809      	addeq	r1, r1, r0
 800386e:	6021      	streq	r1, [r4, #0]
 8003870:	e7ed      	b.n	800384e <_free_r+0x1e>
 8003872:	461a      	mov	r2, r3
 8003874:	685b      	ldr	r3, [r3, #4]
 8003876:	b10b      	cbz	r3, 800387c <_free_r+0x4c>
 8003878:	42a3      	cmp	r3, r4
 800387a:	d9fa      	bls.n	8003872 <_free_r+0x42>
 800387c:	6811      	ldr	r1, [r2, #0]
 800387e:	1850      	adds	r0, r2, r1
 8003880:	42a0      	cmp	r0, r4
 8003882:	d10b      	bne.n	800389c <_free_r+0x6c>
 8003884:	6820      	ldr	r0, [r4, #0]
 8003886:	4401      	add	r1, r0
 8003888:	1850      	adds	r0, r2, r1
 800388a:	4283      	cmp	r3, r0
 800388c:	6011      	str	r1, [r2, #0]
 800388e:	d1e0      	bne.n	8003852 <_free_r+0x22>
 8003890:	6818      	ldr	r0, [r3, #0]
 8003892:	685b      	ldr	r3, [r3, #4]
 8003894:	4401      	add	r1, r0
 8003896:	6011      	str	r1, [r2, #0]
 8003898:	6053      	str	r3, [r2, #4]
 800389a:	e7da      	b.n	8003852 <_free_r+0x22>
 800389c:	d902      	bls.n	80038a4 <_free_r+0x74>
 800389e:	230c      	movs	r3, #12
 80038a0:	602b      	str	r3, [r5, #0]
 80038a2:	e7d6      	b.n	8003852 <_free_r+0x22>
 80038a4:	6820      	ldr	r0, [r4, #0]
 80038a6:	1821      	adds	r1, r4, r0
 80038a8:	428b      	cmp	r3, r1
 80038aa:	bf01      	itttt	eq
 80038ac:	6819      	ldreq	r1, [r3, #0]
 80038ae:	685b      	ldreq	r3, [r3, #4]
 80038b0:	1809      	addeq	r1, r1, r0
 80038b2:	6021      	streq	r1, [r4, #0]
 80038b4:	6063      	str	r3, [r4, #4]
 80038b6:	6054      	str	r4, [r2, #4]
 80038b8:	e7cb      	b.n	8003852 <_free_r+0x22>
 80038ba:	bd38      	pop	{r3, r4, r5, pc}
 80038bc:	200002e8 	.word	0x200002e8

080038c0 <sbrk_aligned>:
 80038c0:	b570      	push	{r4, r5, r6, lr}
 80038c2:	4e0e      	ldr	r6, [pc, #56]	; (80038fc <sbrk_aligned+0x3c>)
 80038c4:	460c      	mov	r4, r1
 80038c6:	6831      	ldr	r1, [r6, #0]
 80038c8:	4605      	mov	r5, r0
 80038ca:	b911      	cbnz	r1, 80038d2 <sbrk_aligned+0x12>
 80038cc:	f000 f8bc 	bl	8003a48 <_sbrk_r>
 80038d0:	6030      	str	r0, [r6, #0]
 80038d2:	4621      	mov	r1, r4
 80038d4:	4628      	mov	r0, r5
 80038d6:	f000 f8b7 	bl	8003a48 <_sbrk_r>
 80038da:	1c43      	adds	r3, r0, #1
 80038dc:	d00a      	beq.n	80038f4 <sbrk_aligned+0x34>
 80038de:	1cc4      	adds	r4, r0, #3
 80038e0:	f024 0403 	bic.w	r4, r4, #3
 80038e4:	42a0      	cmp	r0, r4
 80038e6:	d007      	beq.n	80038f8 <sbrk_aligned+0x38>
 80038e8:	1a21      	subs	r1, r4, r0
 80038ea:	4628      	mov	r0, r5
 80038ec:	f000 f8ac 	bl	8003a48 <_sbrk_r>
 80038f0:	3001      	adds	r0, #1
 80038f2:	d101      	bne.n	80038f8 <sbrk_aligned+0x38>
 80038f4:	f04f 34ff 	mov.w	r4, #4294967295
 80038f8:	4620      	mov	r0, r4
 80038fa:	bd70      	pop	{r4, r5, r6, pc}
 80038fc:	200002ec 	.word	0x200002ec

08003900 <_malloc_r>:
 8003900:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8003904:	1ccd      	adds	r5, r1, #3
 8003906:	f025 0503 	bic.w	r5, r5, #3
 800390a:	3508      	adds	r5, #8
 800390c:	2d0c      	cmp	r5, #12
 800390e:	bf38      	it	cc
 8003910:	250c      	movcc	r5, #12
 8003912:	2d00      	cmp	r5, #0
 8003914:	4607      	mov	r7, r0
 8003916:	db01      	blt.n	800391c <_malloc_r+0x1c>
 8003918:	42a9      	cmp	r1, r5
 800391a:	d905      	bls.n	8003928 <_malloc_r+0x28>
 800391c:	230c      	movs	r3, #12
 800391e:	2600      	movs	r6, #0
 8003920:	603b      	str	r3, [r7, #0]
 8003922:	4630      	mov	r0, r6
 8003924:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8003928:	4e2e      	ldr	r6, [pc, #184]	; (80039e4 <_malloc_r+0xe4>)
 800392a:	f000 f89d 	bl	8003a68 <__malloc_lock>
 800392e:	6833      	ldr	r3, [r6, #0]
 8003930:	461c      	mov	r4, r3
 8003932:	bb34      	cbnz	r4, 8003982 <_malloc_r+0x82>
 8003934:	4629      	mov	r1, r5
 8003936:	4638      	mov	r0, r7
 8003938:	f7ff ffc2 	bl	80038c0 <sbrk_aligned>
 800393c:	1c43      	adds	r3, r0, #1
 800393e:	4604      	mov	r4, r0
 8003940:	d14d      	bne.n	80039de <_malloc_r+0xde>
 8003942:	6834      	ldr	r4, [r6, #0]
 8003944:	4626      	mov	r6, r4
 8003946:	2e00      	cmp	r6, #0
 8003948:	d140      	bne.n	80039cc <_malloc_r+0xcc>
 800394a:	6823      	ldr	r3, [r4, #0]
 800394c:	4631      	mov	r1, r6
 800394e:	4638      	mov	r0, r7
 8003950:	eb04 0803 	add.w	r8, r4, r3
 8003954:	f000 f878 	bl	8003a48 <_sbrk_r>
 8003958:	4580      	cmp	r8, r0
 800395a:	d13a      	bne.n	80039d2 <_malloc_r+0xd2>
 800395c:	6821      	ldr	r1, [r4, #0]
 800395e:	3503      	adds	r5, #3
 8003960:	1a6d      	subs	r5, r5, r1
 8003962:	f025 0503 	bic.w	r5, r5, #3
 8003966:	3508      	adds	r5, #8
 8003968:	2d0c      	cmp	r5, #12
 800396a:	bf38      	it	cc
 800396c:	250c      	movcc	r5, #12
 800396e:	4638      	mov	r0, r7
 8003970:	4629      	mov	r1, r5
 8003972:	f7ff ffa5 	bl	80038c0 <sbrk_aligned>
 8003976:	3001      	adds	r0, #1
 8003978:	d02b      	beq.n	80039d2 <_malloc_r+0xd2>
 800397a:	6823      	ldr	r3, [r4, #0]
 800397c:	442b      	add	r3, r5
 800397e:	6023      	str	r3, [r4, #0]
 8003980:	e00e      	b.n	80039a0 <_malloc_r+0xa0>
 8003982:	6822      	ldr	r2, [r4, #0]
 8003984:	1b52      	subs	r2, r2, r5
 8003986:	d41e      	bmi.n	80039c6 <_malloc_r+0xc6>
 8003988:	2a0b      	cmp	r2, #11
 800398a:	d916      	bls.n	80039ba <_malloc_r+0xba>
 800398c:	1961      	adds	r1, r4, r5
 800398e:	42a3      	cmp	r3, r4
 8003990:	6025      	str	r5, [r4, #0]
 8003992:	bf18      	it	ne
 8003994:	6059      	strne	r1, [r3, #4]
 8003996:	6863      	ldr	r3, [r4, #4]
 8003998:	bf08      	it	eq
 800399a:	6031      	streq	r1, [r6, #0]
 800399c:	5162      	str	r2, [r4, r5]
 800399e:	604b      	str	r3, [r1, #4]
 80039a0:	4638      	mov	r0, r7
 80039a2:	f104 060b 	add.w	r6, r4, #11
 80039a6:	f000 f865 	bl	8003a74 <__malloc_unlock>
 80039aa:	f026 0607 	bic.w	r6, r6, #7
 80039ae:	1d23      	adds	r3, r4, #4
 80039b0:	1af2      	subs	r2, r6, r3
 80039b2:	d0b6      	beq.n	8003922 <_malloc_r+0x22>
 80039b4:	1b9b      	subs	r3, r3, r6
 80039b6:	50a3      	str	r3, [r4, r2]
 80039b8:	e7b3      	b.n	8003922 <_malloc_r+0x22>
 80039ba:	6862      	ldr	r2, [r4, #4]
 80039bc:	42a3      	cmp	r3, r4
 80039be:	bf0c      	ite	eq
 80039c0:	6032      	streq	r2, [r6, #0]
 80039c2:	605a      	strne	r2, [r3, #4]
 80039c4:	e7ec      	b.n	80039a0 <_malloc_r+0xa0>
 80039c6:	4623      	mov	r3, r4
 80039c8:	6864      	ldr	r4, [r4, #4]
 80039ca:	e7b2      	b.n	8003932 <_malloc_r+0x32>
 80039cc:	4634      	mov	r4, r6
 80039ce:	6876      	ldr	r6, [r6, #4]
 80039d0:	e7b9      	b.n	8003946 <_malloc_r+0x46>
 80039d2:	230c      	movs	r3, #12
 80039d4:	4638      	mov	r0, r7
 80039d6:	603b      	str	r3, [r7, #0]
 80039d8:	f000 f84c 	bl	8003a74 <__malloc_unlock>
 80039dc:	e7a1      	b.n	8003922 <_malloc_r+0x22>
 80039de:	6025      	str	r5, [r4, #0]
 80039e0:	e7de      	b.n	80039a0 <_malloc_r+0xa0>
 80039e2:	bf00      	nop
 80039e4:	200002e8 	.word	0x200002e8

080039e8 <_realloc_r>:
 80039e8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80039ec:	4680      	mov	r8, r0
 80039ee:	4614      	mov	r4, r2
 80039f0:	460e      	mov	r6, r1
 80039f2:	b921      	cbnz	r1, 80039fe <_realloc_r+0x16>
 80039f4:	4611      	mov	r1, r2
 80039f6:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80039fa:	f7ff bf81 	b.w	8003900 <_malloc_r>
 80039fe:	b92a      	cbnz	r2, 8003a0c <_realloc_r+0x24>
 8003a00:	f7ff ff16 	bl	8003830 <_free_r>
 8003a04:	4625      	mov	r5, r4
 8003a06:	4628      	mov	r0, r5
 8003a08:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8003a0c:	f000 f838 	bl	8003a80 <_malloc_usable_size_r>
 8003a10:	4284      	cmp	r4, r0
 8003a12:	4607      	mov	r7, r0
 8003a14:	d802      	bhi.n	8003a1c <_realloc_r+0x34>
 8003a16:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8003a1a:	d812      	bhi.n	8003a42 <_realloc_r+0x5a>
 8003a1c:	4621      	mov	r1, r4
 8003a1e:	4640      	mov	r0, r8
 8003a20:	f7ff ff6e 	bl	8003900 <_malloc_r>
 8003a24:	4605      	mov	r5, r0
 8003a26:	2800      	cmp	r0, #0
 8003a28:	d0ed      	beq.n	8003a06 <_realloc_r+0x1e>
 8003a2a:	42bc      	cmp	r4, r7
 8003a2c:	4622      	mov	r2, r4
 8003a2e:	4631      	mov	r1, r6
 8003a30:	bf28      	it	cs
 8003a32:	463a      	movcs	r2, r7
 8003a34:	f7ff fed4 	bl	80037e0 <memcpy>
 8003a38:	4631      	mov	r1, r6
 8003a3a:	4640      	mov	r0, r8
 8003a3c:	f7ff fef8 	bl	8003830 <_free_r>
 8003a40:	e7e1      	b.n	8003a06 <_realloc_r+0x1e>
 8003a42:	4635      	mov	r5, r6
 8003a44:	e7df      	b.n	8003a06 <_realloc_r+0x1e>
	...

08003a48 <_sbrk_r>:
 8003a48:	b538      	push	{r3, r4, r5, lr}
 8003a4a:	2300      	movs	r3, #0
 8003a4c:	4d05      	ldr	r5, [pc, #20]	; (8003a64 <_sbrk_r+0x1c>)
 8003a4e:	4604      	mov	r4, r0
 8003a50:	4608      	mov	r0, r1
 8003a52:	602b      	str	r3, [r5, #0]
 8003a54:	f7fd fa76 	bl	8000f44 <_sbrk>
 8003a58:	1c43      	adds	r3, r0, #1
 8003a5a:	d102      	bne.n	8003a62 <_sbrk_r+0x1a>
 8003a5c:	682b      	ldr	r3, [r5, #0]
 8003a5e:	b103      	cbz	r3, 8003a62 <_sbrk_r+0x1a>
 8003a60:	6023      	str	r3, [r4, #0]
 8003a62:	bd38      	pop	{r3, r4, r5, pc}
 8003a64:	200002f0 	.word	0x200002f0

08003a68 <__malloc_lock>:
 8003a68:	4801      	ldr	r0, [pc, #4]	; (8003a70 <__malloc_lock+0x8>)
 8003a6a:	f000 b811 	b.w	8003a90 <__retarget_lock_acquire_recursive>
 8003a6e:	bf00      	nop
 8003a70:	200002f4 	.word	0x200002f4

08003a74 <__malloc_unlock>:
 8003a74:	4801      	ldr	r0, [pc, #4]	; (8003a7c <__malloc_unlock+0x8>)
 8003a76:	f000 b80c 	b.w	8003a92 <__retarget_lock_release_recursive>
 8003a7a:	bf00      	nop
 8003a7c:	200002f4 	.word	0x200002f4

08003a80 <_malloc_usable_size_r>:
 8003a80:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8003a84:	1f18      	subs	r0, r3, #4
 8003a86:	2b00      	cmp	r3, #0
 8003a88:	bfbc      	itt	lt
 8003a8a:	580b      	ldrlt	r3, [r1, r0]
 8003a8c:	18c0      	addlt	r0, r0, r3
 8003a8e:	4770      	bx	lr

08003a90 <__retarget_lock_acquire_recursive>:
 8003a90:	4770      	bx	lr

08003a92 <__retarget_lock_release_recursive>:
 8003a92:	4770      	bx	lr

08003a94 <_init>:
 8003a94:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003a96:	bf00      	nop
 8003a98:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003a9a:	bc08      	pop	{r3}
 8003a9c:	469e      	mov	lr, r3
 8003a9e:	4770      	bx	lr

08003aa0 <_fini>:
 8003aa0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003aa2:	bf00      	nop
 8003aa4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003aa6:	bc08      	pop	{r3}
 8003aa8:	469e      	mov	lr, r3
 8003aaa:	4770      	bx	lr
